
DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a8  00800100  00000906  0000099a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000906  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  008002a8  008002a8  00000b42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ad1  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b28  00000000  00000000  000027dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e8d  00000000  00000000  00003305  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  00004194  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000688  00000000  00000000  000044e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c1d  00000000  00000000  00004b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005785  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__vector_18>
  4c:	0c 94 1a 04 	jmp	0x834	; 0x834 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3a       	cpi	r26, 0xA8	; 168
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a8 ea       	ldi	r26, 0xA8	; 168
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 33       	cpi	r26, 0x35	; 53
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 06 01 	call	0x20c	; 0x20c <main>
  9e:	0c 94 81 04 	jmp	0x902	; 0x902 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
#include "gpio.h"

/* Function definitions ----------------------------------------------*/
void GPIO_config_output(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  be:	29 9a       	sbi	0x05, 1	; 5
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <toggle_e+0x4>
  c6:	00 00       	nop
  c8:	29 98       	cbi	0x05, 1	; 5
  ca:	08 95       	ret

000000cc <lcd_write>:
  cc:	cf 93       	push	r28
  ce:	c8 2f       	mov	r28, r24
  d0:	66 23       	and	r22, r22
  d2:	11 f0       	breq	.+4      	; 0xd8 <lcd_write+0xc>
  d4:	28 9a       	sbi	0x05, 0	; 5
  d6:	01 c0       	rjmp	.+2      	; 0xda <lcd_write+0xe>
  d8:	28 98       	cbi	0x05, 0	; 5
  da:	3c 9a       	sbi	0x07, 4	; 7
  dc:	39 9a       	sbi	0x07, 1	; 7
  de:	3a 9a       	sbi	0x07, 2	; 7
  e0:	3b 9a       	sbi	0x07, 3	; 7
  e2:	43 98       	cbi	0x08, 3	; 8
  e4:	42 98       	cbi	0x08, 2	; 8
  e6:	41 98       	cbi	0x08, 1	; 8
  e8:	44 98       	cbi	0x08, 4	; 8
  ea:	cc 23       	and	r28, r28
  ec:	0c f4       	brge	.+2      	; 0xf0 <lcd_write+0x24>
  ee:	43 9a       	sbi	0x08, 3	; 8
  f0:	c6 fd       	sbrc	r28, 6
  f2:	42 9a       	sbi	0x08, 2	; 8
  f4:	c5 fd       	sbrc	r28, 5
  f6:	41 9a       	sbi	0x08, 1	; 8
  f8:	c4 fd       	sbrc	r28, 4
  fa:	44 9a       	sbi	0x08, 4	; 8
  fc:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 100:	43 98       	cbi	0x08, 3	; 8
 102:	42 98       	cbi	0x08, 2	; 8
 104:	41 98       	cbi	0x08, 1	; 8
 106:	44 98       	cbi	0x08, 4	; 8
 108:	c3 fd       	sbrc	r28, 3
 10a:	43 9a       	sbi	0x08, 3	; 8
 10c:	c2 fd       	sbrc	r28, 2
 10e:	42 9a       	sbi	0x08, 2	; 8
 110:	c1 fd       	sbrc	r28, 1
 112:	41 9a       	sbi	0x08, 1	; 8
 114:	c0 fd       	sbrc	r28, 0
 116:	44 9a       	sbi	0x08, 4	; 8
 118:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 11c:	44 9a       	sbi	0x08, 4	; 8
 11e:	41 9a       	sbi	0x08, 1	; 8
 120:	42 9a       	sbi	0x08, 2	; 8
 122:	43 9a       	sbi	0x08, 3	; 8
 124:	87 eb       	ldi	r24, 0xB7	; 183
 126:	9b e0       	ldi	r25, 0x0B	; 11
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_write+0x5c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_write+0x62>
 12e:	00 00       	nop
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <lcd_command>:
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 13a:	08 95       	ret

0000013c <lcd_data>:
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 142:	08 95       	ret

00000144 <lcd_gotoxy>:
 144:	61 11       	cpse	r22, r1
 146:	04 c0       	rjmp	.+8      	; 0x150 <lcd_gotoxy+0xc>
 148:	80 58       	subi	r24, 0x80	; 128
 14a:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 14e:	08 95       	ret
 150:	80 54       	subi	r24, 0x40	; 64
 152:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 156:	08 95       	ret

00000158 <lcd_clrscr>:
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 15e:	08 95       	ret

00000160 <lcd_putc>:
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 166:	08 95       	ret

00000168 <lcd_puts>:
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ec 01       	movw	r28, r24
 16e:	21 96       	adiw	r28, 0x01	; 1
 170:	fc 01       	movw	r30, r24
 172:	80 81       	ld	r24, Z
 174:	88 23       	and	r24, r24
 176:	29 f0       	breq	.+10     	; 0x182 <lcd_puts+0x1a>
 178:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
 17c:	89 91       	ld	r24, Y+
 17e:	81 11       	cpse	r24, r1
 180:	fb cf       	rjmp	.-10     	; 0x178 <lcd_puts+0x10>
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 18c:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 18e:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 190:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 192:	3c 9a       	sbi	0x07, 4	; 7
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 194:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 196:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 198:	3b 9a       	sbi	0x07, 3	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	99 ef       	ldi	r25, 0xF9	; 249
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_init+0x16>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_init+0x1c>
 1a4:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 1a6:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 1a8:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_toggle();
 1aa:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1ae:	8f e1       	ldi	r24, 0x1F	; 31
 1b0:	9e e4       	ldi	r25, 0x4E	; 78
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x2a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_init+0x30>
 1b8:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1ba:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_init+0x3a>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_init+0x40>
 1c8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1ca:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_init+0x4a>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_init+0x50>
 1d8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1da:	44 98       	cbi	0x08, 4	; 8
    lcd_e_toggle();
 1dc:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_init+0x5c>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_init+0x62>
 1ea:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1ec:	88 e2       	ldi	r24, 0x28	; 40
 1ee:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1f2:	88 e0       	ldi	r24, 0x08	; 8
 1f4:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1f8:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 202:	8c 2f       	mov	r24, r28
 204:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
}/* lcd_init */
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <main>:
};

int main(void)
{
    //Configure outputs for 8-bit R-2R DAC
    GPIO_config_output(&DDRB, pin0);
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	84 e2       	ldi	r24, 0x24	; 36
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, pin1);
 216:	63 e0       	ldi	r22, 0x03	; 3
 218:	84 e2       	ldi	r24, 0x24	; 36
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin2);
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	8a e2       	ldi	r24, 0x2A	; 42
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin3);
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	8a e2       	ldi	r24, 0x2A	; 42
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin4);
 234:	64 e0       	ldi	r22, 0x04	; 4
 236:	8a e2       	ldi	r24, 0x2A	; 42
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin5);
 23e:	65 e0       	ldi	r22, 0x05	; 5
 240:	8a e2       	ldi	r24, 0x2A	; 42
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin6);
 248:	66 e0       	ldi	r22, 0x06	; 6
 24a:	8a e2       	ldi	r24, 0x2A	; 42
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin7);
 252:	67 e0       	ldi	r22, 0x07	; 7
 254:	8a e2       	ldi	r24, 0x2A	; 42
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 25c:	8c e0       	ldi	r24, 0x0C	; 12
 25e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_init>
    
    // Set pointer to beginning of CGRAM memory
    lcd_command(1 << LCD_CGRAM);
 262:	80 e4       	ldi	r24, 0x40	; 64
 264:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 268:	c0 e0       	ldi	r28, 0x00	; 0
 26a:	d1 e0       	ldi	r29, 0x01	; 1
 26c:	00 e2       	ldi	r16, 0x20	; 32
 26e:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t i = 0; i < 8*4; i++)
    {
        // Store all new chars to memory line by line
        lcd_data(customChar[i]);
 270:	89 91       	ld	r24, Y+
 272:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_data>
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
    
    // Set pointer to beginning of CGRAM memory
    lcd_command(1 << LCD_CGRAM);
    for (uint8_t i = 0; i < 8*4; i++)
 276:	c0 17       	cp	r28, r16
 278:	d1 07       	cpc	r29, r17
 27a:	d1 f7       	brne	.-12     	; 0x270 <main+0x64>
    {
        // Store all new chars to memory line by line
        lcd_data(customChar[i]);
    }
    // Set DDRAM address
    lcd_command(1 << LCD_DDRAM);
 27c:	80 e8       	ldi	r24, 0x80	; 128
 27e:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    
    //Put signal options at LCD display
    lcd_gotoxy(1, 0); 
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
    lcd_puts("Choose signal:");
 28a:	86 e2       	ldi	r24, 0x26	; 38
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_gotoxy(1, 1); 
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
    lcd_puts("1");
 29a:	85 ea       	ldi	r24, 0xA5	; 165
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(0);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    lcd_puts("  2");
 2a8:	85 e3       	ldi	r24, 0x35	; 53
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(1);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    lcd_puts("  3");
 2b6:	89 e3       	ldi	r24, 0x39	; 57
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(2);
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    lcd_puts("  4");
 2c4:	8d e3       	ldi	r24, 0x3D	; 61
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(3);
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    
    
    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
    ADMUX |= (1 << REFS0);
 2d2:	ec e7       	ldi	r30, 0x7C	; 124
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	80 64       	ori	r24, 0x40	; 64
 2da:	80 83       	st	Z, r24
    ADMUX &= ~(1 << REFS1);
 2dc:	80 81       	ld	r24, Z
 2de:	8f 77       	andi	r24, 0x7F	; 127
 2e0:	80 83       	st	Z, r24
    
    // Set input channel to ADC0
    ADMUX &= ~(1 << MUX3);
 2e2:	80 81       	ld	r24, Z
 2e4:	87 7f       	andi	r24, 0xF7	; 247
 2e6:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX2);
 2e8:	80 81       	ld	r24, Z
 2ea:	8b 7f       	andi	r24, 0xFB	; 251
 2ec:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX1);
 2ee:	80 81       	ld	r24, Z
 2f0:	8d 7f       	andi	r24, 0xFD	; 253
 2f2:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX0);
 2f4:	80 81       	ld	r24, Z
 2f6:	8e 7f       	andi	r24, 0xFE	; 254
 2f8:	80 83       	st	Z, r24
    
    // Enable ADC module
    ADCSRA |= (1 << ADEN);
 2fa:	ea e7       	ldi	r30, 0x7A	; 122
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	80 68       	ori	r24, 0x80	; 128
 302:	80 83       	st	Z, r24
    
    // Enable conversion complete interrupt
    ADCSRA |= (1 << ADIE);
 304:	80 81       	ld	r24, Z
 306:	88 60       	ori	r24, 0x08	; 8
 308:	80 83       	st	Z, r24
    
    // Set clock prescaler to 128
    ADCSRA |= (1 << ADPS2);
 30a:	80 81       	ld	r24, Z
 30c:	84 60       	ori	r24, 0x04	; 4
 30e:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS1);
 310:	80 81       	ld	r24, Z
 312:	82 60       	ori	r24, 0x02	; 2
 314:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS0);
 316:	80 81       	ld	r24, Z
 318:	81 60       	ori	r24, 0x01	; 1
 31a:	80 83       	st	Z, r24
    
    
    
    /* Configuration of Timer/Counter0 */
    TIM0_overflow_16us();
 31c:	85 b5       	in	r24, 0x25	; 37
 31e:	89 7f       	andi	r24, 0xF9	; 249
 320:	85 bd       	out	0x25, r24	; 37
 322:	85 b5       	in	r24, 0x25	; 37
 324:	81 60       	ori	r24, 0x01	; 1
 326:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 328:	ee e6       	ldi	r30, 0x6E	; 110
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	81 60       	ori	r24, 0x01	; 1
 330:	80 83       	st	Z, r24
    
    /* Configuration of Timer/Counter1 */
    TIM1_overflow_4ms();
 332:	e1 e8       	ldi	r30, 0x81	; 129
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	89 7f       	andi	r24, 0xF9	; 249
 33a:	80 83       	st	Z, r24
 33c:	80 81       	ld	r24, Z
 33e:	81 60       	ori	r24, 0x01	; 1
 340:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 342:	ef e6       	ldi	r30, 0x6F	; 111
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	81 60       	ori	r24, 0x01	; 1
 34a:	80 83       	st	Z, r24
    
    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 34c:	87 e6       	ldi	r24, 0x67	; 103
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 44 04 	call	0x888	; 0x888 <uart_init>
    
    // Enables interrupts by setting the global interrupt mask
    sei();
 354:	78 94       	sei
 356:	ff cf       	rjmp	.-2      	; 0x356 <main+0x14a>

00000358 <__vector_16>:
    return 0;
}

/* Interrupt service routine ----------------------------------------*/
ISR(TIMER0_OVF_vect)
{    
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	2f 93       	push	r18
 364:	8f 93       	push	r24
 366:	9f 93       	push	r25
 368:	ef 93       	push	r30
 36a:	ff 93       	push	r31
    static uint8_t lookup_number = 0;

    char lcd_string[10] = "          ";

    //Writing values to pins, where is the R-2R connected
    PORTD = value & 0b11111100;
 36c:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <value>
 370:	8c 7f       	andi	r24, 0xFC	; 252
 372:	8b b9       	out	0x0b, r24	; 11
    PORTB = (value & 0b00000011) << 2;
 374:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <value>
 378:	83 70       	andi	r24, 0x03	; 3
 37a:	88 0f       	add	r24, r24
 37c:	88 0f       	add	r24, r24
 37e:	85 b9       	out	0x05, r24	; 5
  
    //Sine function
    if (btn_pressed == 1)
 380:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <btn_pressed>
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	71 f4       	brne	.+28     	; 0x3a4 <__vector_16+0x4c>
    {
        value = sine_wave[lookup_number];
 388:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <lookup_number.2129>
 38c:	e9 2f       	mov	r30, r25
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	e9 55       	subi	r30, 0x59	; 89
 392:	fe 4f       	sbci	r31, 0xFE	; 254
 394:	80 81       	ld	r24, Z
 396:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <value>
        lookup_number += freq;
 39a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <freq>
 39e:	89 0f       	add	r24, r25
 3a0:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <lookup_number.2129>
    }
    
    //Square function
    if (btn_pressed == 2)
 3a4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <btn_pressed>
 3a8:	82 30       	cpi	r24, 0x02	; 2
 3aa:	b9 f4       	brne	.+46     	; 0x3da <__vector_16+0x82>
    {
        if (number_of_overflows < 128)
 3ac:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <number_of_overflows.2128>
 3b0:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <number_of_overflows.2128+0x1>
 3b4:	80 38       	cpi	r24, 0x80	; 128
 3b6:	91 05       	cpc	r25, r1
 3b8:	24 f4       	brge	.+8      	; 0x3c2 <__vector_16+0x6a>
        {
            value = 0b11111111;
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <value>
 3c0:	0c c0       	rjmp	.+24     	; 0x3da <__vector_16+0x82>
        }
        else if (number_of_overflows < 256)
 3c2:	8f 3f       	cpi	r24, 0xFF	; 255
 3c4:	91 05       	cpc	r25, r1
 3c6:	09 f0       	breq	.+2      	; 0x3ca <__vector_16+0x72>
 3c8:	1c f4       	brge	.+6      	; 0x3d0 <__vector_16+0x78>
        {
            value = 0;
 3ca:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <value>
 3ce:	48 c0       	rjmp	.+144    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
        }
        else
        {
            number_of_overflows = 0;
 3d0:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <number_of_overflows.2128+0x1>
 3d4:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <number_of_overflows.2128>
 3d8:	43 c0       	rjmp	.+134    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
        }
    }
    
    //Triangle function
    if (btn_pressed == 3)
 3da:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <btn_pressed>
 3de:	83 30       	cpi	r24, 0x03	; 3
 3e0:	39 f5       	brne	.+78     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
    {
        
        if (number_of_overflows < 256 && value >= 0)
 3e2:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <number_of_overflows.2128>
 3e6:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <number_of_overflows.2128+0x1>
 3ea:	8f 3f       	cpi	r24, 0xFF	; 255
 3ec:	91 05       	cpc	r25, r1
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <__vector_16+0x9a>
 3f0:	54 f4       	brge	.+20     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f2:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <value>
        {        
            value += freq;
 3f6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <freq>
 3fa:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <value>
 3fe:	89 0f       	add	r24, r25
 400:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <value>
 404:	15 c0       	rjmp	.+42     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
        } 
        else if (number_of_overflows < 511 && value > 0)
 406:	8f 3f       	cpi	r24, 0xFF	; 255
 408:	91 40       	sbci	r25, 0x01	; 1
 40a:	64 f4       	brge	.+24     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 40c:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <value>
 410:	88 23       	and	r24, r24
 412:	41 f0       	breq	.+16     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
        {
            value -= freq;
 414:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <freq>
 418:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <value>
 41c:	89 1b       	sub	r24, r25
 41e:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <value>
 422:	06 c0       	rjmp	.+12     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
        }
        else 
        {
            number_of_overflows = 0;
 424:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <number_of_overflows.2128+0x1>
 428:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <number_of_overflows.2128>
            value = 0;
 42c:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <value>
        }
    }
      
    //Ramp function    
    if (btn_pressed == 4)
 430:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <btn_pressed>
 434:	84 30       	cpi	r24, 0x04	; 4
 436:	39 f4       	brne	.+14     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
    {
        value += freq;
 438:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <freq>
 43c:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <value>
 440:	89 0f       	add	r24, r25
 442:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <value>
    }
       
    number_of_overflows += freq;   
 446:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <freq>
 44a:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <number_of_overflows.2128>
 44e:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <number_of_overflows.2128+0x1>
 452:	82 0f       	add	r24, r18
 454:	91 1d       	adc	r25, r1
 456:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <number_of_overflows.2128+0x1>
 45a:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <number_of_overflows.2128>
  
}
 45e:	05 c0       	rjmp	.+10     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
            number_of_overflows = 0;
        }
    }
    
    //Triangle function
    if (btn_pressed == 3)
 460:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <btn_pressed>
 464:	83 30       	cpi	r24, 0x03	; 3
 466:	21 f7       	brne	.-56     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 468:	c4 cf       	rjmp	.-120    	; 0x3f2 <__vector_16+0x9a>
        value += freq;
    }
       
    number_of_overflows += freq;   
  
}
 46a:	ff 91       	pop	r31
 46c:	ef 91       	pop	r30
 46e:	9f 91       	pop	r25
 470:	8f 91       	pop	r24
 472:	2f 91       	pop	r18
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <__vector_13>:
/* -------------------------------------------------------------------*/
ISR(TIMER1_OVF_vect)
{
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	8f 93       	push	r24
 48a:	ef 93       	push	r30
 48c:	ff 93       	push	r31
   ADCSRA |= (1 << ADSC);
 48e:	ea e7       	ldi	r30, 0x7A	; 122
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	80 64       	ori	r24, 0x40	; 64
 496:	80 83       	st	Z, r24
   
}
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	8f 91       	pop	r24
 49e:	0f 90       	pop	r0
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	0f 90       	pop	r0
 4a4:	1f 90       	pop	r1
 4a6:	18 95       	reti

000004a8 <__vector_21>:
 * ISR starts when ADC completes the conversion. Display value on LCD
 * and send it to UART.
 */

ISR(ADC_vect)
{
 4a8:	1f 92       	push	r1
 4aa:	0f 92       	push	r0
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	0f 92       	push	r0
 4b0:	11 24       	eor	r1, r1
 4b2:	2f 93       	push	r18
 4b4:	3f 93       	push	r19
 4b6:	4f 93       	push	r20
 4b8:	5f 93       	push	r21
 4ba:	6f 93       	push	r22
 4bc:	7f 93       	push	r23
 4be:	8f 93       	push	r24
 4c0:	9f 93       	push	r25
 4c2:	af 93       	push	r26
 4c4:	bf 93       	push	r27
 4c6:	ef 93       	push	r30
 4c8:	ff 93       	push	r31
    ADC_value = ADC;
 4ca:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 4ce:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 4d2:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <ADC_value+0x1>
 4d6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <ADC_value>

    char data[10];
    static uint16_t ADC_value_next = 0;


    if (ADC_value != ADC_value_next)
 4da:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <ADC_value>
 4de:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <ADC_value+0x1>
 4e2:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <__data_end>
 4e6:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <__data_end+0x1>
 4ea:	28 17       	cp	r18, r24
 4ec:	39 07       	cpc	r19, r25
 4ee:	09 f4       	brne	.+2      	; 0x4f2 <__vector_21+0x4a>
 4f0:	cd c0       	rjmp	.+410    	; 0x68c <__vector_21+0x1e4>
    {
        ADC_value_next = ADC_value;
 4f2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 4f6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 4fa:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <__data_end+0x1>
 4fe:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <__data_end>
        
        if (ADC_value < 5)
 502:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 506:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 50a:	05 97       	sbiw	r24, 0x05	; 5
 50c:	90 f4       	brcc	.+36     	; 0x532 <__vector_21+0x8a>
        {
            btn_pressed = 1;
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <btn_pressed>
            lcd_gotoxy(8, 0);
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	88 e0       	ldi	r24, 0x08	; 8
 518:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_putc('1');
 51c:	81 e3       	ldi	r24, 0x31	; 49
 51e:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
            lcd_putc(0);
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
            uart_puts("Sine");
 528:	81 e4       	ldi	r24, 0x41	; 65
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <uart_puts>
 530:	ad c0       	rjmp	.+346    	; 0x68c <__vector_21+0x1e4>
        }
        else if (ADC_value > 97 && ADC_value < 107)
 532:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 536:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 53a:	82 36       	cpi	r24, 0x62	; 98
 53c:	91 05       	cpc	r25, r1
 53e:	c8 f0       	brcs	.+50     	; 0x572 <__vector_21+0xca>
 540:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 544:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 548:	8b 36       	cpi	r24, 0x6B	; 107
 54a:	91 05       	cpc	r25, r1
 54c:	90 f4       	brcc	.+36     	; 0x572 <__vector_21+0xca>
        {
            btn_pressed = 2;
 54e:	82 e0       	ldi	r24, 0x02	; 2
 550:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <btn_pressed>
            lcd_gotoxy(8, 0);
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	88 e0       	ldi	r24, 0x08	; 8
 558:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_putc('2');
 55c:	82 e3       	ldi	r24, 0x32	; 50
 55e:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
            lcd_putc(1);
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
            uart_puts("Square");
 568:	86 e4       	ldi	r24, 0x46	; 70
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <uart_puts>
 570:	8d c0       	rjmp	.+282    	; 0x68c <__vector_21+0x1e4>
        }
        else if (ADC_value > 180 && ADC_value < 190)
 572:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 576:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 57a:	85 3b       	cpi	r24, 0xB5	; 181
 57c:	91 05       	cpc	r25, r1
 57e:	c8 f0       	brcs	.+50     	; 0x5b2 <__vector_21+0x10a>
 580:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 584:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 588:	8e 3b       	cpi	r24, 0xBE	; 190
 58a:	91 05       	cpc	r25, r1
 58c:	90 f4       	brcc	.+36     	; 0x5b2 <__vector_21+0x10a>
        {
            btn_pressed = 3;
 58e:	83 e0       	ldi	r24, 0x03	; 3
 590:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <btn_pressed>
            lcd_gotoxy(8, 0);
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	88 e0       	ldi	r24, 0x08	; 8
 598:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_putc('3');
 59c:	83 e3       	ldi	r24, 0x33	; 51
 59e:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
            lcd_putc(2);
 5a2:	82 e0       	ldi	r24, 0x02	; 2
 5a4:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
            uart_puts("Triangle");
 5a8:	8d e4       	ldi	r24, 0x4D	; 77
 5aa:	91 e0       	ldi	r25, 0x01	; 1
 5ac:	0e 94 72 04 	call	0x8e4	; 0x8e4 <uart_puts>
 5b0:	6d c0       	rjmp	.+218    	; 0x68c <__vector_21+0x1e4>
        }
        else if (ADC_value > 250 && ADC_value < 260)
 5b2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 5b6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 5ba:	8b 3f       	cpi	r24, 0xFB	; 251
 5bc:	91 05       	cpc	r25, r1
 5be:	c8 f0       	brcs	.+50     	; 0x5f2 <__vector_21+0x14a>
 5c0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 5c4:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 5c8:	84 30       	cpi	r24, 0x04	; 4
 5ca:	91 40       	sbci	r25, 0x01	; 1
 5cc:	90 f4       	brcc	.+36     	; 0x5f2 <__vector_21+0x14a>
        {
            btn_pressed = 4;
 5ce:	84 e0       	ldi	r24, 0x04	; 4
 5d0:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <btn_pressed>
            lcd_gotoxy(8, 0);
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	88 e0       	ldi	r24, 0x08	; 8
 5d8:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_putc('4');
 5dc:	84 e3       	ldi	r24, 0x34	; 52
 5de:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
            lcd_putc(3);
 5e2:	83 e0       	ldi	r24, 0x03	; 3
 5e4:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
            uart_puts("Ramp");
 5e8:	86 e5       	ldi	r24, 0x56	; 86
 5ea:	91 e0       	ldi	r25, 0x01	; 1
 5ec:	0e 94 72 04 	call	0x8e4	; 0x8e4 <uart_puts>
 5f0:	4d c0       	rjmp	.+154    	; 0x68c <__vector_21+0x1e4>
        }
        else if (ADC_value > 506 && ADC_value < 516)
 5f2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 5f6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 5fa:	8b 3f       	cpi	r24, 0xFB	; 251
 5fc:	91 40       	sbci	r25, 0x01	; 1
 5fe:	78 f0       	brcs	.+30     	; 0x61e <__vector_21+0x176>
 600:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 604:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 608:	84 30       	cpi	r24, 0x04	; 4
 60a:	92 40       	sbci	r25, 0x02	; 2
 60c:	40 f4       	brcc	.+16     	; 0x61e <__vector_21+0x176>
        {
            //lcd_putc('*');
            btn_pressed_next = 10;
 60e:	8a e0       	ldi	r24, 0x0A	; 10
 610:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <btn_pressed_next>
            uart_puts("f--");
 614:	8b e5       	ldi	r24, 0x5B	; 91
 616:	91 e0       	ldi	r25, 0x01	; 1
 618:	0e 94 72 04 	call	0x8e4	; 0x8e4 <uart_puts>
 61c:	37 c0       	rjmp	.+110    	; 0x68c <__vector_21+0x1e4>
            
        }
        else if (ADC_value > 533 && ADC_value < 543)
 61e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 622:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 626:	86 31       	cpi	r24, 0x16	; 22
 628:	92 40       	sbci	r25, 0x02	; 2
 62a:	78 f0       	brcs	.+30     	; 0x64a <__vector_21+0x1a2>
 62c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 630:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 634:	8f 31       	cpi	r24, 0x1F	; 31
 636:	92 40       	sbci	r25, 0x02	; 2
 638:	40 f4       	brcc	.+16     	; 0x64a <__vector_21+0x1a2>
        {
            //lcd_putc('0');
            btn_pressed = 11;
 63a:	8b e0       	ldi	r24, 0x0B	; 11
 63c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <btn_pressed>
            uart_puts("Output off");
 640:	8f e5       	ldi	r24, 0x5F	; 95
 642:	91 e0       	ldi	r25, 0x01	; 1
 644:	0e 94 72 04 	call	0x8e4	; 0x8e4 <uart_puts>
 648:	21 c0       	rjmp	.+66     	; 0x68c <__vector_21+0x1e4>
        }
        else if (ADC_value > 557 && ADC_value < 567)
 64a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 64e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 652:	8e 32       	cpi	r24, 0x2E	; 46
 654:	92 40       	sbci	r25, 0x02	; 2
 656:	78 f0       	brcs	.+30     	; 0x676 <__vector_21+0x1ce>
 658:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 65c:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 660:	87 33       	cpi	r24, 0x37	; 55
 662:	92 40       	sbci	r25, 0x02	; 2
 664:	40 f4       	brcc	.+16     	; 0x676 <__vector_21+0x1ce>
        {
            //lcd_putc('#');
            btn_pressed_next = 12;
 666:	8c e0       	ldi	r24, 0x0C	; 12
 668:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <btn_pressed_next>
            uart_puts("f++");
 66c:	8a e6       	ldi	r24, 0x6A	; 106
 66e:	91 e0       	ldi	r25, 0x01	; 1
 670:	0e 94 72 04 	call	0x8e4	; 0x8e4 <uart_puts>
 674:	0b c0       	rjmp	.+22     	; 0x68c <__vector_21+0x1e4>
        }
        else if (ADC_value > 1017)
 676:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 67a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 67e:	8a 3f       	cpi	r24, 0xFA	; 250
 680:	93 40       	sbci	r25, 0x03	; 3
 682:	20 f0       	brcs	.+8      	; 0x68c <__vector_21+0x1e4>
        {
            uart_puts("\r\n");
 684:	8e e6       	ldi	r24, 0x6E	; 110
 686:	91 e0       	ldi	r25, 0x01	; 1
 688:	0e 94 72 04 	call	0x8e4	; 0x8e4 <uart_puts>
        }
        
    }

    if (ADC_value > 1017)
 68c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 690:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 694:	8a 3f       	cpi	r24, 0xFA	; 250
 696:	93 40       	sbci	r25, 0x03	; 3
 698:	28 f0       	brcs	.+10     	; 0x6a4 <__vector_21+0x1fc>
    {
        freq_control++;
 69a:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <freq_control>
 69e:	8f 5f       	subi	r24, 0xFF	; 255
 6a0:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <freq_control>
    }

    if (btn_pressed != 11 && control == 0)
 6a4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <btn_pressed>
 6a8:	8b 30       	cpi	r24, 0x0B	; 11
 6aa:	b1 f0       	breq	.+44     	; 0x6d8 <__vector_21+0x230>
 6ac:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <control>
 6b0:	81 11       	cpse	r24, r1
 6b2:	12 c0       	rjmp	.+36     	; 0x6d8 <__vector_21+0x230>
    {
        lcd_gotoxy(0, 0);
 6b4:	60 e0       	ldi	r22, 0x00	; 0
 6b6:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
        lcd_puts("Pressed:   Exit0");
 6ba:	81 e7       	ldi	r24, 0x71	; 113
 6bc:	91 e0       	ldi	r25, 0x01	; 1
 6be:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        lcd_gotoxy(0, 1);
 6c2:	61 e0       	ldi	r22, 0x01	; 1
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
        lcd_puts("*f-- #f++     Hz");
 6ca:	82 e8       	ldi	r24, 0x82	; 130
 6cc:	91 e0       	ldi	r25, 0x01	; 1
 6ce:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        control = 1;
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <control>
    }
    //*
    if (btn_pressed_next == 10)
 6d8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <btn_pressed_next>
 6dc:	8a 30       	cpi	r24, 0x0A	; 10
 6de:	a9 f4       	brne	.+42     	; 0x70a <__vector_21+0x262>
    {
        btn_pressed_next = btn_pressed;
 6e0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <btn_pressed>
 6e4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <btn_pressed_next>
        if (freq_next == freq && freq > 1)
 6e8:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <freq_next>
 6ec:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <freq>
 6f0:	98 13       	cpse	r25, r24
 6f2:	57 c0       	rjmp	.+174    	; 0x7a2 <__vector_21+0x2fa>
 6f4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <freq>
 6f8:	82 30       	cpi	r24, 0x02	; 2
 6fa:	08 f4       	brcc	.+2      	; 0x6fe <__vector_21+0x256>
 6fc:	52 c0       	rjmp	.+164    	; 0x7a2 <__vector_21+0x2fa>
        {
            freq_next = freq - 1;
 6fe:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <freq>
 702:	81 50       	subi	r24, 0x01	; 1
 704:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <freq_next>
 708:	4c c0       	rjmp	.+152    	; 0x7a2 <__vector_21+0x2fa>
        }
    }
    // 0 pressed
    else if (btn_pressed == 11)
 70a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <btn_pressed>
 70e:	8b 30       	cpi	r24, 0x0B	; 11
 710:	a9 f5       	brne	.+106    	; 0x77c <__vector_21+0x2d4>
    {
        lcd_gotoxy(0, 0);
 712:	60 e0       	ldi	r22, 0x00	; 0
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
        lcd_puts(" Choose signal: ");
 71a:	83 e9       	ldi	r24, 0x93	; 147
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        lcd_gotoxy(0, 1);
 722:	61 e0       	ldi	r22, 0x01	; 1
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
        lcd_puts(" 1");
 72a:	84 ea       	ldi	r24, 0xA4	; 164
 72c:	91 e0       	ldi	r25, 0x01	; 1
 72e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        lcd_putc(0);
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_puts("  2");
 738:	85 e3       	ldi	r24, 0x35	; 53
 73a:	91 e0       	ldi	r25, 0x01	; 1
 73c:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        lcd_putc(1);
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_puts("  3");
 746:	89 e3       	ldi	r24, 0x39	; 57
 748:	91 e0       	ldi	r25, 0x01	; 1
 74a:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        lcd_putc(2);
 74e:	82 e0       	ldi	r24, 0x02	; 2
 750:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_puts("  4");
 754:	8d e3       	ldi	r24, 0x3D	; 61
 756:	91 e0       	ldi	r25, 0x01	; 1
 758:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        lcd_putc(3);
 75c:	83 e0       	ldi	r24, 0x03	; 3
 75e:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_putc(' ');
 762:	80 e2       	ldi	r24, 0x20	; 32
 764:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    
        value = 0;
 768:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <value>
        control = 0;
 76c:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <control>
        freq_next = 1;
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <freq_next>
        freq = 1;
 776:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <freq>
 77a:	13 c0       	rjmp	.+38     	; 0x7a2 <__vector_21+0x2fa>
        
    } 
    
    //#
    else if (btn_pressed_next == 12)
 77c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <btn_pressed_next>
 780:	8c 30       	cpi	r24, 0x0C	; 12
 782:	79 f4       	brne	.+30     	; 0x7a2 <__vector_21+0x2fa>
    {
        btn_pressed_next = btn_pressed;
 784:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <btn_pressed>
 788:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <btn_pressed_next>
        if (freq_next == freq)
 78c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <freq_next>
 790:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <freq>
 794:	98 13       	cpse	r25, r24
 796:	05 c0       	rjmp	.+10     	; 0x7a2 <__vector_21+0x2fa>
        {
            freq_next = freq + 1;
 798:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <freq>
 79c:	8f 5f       	subi	r24, 0xFF	; 255
 79e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <freq_next>
        }
    }
    
    if (freq_control >= 10)
 7a2:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <freq_control>
 7a6:	8a 30       	cpi	r24, 0x0A	; 10
 7a8:	30 f0       	brcs	.+12     	; 0x7b6 <__vector_21+0x30e>
    {
        freq = freq_next;
 7aa:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <freq_next>
 7ae:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <freq>
        freq_control = 0;
 7b2:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <freq_control>
    }
 7b6:	ff 91       	pop	r31
 7b8:	ef 91       	pop	r30
 7ba:	bf 91       	pop	r27
 7bc:	af 91       	pop	r26
 7be:	9f 91       	pop	r25
 7c0:	8f 91       	pop	r24
 7c2:	7f 91       	pop	r23
 7c4:	6f 91       	pop	r22
 7c6:	5f 91       	pop	r21
 7c8:	4f 91       	pop	r20
 7ca:	3f 91       	pop	r19
 7cc:	2f 91       	pop	r18
 7ce:	0f 90       	pop	r0
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	0f 90       	pop	r0
 7d4:	1f 90       	pop	r1
 7d6:	18 95       	reti

000007d8 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 7d8:	1f 92       	push	r1
 7da:	0f 92       	push	r0
 7dc:	0f b6       	in	r0, 0x3f	; 63
 7de:	0f 92       	push	r0
 7e0:	11 24       	eor	r1, r1
 7e2:	2f 93       	push	r18
 7e4:	8f 93       	push	r24
 7e6:	9f 93       	push	r25
 7e8:	ef 93       	push	r30
 7ea:	ff 93       	push	r31
 7ec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 7f0:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 7f4:	8c 71       	andi	r24, 0x1C	; 28
 7f6:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <UART_RxHead>
 7fa:	ef 5f       	subi	r30, 0xFF	; 255
 7fc:	ef 73       	andi	r30, 0x3F	; 63
 7fe:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <UART_RxTail>
 802:	e9 17       	cp	r30, r25
 804:	39 f0       	breq	.+14     	; 0x814 <__vector_18+0x3c>
 806:	e0 93 b2 02 	sts	0x02B2, r30	; 0x8002b2 <UART_RxHead>
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	eb 54       	subi	r30, 0x4B	; 75
 80e:	fd 4f       	sbci	r31, 0xFD	; 253
 810:	20 83       	st	Z, r18
 812:	01 c0       	rjmp	.+2      	; 0x816 <__vector_18+0x3e>
 814:	82 e0       	ldi	r24, 0x02	; 2
 816:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <UART_LastRxError>
 81a:	89 2b       	or	r24, r25
 81c:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <UART_LastRxError>
 820:	ff 91       	pop	r31
 822:	ef 91       	pop	r30
 824:	9f 91       	pop	r25
 826:	8f 91       	pop	r24
 828:	2f 91       	pop	r18
 82a:	0f 90       	pop	r0
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	0f 90       	pop	r0
 830:	1f 90       	pop	r1
 832:	18 95       	reti

00000834 <__vector_19>:
 834:	1f 92       	push	r1
 836:	0f 92       	push	r0
 838:	0f b6       	in	r0, 0x3f	; 63
 83a:	0f 92       	push	r0
 83c:	11 24       	eor	r1, r1
 83e:	8f 93       	push	r24
 840:	9f 93       	push	r25
 842:	ef 93       	push	r30
 844:	ff 93       	push	r31
 846:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <UART_TxHead>
 84a:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <UART_TxTail>
 84e:	98 17       	cp	r25, r24
 850:	69 f0       	breq	.+26     	; 0x86c <__vector_19+0x38>
 852:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <UART_TxTail>
 856:	ef 5f       	subi	r30, 0xFF	; 255
 858:	ef 73       	andi	r30, 0x3F	; 63
 85a:	e0 93 b3 02 	sts	0x02B3, r30	; 0x8002b3 <UART_TxTail>
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	eb 50       	subi	r30, 0x0B	; 11
 862:	fd 4f       	sbci	r31, 0xFD	; 253
 864:	80 81       	ld	r24, Z
 866:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 86a:	05 c0       	rjmp	.+10     	; 0x876 <__vector_19+0x42>
 86c:	e1 ec       	ldi	r30, 0xC1	; 193
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	80 81       	ld	r24, Z
 872:	8f 7d       	andi	r24, 0xDF	; 223
 874:	80 83       	st	Z, r24
 876:	ff 91       	pop	r31
 878:	ef 91       	pop	r30
 87a:	9f 91       	pop	r25
 87c:	8f 91       	pop	r24
 87e:	0f 90       	pop	r0
 880:	0f be       	out	0x3f, r0	; 63
 882:	0f 90       	pop	r0
 884:	1f 90       	pop	r1
 886:	18 95       	reti

00000888 <uart_init>:
 888:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <UART_TxHead>
 88c:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <UART_TxTail>
 890:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <UART_RxHead>
 894:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <UART_RxTail>
 898:	99 23       	and	r25, r25
 89a:	1c f4       	brge	.+6      	; 0x8a2 <uart_init+0x1a>
 89c:	22 e0       	ldi	r18, 0x02	; 2
 89e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 8a2:	90 78       	andi	r25, 0x80	; 128
 8a4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 8a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 8ac:	88 e9       	ldi	r24, 0x98	; 152
 8ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 8b2:	86 e0       	ldi	r24, 0x06	; 6
 8b4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 8b8:	08 95       	ret

000008ba <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 8ba:	20 91 b4 02 	lds	r18, 0x02B4	; 0x8002b4 <UART_TxHead>
 8be:	2f 5f       	subi	r18, 0xFF	; 255
 8c0:	2f 73       	andi	r18, 0x3F	; 63

    while (tmphead == UART_TxTail)
 8c2:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <UART_TxTail>
 8c6:	29 17       	cp	r18, r25
 8c8:	e1 f3       	breq	.-8      	; 0x8c2 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 8ca:	e2 2f       	mov	r30, r18
 8cc:	f0 e0       	ldi	r31, 0x00	; 0
 8ce:	eb 50       	subi	r30, 0x0B	; 11
 8d0:	fd 4f       	sbci	r31, 0xFD	; 253
 8d2:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 8d4:	20 93 b4 02 	sts	0x02B4, r18	; 0x8002b4 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 8d8:	e1 ec       	ldi	r30, 0xC1	; 193
 8da:	f0 e0       	ldi	r31, 0x00	; 0
 8dc:	80 81       	ld	r24, Z
 8de:	80 62       	ori	r24, 0x20	; 32
 8e0:	80 83       	st	Z, r24
 8e2:	08 95       	ret

000008e4 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 8e4:	cf 93       	push	r28
 8e6:	df 93       	push	r29
 8e8:	ec 01       	movw	r28, r24
    while (*s)
 8ea:	88 81       	ld	r24, Y
 8ec:	88 23       	and	r24, r24
 8ee:	31 f0       	breq	.+12     	; 0x8fc <uart_puts+0x18>
 8f0:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 8f2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 8f6:	89 91       	ld	r24, Y+
 8f8:	81 11       	cpse	r24, r1
 8fa:	fb cf       	rjmp	.-10     	; 0x8f2 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 8fc:	df 91       	pop	r29
 8fe:	cf 91       	pop	r28
 900:	08 95       	ret

00000902 <_exit>:
 902:	f8 94       	cli

00000904 <__stop_program>:
 904:	ff cf       	rjmp	.-2      	; 0x904 <__stop_program>
