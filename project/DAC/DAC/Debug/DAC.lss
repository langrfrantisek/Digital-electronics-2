
DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000178  00800100  000007e4  00000878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  00800278  00800278  000009f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001951  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ada  00000000  00000000  000024f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e08  00000000  00000000  00002fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00003ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066e  00000000  00000000  000040c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b57  00000000  00000000  00004736  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000528d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__vector_18>
  4c:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 37       	cpi	r26, 0x78	; 120
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a8 e7       	ldi	r26, 0x78	; 120
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 06 01 	call	0x20c	; 0x20c <main>
  9e:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
#include "gpio.h"

/* Function definitions ----------------------------------------------*/
void GPIO_config_output(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  be:	29 9a       	sbi	0x05, 1	; 5
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <toggle_e+0x4>
  c6:	00 00       	nop
  c8:	29 98       	cbi	0x05, 1	; 5
  ca:	08 95       	ret

000000cc <lcd_write>:
  cc:	cf 93       	push	r28
  ce:	c8 2f       	mov	r28, r24
  d0:	66 23       	and	r22, r22
  d2:	11 f0       	breq	.+4      	; 0xd8 <lcd_write+0xc>
  d4:	28 9a       	sbi	0x05, 0	; 5
  d6:	01 c0       	rjmp	.+2      	; 0xda <lcd_write+0xe>
  d8:	28 98       	cbi	0x05, 0	; 5
  da:	3c 9a       	sbi	0x07, 4	; 7
  dc:	39 9a       	sbi	0x07, 1	; 7
  de:	3a 9a       	sbi	0x07, 2	; 7
  e0:	3b 9a       	sbi	0x07, 3	; 7
  e2:	43 98       	cbi	0x08, 3	; 8
  e4:	42 98       	cbi	0x08, 2	; 8
  e6:	41 98       	cbi	0x08, 1	; 8
  e8:	44 98       	cbi	0x08, 4	; 8
  ea:	cc 23       	and	r28, r28
  ec:	0c f4       	brge	.+2      	; 0xf0 <lcd_write+0x24>
  ee:	43 9a       	sbi	0x08, 3	; 8
  f0:	c6 fd       	sbrc	r28, 6
  f2:	42 9a       	sbi	0x08, 2	; 8
  f4:	c5 fd       	sbrc	r28, 5
  f6:	41 9a       	sbi	0x08, 1	; 8
  f8:	c4 fd       	sbrc	r28, 4
  fa:	44 9a       	sbi	0x08, 4	; 8
  fc:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 100:	43 98       	cbi	0x08, 3	; 8
 102:	42 98       	cbi	0x08, 2	; 8
 104:	41 98       	cbi	0x08, 1	; 8
 106:	44 98       	cbi	0x08, 4	; 8
 108:	c3 fd       	sbrc	r28, 3
 10a:	43 9a       	sbi	0x08, 3	; 8
 10c:	c2 fd       	sbrc	r28, 2
 10e:	42 9a       	sbi	0x08, 2	; 8
 110:	c1 fd       	sbrc	r28, 1
 112:	41 9a       	sbi	0x08, 1	; 8
 114:	c0 fd       	sbrc	r28, 0
 116:	44 9a       	sbi	0x08, 4	; 8
 118:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 11c:	44 9a       	sbi	0x08, 4	; 8
 11e:	41 9a       	sbi	0x08, 1	; 8
 120:	42 9a       	sbi	0x08, 2	; 8
 122:	43 9a       	sbi	0x08, 3	; 8
 124:	87 eb       	ldi	r24, 0xB7	; 183
 126:	9b e0       	ldi	r25, 0x0B	; 11
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_write+0x5c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_write+0x62>
 12e:	00 00       	nop
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <lcd_command>:
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 13a:	08 95       	ret

0000013c <lcd_data>:
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 142:	08 95       	ret

00000144 <lcd_gotoxy>:
 144:	61 11       	cpse	r22, r1
 146:	04 c0       	rjmp	.+8      	; 0x150 <lcd_gotoxy+0xc>
 148:	80 58       	subi	r24, 0x80	; 128
 14a:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 14e:	08 95       	ret
 150:	80 54       	subi	r24, 0x40	; 64
 152:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 156:	08 95       	ret

00000158 <lcd_clrscr>:
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 15e:	08 95       	ret

00000160 <lcd_putc>:
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 166:	08 95       	ret

00000168 <lcd_puts>:
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ec 01       	movw	r28, r24
 16e:	21 96       	adiw	r28, 0x01	; 1
 170:	fc 01       	movw	r30, r24
 172:	80 81       	ld	r24, Z
 174:	88 23       	and	r24, r24
 176:	29 f0       	breq	.+10     	; 0x182 <lcd_puts+0x1a>
 178:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
 17c:	89 91       	ld	r24, Y+
 17e:	81 11       	cpse	r24, r1
 180:	fb cf       	rjmp	.-10     	; 0x178 <lcd_puts+0x10>
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 18c:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 18e:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 190:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 192:	3c 9a       	sbi	0x07, 4	; 7
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 194:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 196:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 198:	3b 9a       	sbi	0x07, 3	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	99 ef       	ldi	r25, 0xF9	; 249
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_init+0x16>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_init+0x1c>
 1a4:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 1a6:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 1a8:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_toggle();
 1aa:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1ae:	8f e1       	ldi	r24, 0x1F	; 31
 1b0:	9e e4       	ldi	r25, 0x4E	; 78
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x2a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_init+0x30>
 1b8:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1ba:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_init+0x3a>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_init+0x40>
 1c8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1ca:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_init+0x4a>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_init+0x50>
 1d8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1da:	44 98       	cbi	0x08, 4	; 8
    lcd_e_toggle();
 1dc:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_init+0x5c>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_init+0x62>
 1ea:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1ec:	88 e2       	ldi	r24, 0x28	; 40
 1ee:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1f2:	88 e0       	ldi	r24, 0x08	; 8
 1f4:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1f8:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 202:	8c 2f       	mov	r24, r28
 204:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
}/* lcd_init */
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <main>:
};

int main(void)
{
    //Configure outputs for 8-bit R-2R DAC
    GPIO_config_output(&DDRB, pin0);
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	84 e2       	ldi	r24, 0x24	; 36
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, pin1);
 216:	63 e0       	ldi	r22, 0x03	; 3
 218:	84 e2       	ldi	r24, 0x24	; 36
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin2);
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	8a e2       	ldi	r24, 0x2A	; 42
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin3);
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	8a e2       	ldi	r24, 0x2A	; 42
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin4);
 234:	64 e0       	ldi	r22, 0x04	; 4
 236:	8a e2       	ldi	r24, 0x2A	; 42
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin5);
 23e:	65 e0       	ldi	r22, 0x05	; 5
 240:	8a e2       	ldi	r24, 0x2A	; 42
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin6);
 248:	66 e0       	ldi	r22, 0x06	; 6
 24a:	8a e2       	ldi	r24, 0x2A	; 42
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin7);
 252:	67 e0       	ldi	r22, 0x07	; 7
 254:	8a e2       	ldi	r24, 0x2A	; 42
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 25c:	8c e0       	ldi	r24, 0x0C	; 12
 25e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_init>
    
    // Set pointer to beginning of CGRAM memory
    lcd_command(1 << LCD_CGRAM);
 262:	80 e4       	ldi	r24, 0x40	; 64
 264:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 268:	c4 e0       	ldi	r28, 0x04	; 4
 26a:	d1 e0       	ldi	r29, 0x01	; 1
 26c:	04 e2       	ldi	r16, 0x24	; 36
 26e:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t i = 0; i < 8*4; i++)
    {
        // Store all new chars to memory line by line
        lcd_data(customChar[i]);
 270:	89 91       	ld	r24, Y+
 272:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_data>
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
    
    // Set pointer to beginning of CGRAM memory
    lcd_command(1 << LCD_CGRAM);
    for (uint8_t i = 0; i < 8*4; i++)
 276:	c0 17       	cp	r28, r16
 278:	d1 07       	cpc	r29, r17
 27a:	d1 f7       	brne	.-12     	; 0x270 <main+0x64>
    {
        // Store all new chars to memory line by line
        lcd_data(customChar[i]);
    }
    // Set DDRAM address
    lcd_command(1 << LCD_DDRAM);
 27c:	80 e8       	ldi	r24, 0x80	; 128
 27e:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    
    //Put signal options at LCD display
    lcd_gotoxy(1, 0); 
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
    lcd_puts("Choose signal:");
 28a:	86 e2       	ldi	r24, 0x26	; 38
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_gotoxy(1, 1); 
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
    lcd_puts("1");
 29a:	85 e7       	ldi	r24, 0x75	; 117
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(0);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    lcd_puts("  2");
 2a8:	85 e3       	ldi	r24, 0x35	; 53
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(1);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    lcd_puts("  3");
 2b6:	89 e3       	ldi	r24, 0x39	; 57
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(2);
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    lcd_puts("  4");
 2c4:	8d e3       	ldi	r24, 0x3D	; 61
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(3);
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    
    
    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
    ADMUX |= (1 << REFS0);
 2d2:	ec e7       	ldi	r30, 0x7C	; 124
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	80 64       	ori	r24, 0x40	; 64
 2da:	80 83       	st	Z, r24
    ADMUX &= ~(1 << REFS1);
 2dc:	80 81       	ld	r24, Z
 2de:	8f 77       	andi	r24, 0x7F	; 127
 2e0:	80 83       	st	Z, r24
    
    // Set input channel to ADC0
    ADMUX &= ~(1 << MUX3);
 2e2:	80 81       	ld	r24, Z
 2e4:	87 7f       	andi	r24, 0xF7	; 247
 2e6:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX2);
 2e8:	80 81       	ld	r24, Z
 2ea:	8b 7f       	andi	r24, 0xFB	; 251
 2ec:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX1);
 2ee:	80 81       	ld	r24, Z
 2f0:	8d 7f       	andi	r24, 0xFD	; 253
 2f2:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX0);
 2f4:	80 81       	ld	r24, Z
 2f6:	8e 7f       	andi	r24, 0xFE	; 254
 2f8:	80 83       	st	Z, r24
    
    // Enable ADC module
    ADCSRA |= (1 << ADEN);
 2fa:	ea e7       	ldi	r30, 0x7A	; 122
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	80 68       	ori	r24, 0x80	; 128
 302:	80 83       	st	Z, r24
    
    // Enable conversion complete interrupt
    //ADCSRA |= (1 << ADIE);
    
    // Set clock prescaler to 128
    ADCSRA |= (1 << ADPS2);
 304:	80 81       	ld	r24, Z
 306:	84 60       	ori	r24, 0x04	; 4
 308:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS1);
 30a:	80 81       	ld	r24, Z
 30c:	82 60       	ori	r24, 0x02	; 2
 30e:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS0);
 310:	80 81       	ld	r24, Z
 312:	81 60       	ori	r24, 0x01	; 1
 314:	80 83       	st	Z, r24
    
    
    
    /* Configuration of Timer/Counter0 */
    TIM0_overflow_16us();
 316:	85 b5       	in	r24, 0x25	; 37
 318:	89 7f       	andi	r24, 0xF9	; 249
 31a:	85 bd       	out	0x25, r24	; 37
 31c:	85 b5       	in	r24, 0x25	; 37
 31e:	81 60       	ori	r24, 0x01	; 1
 320:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 322:	ee e6       	ldi	r30, 0x6E	; 110
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	81 60       	ori	r24, 0x01	; 1
 32a:	80 83       	st	Z, r24
    /* Configuration of Timer/Counter1 */
    //TIM1_overflow_262ms();
    //TIM1_overflow_interrupt_enable();
    
    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 32c:	87 e6       	ldi	r24, 0x67	; 103
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 d7 03 	call	0x7ae	; 0x7ae <uart_init>
    
    // Enables interrupts by setting the global interrupt mask
    sei();
 334:	78 94       	sei
 336:	ff cf       	rjmp	.-2      	; 0x336 <main+0x12a>

00000338 <__vector_16>:
    return 0;
}

/* Interrupt service routine ----------------------------------------*/
ISR(TIMER0_OVF_vect)
{    
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	2f 93       	push	r18
 344:	3f 93       	push	r19
 346:	4f 93       	push	r20
 348:	5f 93       	push	r21
 34a:	6f 93       	push	r22
 34c:	7f 93       	push	r23
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
 352:	af 93       	push	r26
 354:	bf 93       	push	r27
 356:	ef 93       	push	r30
 358:	ff 93       	push	r31
    static uint8_t btn_pressed = 11;   //remember last pressed button, 11 by default means 0 pressed
    static uint8_t btn_pressed_next = 11;
    static uint16_t uart_counter = 0;
    char lcd_string[10] = "          ";

    ADCSRA |= (1 << ADSC);
 35a:	ea e7       	ldi	r30, 0x7A	; 122
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	80 64       	ori	r24, 0x40	; 64
 362:	80 83       	st	Z, r24
    ADC_value = ADC;
 364:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 368:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 36c:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <ADC_value+0x1>
 370:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <ADC_value>

    //Writing values to pins, where is the R-2R connected
    PORTD = value & 0b11111100;
 374:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <value.2122>
 378:	8c 7f       	andi	r24, 0xFC	; 252
 37a:	8b b9       	out	0x0b, r24	; 11
    PORTB = (value & 0b00000011) << 2;
 37c:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <value.2122>
 380:	83 70       	andi	r24, 0x03	; 3
 382:	88 0f       	add	r24, r24
 384:	88 0f       	add	r24, r24
 386:	85 b9       	out	0x05, r24	; 5
    
    if (btn_pressed != 11 && control == 0)
 388:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <btn_pressed.2128>
 38c:	8b 30       	cpi	r24, 0x0B	; 11
 38e:	b1 f0       	breq	.+44     	; 0x3bc <__vector_16+0x84>
 390:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <control.2127>
 394:	81 11       	cpse	r24, r1
 396:	12 c0       	rjmp	.+36     	; 0x3bc <__vector_16+0x84>
    {
        lcd_gotoxy(0, 0);
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
        lcd_puts("Pressed:   Exit0");
 39e:	81 e4       	ldi	r24, 0x41	; 65
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        lcd_gotoxy(0, 1);
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
        lcd_puts("*f-- #f++     Hz");
 3ae:	82 e5       	ldi	r24, 0x52	; 82
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        control = 1;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <control.2127>
    }
     
    
    lcd_gotoxy(8, 0); 
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	88 e0       	ldi	r24, 0x08	; 8
 3c0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
    if (ADC_value < 5)
 3c4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 3c8:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 3cc:	05 97       	sbiw	r24, 0x05	; 5
 3ce:	50 f4       	brcc	.+20     	; 0x3e4 <__vector_16+0xac>
    {
        btn_pressed = 1;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <btn_pressed.2128>
        lcd_putc('1');
 3d6:	81 e3       	ldi	r24, 0x31	; 49
 3d8:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_putc(0);
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
 3e2:	8a c0       	rjmp	.+276    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
    }
    else if (ADC_value > 97 && ADC_value < 107)
 3e4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 3e8:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 3ec:	82 36       	cpi	r24, 0x62	; 98
 3ee:	91 05       	cpc	r25, r1
 3f0:	88 f0       	brcs	.+34     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3f2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 3f6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 3fa:	8b 36       	cpi	r24, 0x6B	; 107
 3fc:	91 05       	cpc	r25, r1
 3fe:	50 f4       	brcc	.+20     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
    {
        btn_pressed = 2;
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <btn_pressed.2128>
        lcd_putc('2');
 406:	82 e3       	ldi	r24, 0x32	; 50
 408:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_putc(1);
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
 412:	72 c0       	rjmp	.+228    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
    }
    else if (ADC_value > 180 && ADC_value < 190)
 414:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 418:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 41c:	85 3b       	cpi	r24, 0xB5	; 181
 41e:	91 05       	cpc	r25, r1
 420:	88 f0       	brcs	.+34     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 422:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 426:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 42a:	8e 3b       	cpi	r24, 0xBE	; 190
 42c:	91 05       	cpc	r25, r1
 42e:	50 f4       	brcc	.+20     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
    {
        btn_pressed = 3;
 430:	83 e0       	ldi	r24, 0x03	; 3
 432:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <btn_pressed.2128>
        lcd_putc('3');
 436:	83 e3       	ldi	r24, 0x33	; 51
 438:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_putc(2);
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
 442:	5a c0       	rjmp	.+180    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
    }
    else if (ADC_value > 250 && ADC_value < 260)
 444:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 448:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 44c:	8b 3f       	cpi	r24, 0xFB	; 251
 44e:	91 05       	cpc	r25, r1
 450:	88 f0       	brcs	.+34     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 452:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 456:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 45a:	84 30       	cpi	r24, 0x04	; 4
 45c:	91 40       	sbci	r25, 0x01	; 1
 45e:	50 f4       	brcc	.+20     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
    {
        btn_pressed = 4;
 460:	84 e0       	ldi	r24, 0x04	; 4
 462:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <btn_pressed.2128>
        lcd_putc('4');
 466:	84 e3       	ldi	r24, 0x34	; 52
 468:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_putc(3);
 46c:	83 e0       	ldi	r24, 0x03	; 3
 46e:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
 472:	42 c0       	rjmp	.+132    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
    }
    else if (ADC_value > 506 && ADC_value < 516)
 474:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 478:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 47c:	8b 3f       	cpi	r24, 0xFB	; 251
 47e:	91 40       	sbci	r25, 0x01	; 1
 480:	58 f0       	brcs	.+22     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 482:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 486:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 48a:	84 30       	cpi	r24, 0x04	; 4
 48c:	92 40       	sbci	r25, 0x02	; 2
 48e:	20 f4       	brcc	.+8      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
    {
        //lcd_putc('*');
        btn_pressed_next = 10;
 490:	8a e0       	ldi	r24, 0x0A	; 10
 492:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <btn_pressed_next.2129>
 496:	30 c0       	rjmp	.+96     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
                
    }
    else if (ADC_value > 533 && ADC_value < 543)
 498:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 49c:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 4a0:	86 31       	cpi	r24, 0x16	; 22
 4a2:	92 40       	sbci	r25, 0x02	; 2
 4a4:	58 f0       	brcs	.+22     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4a6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 4aa:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 4ae:	8f 31       	cpi	r24, 0x1F	; 31
 4b0:	92 40       	sbci	r25, 0x02	; 2
 4b2:	20 f4       	brcc	.+8      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
    {
        //lcd_putc('0');
        btn_pressed = 11;
 4b4:	8b e0       	ldi	r24, 0x0B	; 11
 4b6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <btn_pressed.2128>
 4ba:	4a c0       	rjmp	.+148    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
    }
    else if (ADC_value > 557 && ADC_value < 567)
 4bc:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 4c0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 4c4:	8e 32       	cpi	r24, 0x2E	; 46
 4c6:	92 40       	sbci	r25, 0x02	; 2
 4c8:	58 f0       	brcs	.+22     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4ca:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 4ce:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 4d2:	87 33       	cpi	r24, 0x37	; 55
 4d4:	92 40       	sbci	r25, 0x02	; 2
 4d6:	20 f4       	brcc	.+8      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
    {
        //lcd_putc('#');
        btn_pressed_next = 12;
 4d8:	8c e0       	ldi	r24, 0x0C	; 12
 4da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <btn_pressed_next.2129>
 4de:	0c c0       	rjmp	.+24     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
    }
    else if (ADC_value > 1017)
 4e0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ADC_value>
 4e4:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_value+0x1>
 4e8:	8a 3f       	cpi	r24, 0xFA	; 250
 4ea:	93 40       	sbci	r25, 0x03	; 3
 4ec:	28 f0       	brcs	.+10     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
    {
        freq_control++;
 4ee:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <freq_control.2126>
 4f2:	8f 5f       	subi	r24, 0xFF	; 255
 4f4:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <freq_control.2126>
    }
    
    //Sine function
    if (btn_pressed == 1)
 4f8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <btn_pressed.2128>
 4fc:	81 30       	cpi	r24, 0x01	; 1
 4fe:	79 f4       	brne	.+30     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
    {
        value = sine_wave[lookup_number];
 500:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <lookup_number.2123>
 504:	e9 2f       	mov	r30, r25
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	e9 58       	subi	r30, 0x89	; 137
 50a:	fe 4f       	sbci	r31, 0xFE	; 254
 50c:	20 81       	ld	r18, Z
 50e:	20 93 7f 02 	sts	0x027F, r18	; 0x80027f <value.2122>
        lookup_number += freq;
 512:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <freq.2124>
 516:	92 0f       	add	r25, r18
 518:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <lookup_number.2123>
 51c:	3f c0       	rjmp	.+126    	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
    }
    
    //Square function
    if (btn_pressed == 2)
 51e:	82 30       	cpi	r24, 0x02	; 2
 520:	b9 f4       	brne	.+46     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
    {
        if (number_of_overflows < 128)
 522:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <number_of_overflows.2121>
 526:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <number_of_overflows.2121+0x1>
 52a:	20 38       	cpi	r18, 0x80	; 128
 52c:	31 05       	cpc	r19, r1
 52e:	24 f4       	brge	.+8      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
        {
            value = 0b11111111;
 530:	9f ef       	ldi	r25, 0xFF	; 255
 532:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <value.2122>
 536:	41 c0       	rjmp	.+130    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
        }
        else if (number_of_overflows < 256)
 538:	2f 3f       	cpi	r18, 0xFF	; 255
 53a:	31 05       	cpc	r19, r1
 53c:	09 f0       	breq	.+2      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 53e:	1c f4       	brge	.+6      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
        {
            value = 0;
 540:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <value.2122>
 544:	3a c0       	rjmp	.+116    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
        }
        else
        {
            number_of_overflows = 0;
 546:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <number_of_overflows.2121+0x1>
 54a:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <number_of_overflows.2121>
 54e:	35 c0       	rjmp	.+106    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
        }
    }
    
    //Triangle function
    if (btn_pressed == 3)
 550:	83 30       	cpi	r24, 0x03	; 3
 552:	21 f5       	brne	.+72     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
    {
        
        if (number_of_overflows < 256 && value >= 0)
 554:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <number_of_overflows.2121>
 558:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <number_of_overflows.2121+0x1>
 55c:	2f 3f       	cpi	r18, 0xFF	; 255
 55e:	31 05       	cpc	r19, r1
 560:	09 f0       	breq	.+2      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 562:	44 f4       	brge	.+16     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
        {        
            value += freq;
 564:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <value.2122>
 568:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <freq.2124>
 56c:	92 0f       	add	r25, r18
 56e:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <value.2122>
 572:	a5 c0       	rjmp	.+330    	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
        } 
        else if (number_of_overflows < 511 && value > 0)
 574:	2f 3f       	cpi	r18, 0xFF	; 255
 576:	31 40       	sbci	r19, 0x01	; 1
 578:	54 f4       	brge	.+20     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 57a:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <value.2122>
 57e:	99 23       	and	r25, r25
 580:	31 f0       	breq	.+12     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
        {
            value -= freq;
 582:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <freq.2124>
 586:	92 1b       	sub	r25, r18
 588:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <value.2122>
 58c:	98 c0       	rjmp	.+304    	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
        }
        else 
        {
            number_of_overflows = 0;
 58e:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <number_of_overflows.2121+0x1>
 592:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <number_of_overflows.2121>
            value = 0;
 596:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <value.2122>
 59a:	91 c0       	rjmp	.+290    	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
        }
    }
      
    //Ramp function    
    if (btn_pressed == 4)
 59c:	84 30       	cpi	r24, 0x04	; 4
 59e:	69 f4       	brne	.+26     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
    {
        value += freq;
 5a0:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <value.2122>
 5a4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <freq.2124>
 5a8:	92 0f       	add	r25, r18
 5aa:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <value.2122>
    }
    
    //*
    if (btn_pressed_next == 10)
 5ae:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <btn_pressed_next.2129>
 5b2:	9a 30       	cpi	r25, 0x0A	; 10
 5b4:	09 f0       	breq	.+2      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 5b6:	48 c0       	rjmp	.+144    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 5b8:	87 c0       	rjmp	.+270    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
 5ba:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <btn_pressed_next.2129>
 5be:	9a 30       	cpi	r25, 0x0A	; 10
 5c0:	69 f4       	brne	.+26     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
    {
        btn_pressed_next = btn_pressed;
 5c2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <btn_pressed_next.2129>
        if (freq_next == freq && freq > 1)
 5c6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 5ca:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <freq.2124>
 5ce:	92 13       	cpse	r25, r18
 5d0:	05 c0       	rjmp	.+10     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5d2:	92 30       	cpi	r25, 0x02	; 2
 5d4:	18 f0       	brcs	.+6      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
        {
            freq_next = freq - 1;
 5d6:	91 50       	subi	r25, 0x01	; 1
 5d8:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
        }
    }
    
    // 0 pressed
    if (btn_pressed == 11)
 5dc:	8b 30       	cpi	r24, 0x0B	; 11
 5de:	a1 f5       	brne	.+104    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
    {  
        lcd_gotoxy(0, 0);
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
        lcd_puts(" Choose signal: ");
 5e8:	83 e6       	ldi	r24, 0x63	; 99
 5ea:	91 e0       	ldi	r25, 0x01	; 1
 5ec:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        lcd_gotoxy(0, 1);
 5f0:	61 e0       	ldi	r22, 0x01	; 1
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
        lcd_puts(" 1");
 5f8:	84 e7       	ldi	r24, 0x74	; 116
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        lcd_putc(0);
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_puts("  2");
 606:	85 e3       	ldi	r24, 0x35	; 53
 608:	91 e0       	ldi	r25, 0x01	; 1
 60a:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        lcd_putc(1);
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_puts("  3");
 614:	89 e3       	ldi	r24, 0x39	; 57
 616:	91 e0       	ldi	r25, 0x01	; 1
 618:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        lcd_putc(2);
 61c:	82 e0       	ldi	r24, 0x02	; 2
 61e:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_puts("  4");
 622:	8d e3       	ldi	r24, 0x3D	; 61
 624:	91 e0       	ldi	r25, 0x01	; 1
 626:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        lcd_putc(3);
 62a:	83 e0       	ldi	r24, 0x03	; 3
 62c:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_putc(' ');
 630:	80 e2       	ldi	r24, 0x20	; 32
 632:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        
        value = 0;
 636:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <value.2122>
        control = 0;
 63a:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <control.2127>
        freq_next = 1;
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        freq = 1;
 644:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <freq.2124>
    } 
    
    //#
    if (btn_pressed_next == 12)
 648:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <btn_pressed_next.2129>
 64c:	8c 30       	cpi	r24, 0x0C	; 12
 64e:	69 f4       	brne	.+26     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
    {
        btn_pressed_next = btn_pressed;
 650:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <btn_pressed.2128>
 654:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <btn_pressed_next.2129>
        if (freq_next == freq)
 658:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 65c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <freq.2124>
 660:	89 13       	cpse	r24, r25
 662:	03 c0       	rjmp	.+6      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
        {
            freq_next = freq + 1;
 664:	8f 5f       	subi	r24, 0xFF	; 255
 666:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        }                  
    }
     
    if (freq_control >= 100)
 66a:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <freq_control.2126>
 66e:	84 36       	cpi	r24, 0x64	; 100
 670:	30 f0       	brcs	.+12     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
    {
        freq = freq_next;
 672:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 676:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <freq.2124>
        freq_control = 0;
 67a:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <freq_control.2126>
    }
     
    if (uart_counter == 10)
 67e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <__data_end>
 682:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <__data_end+0x1>
 686:	0a 97       	sbiw	r24, 0x0a	; 10
 688:	21 f4       	brne	.+8      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
        //itoa(btn_pressed, lcd_string, 10);    // Convert to string
        //uart_putc('a');
        //uart_puts(lcd_string);
        //uart_puts("\r\n");
        
        uart_counter = 0;
 68a:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <__data_end+0x1>
 68e:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <__data_end>
    }
    uart_counter++; 
 692:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <__data_end>
 696:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <__data_end+0x1>
 69a:	01 96       	adiw	r24, 0x01	; 1
 69c:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <__data_end+0x1>
 6a0:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <__data_end>
         
    number_of_overflows += freq;   
 6a4:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <freq.2124>
 6a8:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <number_of_overflows.2121>
 6ac:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <number_of_overflows.2121+0x1>
 6b0:	82 0f       	add	r24, r18
 6b2:	91 1d       	adc	r25, r1
 6b4:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <number_of_overflows.2121+0x1>
 6b8:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <number_of_overflows.2121>
    
    
    
    
    
}
 6bc:	0f c0       	rjmp	.+30     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
    {
        value += freq;
    }
    
    //*
    if (btn_pressed_next == 10)
 6be:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <btn_pressed_next.2129>
 6c2:	9a 30       	cpi	r25, 0x0A	; 10
 6c4:	09 f6       	brne	.-126    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 6c6:	7d cf       	rjmp	.-262    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
    {
        btn_pressed_next = btn_pressed;
 6c8:	94 e0       	ldi	r25, 0x04	; 4
 6ca:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <btn_pressed_next.2129>
        if (freq_next == freq && freq > 1)
 6ce:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 6d2:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <freq.2124>
 6d6:	92 13       	cpse	r25, r18
 6d8:	b7 cf       	rjmp	.-146    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 6da:	7b cf       	rjmp	.-266    	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
    
    
    
    
    
}
 6dc:	ff 91       	pop	r31
 6de:	ef 91       	pop	r30
 6e0:	bf 91       	pop	r27
 6e2:	af 91       	pop	r26
 6e4:	9f 91       	pop	r25
 6e6:	8f 91       	pop	r24
 6e8:	7f 91       	pop	r23
 6ea:	6f 91       	pop	r22
 6ec:	5f 91       	pop	r21
 6ee:	4f 91       	pop	r20
 6f0:	3f 91       	pop	r19
 6f2:	2f 91       	pop	r18
 6f4:	0f 90       	pop	r0
 6f6:	0f be       	out	0x3f, r0	; 63
 6f8:	0f 90       	pop	r0
 6fa:	1f 90       	pop	r1
 6fc:	18 95       	reti

000006fe <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 6fe:	1f 92       	push	r1
 700:	0f 92       	push	r0
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	0f 92       	push	r0
 706:	11 24       	eor	r1, r1
 708:	2f 93       	push	r18
 70a:	8f 93       	push	r24
 70c:	9f 93       	push	r25
 70e:	ef 93       	push	r30
 710:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 712:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    data = UART0_DATA;
 716:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 71a:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 71c:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <UART_RxHead>
 720:	ef 5f       	subi	r30, 0xFF	; 255
 722:	ef 73       	andi	r30, 0x3F	; 63

    if (tmphead == UART_RxTail)
 724:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <UART_RxTail>
 728:	e9 17       	cp	r30, r25
 72a:	39 f0       	breq	.+14     	; 0x73a <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 72c:	e0 93 82 02 	sts	0x0282, r30	; 0x800282 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	eb 57       	subi	r30, 0x7B	; 123
 734:	fd 4f       	sbci	r31, 0xFD	; 253
 736:	20 83       	st	Z, r18
 738:	01 c0       	rjmp	.+2      	; 0x73c <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 73a:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 73c:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <UART_LastRxError>
 740:	89 2b       	or	r24, r25
 742:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <UART_LastRxError>
}
 746:	ff 91       	pop	r31
 748:	ef 91       	pop	r30
 74a:	9f 91       	pop	r25
 74c:	8f 91       	pop	r24
 74e:	2f 91       	pop	r18
 750:	0f 90       	pop	r0
 752:	0f be       	out	0x3f, r0	; 63
 754:	0f 90       	pop	r0
 756:	1f 90       	pop	r1
 758:	18 95       	reti

0000075a <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 75a:	1f 92       	push	r1
 75c:	0f 92       	push	r0
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	0f 92       	push	r0
 762:	11 24       	eor	r1, r1
 764:	8f 93       	push	r24
 766:	9f 93       	push	r25
 768:	ef 93       	push	r30
 76a:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 76c:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <UART_TxHead>
 770:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <UART_TxTail>
 774:	98 17       	cp	r25, r24
 776:	69 f0       	breq	.+26     	; 0x792 <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 778:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <UART_TxTail>
 77c:	ef 5f       	subi	r30, 0xFF	; 255
 77e:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
 780:	e0 93 83 02 	sts	0x0283, r30	; 0x800283 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	eb 53       	subi	r30, 0x3B	; 59
 788:	fd 4f       	sbci	r31, 0xFD	; 253
 78a:	80 81       	ld	r24, Z
 78c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 790:	05 c0       	rjmp	.+10     	; 0x79c <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 792:	e1 ec       	ldi	r30, 0xC1	; 193
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	80 81       	ld	r24, Z
 798:	8f 7d       	andi	r24, 0xDF	; 223
 79a:	80 83       	st	Z, r24
    }
}
 79c:	ff 91       	pop	r31
 79e:	ef 91       	pop	r30
 7a0:	9f 91       	pop	r25
 7a2:	8f 91       	pop	r24
 7a4:	0f 90       	pop	r0
 7a6:	0f be       	out	0x3f, r0	; 63
 7a8:	0f 90       	pop	r0
 7aa:	1f 90       	pop	r1
 7ac:	18 95       	reti

000007ae <uart_init>:
 * Input:    baudrate using macro UART_BAUD_SELECT()
 * Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 7ae:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <UART_TxHead>
    UART_TxTail = 0;
 7b2:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <UART_TxTail>
    UART_RxHead = 0;
 7b6:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <UART_RxHead>
    UART_RxTail = 0;
 7ba:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <UART_RxTail>
    #  endif
    # endif
    #endif /* ifdef UART_TEST */

    /* Set baud rate */
    if (baudrate & 0x8000)
 7be:	99 23       	and	r25, r25
 7c0:	1c f4       	brge	.+6      	; 0x7c8 <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1 << UART0_BIT_U2X); // Enable 2x speed
 7c2:	22 e0       	ldi	r18, 0x02	; 2
 7c4:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
        #endif
    }
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char) ((baudrate >> 8) & 0x80);
 7c8:	90 78       	andi	r25, 0x80	; 128
 7ca:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    #endif
    UART0_UBRRL = (unsigned char) (baudrate & 0x00FF);
 7ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE) | (1 << UART0_BIT_RXEN) | (1 << UART0_BIT_TXEN);
 7d2:	88 e9       	ldi	r24, 0x98	; 152
 7d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    # ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1 << UART0_BIT_URSEL) | (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
    # else
    UART0_CONTROLC = (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
 7d8:	86 e0       	ldi	r24, 0x06	; 6
 7da:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 7de:	08 95       	ret

000007e0 <_exit>:
 7e0:	f8 94       	cli

000007e2 <__stop_program>:
 7e2:	ff cf       	rjmp	.-2      	; 0x7e2 <__stop_program>
