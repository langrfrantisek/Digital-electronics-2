
DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800100  000006da  0000076e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  00800224  00800224  00000892  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000892  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001866  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b63  00000000  00000000  000022c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c8f  00000000  00000000  00002e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000360  00000000  00000000  00003ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000697  00000000  00000000  00003e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c6e  00000000  00000000  000044ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005119  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_18>
  4c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 be 01 	jmp	0x37c	; 0x37c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 3a       	cpi	r26, 0xAD	; 173
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 02 01 	call	0x204	; 0x204 <main>
  9e:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  be:	29 9a       	sbi	0x05, 1	; 5
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <toggle_e+0x4>
  c6:	00 00       	nop
  c8:	29 98       	cbi	0x05, 1	; 5
  ca:	08 95       	ret

000000cc <lcd_write>:
  cc:	cf 93       	push	r28
  ce:	c8 2f       	mov	r28, r24
  d0:	66 23       	and	r22, r22
  d2:	11 f0       	breq	.+4      	; 0xd8 <lcd_write+0xc>
  d4:	28 9a       	sbi	0x05, 0	; 5
  d6:	01 c0       	rjmp	.+2      	; 0xda <lcd_write+0xe>
  d8:	28 98       	cbi	0x05, 0	; 5
  da:	3c 9a       	sbi	0x07, 4	; 7
  dc:	39 9a       	sbi	0x07, 1	; 7
  de:	3a 9a       	sbi	0x07, 2	; 7
  e0:	3b 9a       	sbi	0x07, 3	; 7
  e2:	43 98       	cbi	0x08, 3	; 8
  e4:	42 98       	cbi	0x08, 2	; 8
  e6:	41 98       	cbi	0x08, 1	; 8
  e8:	44 98       	cbi	0x08, 4	; 8
  ea:	cc 23       	and	r28, r28
  ec:	0c f4       	brge	.+2      	; 0xf0 <lcd_write+0x24>
  ee:	43 9a       	sbi	0x08, 3	; 8
  f0:	c6 fd       	sbrc	r28, 6
  f2:	42 9a       	sbi	0x08, 2	; 8
  f4:	c5 fd       	sbrc	r28, 5
  f6:	41 9a       	sbi	0x08, 1	; 8
  f8:	c4 fd       	sbrc	r28, 4
  fa:	44 9a       	sbi	0x08, 4	; 8
  fc:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 100:	43 98       	cbi	0x08, 3	; 8
 102:	42 98       	cbi	0x08, 2	; 8
 104:	41 98       	cbi	0x08, 1	; 8
 106:	44 98       	cbi	0x08, 4	; 8
 108:	c3 fd       	sbrc	r28, 3
 10a:	43 9a       	sbi	0x08, 3	; 8
 10c:	c2 fd       	sbrc	r28, 2
 10e:	42 9a       	sbi	0x08, 2	; 8
 110:	c1 fd       	sbrc	r28, 1
 112:	41 9a       	sbi	0x08, 1	; 8
 114:	c0 fd       	sbrc	r28, 0
 116:	44 9a       	sbi	0x08, 4	; 8
 118:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 11c:	44 9a       	sbi	0x08, 4	; 8
 11e:	41 9a       	sbi	0x08, 1	; 8
 120:	42 9a       	sbi	0x08, 2	; 8
 122:	43 9a       	sbi	0x08, 3	; 8
 124:	87 eb       	ldi	r24, 0xB7	; 183
 126:	9b e0       	ldi	r25, 0x0B	; 11
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_write+0x5c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_write+0x62>
 12e:	00 00       	nop
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <lcd_command>:
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 13a:	08 95       	ret

0000013c <lcd_gotoxy>:
 13c:	61 11       	cpse	r22, r1
 13e:	04 c0       	rjmp	.+8      	; 0x148 <lcd_gotoxy+0xc>
 140:	80 58       	subi	r24, 0x80	; 128
 142:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 146:	08 95       	ret
 148:	80 54       	subi	r24, 0x40	; 64
 14a:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 14e:	08 95       	ret

00000150 <lcd_clrscr>:
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 156:	08 95       	ret

00000158 <lcd_putc>:
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 15e:	08 95       	ret

00000160 <lcd_puts>:
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	ec 01       	movw	r28, r24
 166:	21 96       	adiw	r28, 0x01	; 1
 168:	fc 01       	movw	r30, r24
 16a:	80 81       	ld	r24, Z
 16c:	88 23       	and	r24, r24
 16e:	29 f0       	breq	.+10     	; 0x17a <lcd_puts+0x1a>
 170:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_putc>
 174:	89 91       	ld	r24, Y+
 176:	81 11       	cpse	r24, r1
 178:	fb cf       	rjmp	.-10     	; 0x170 <lcd_puts+0x10>
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 180:	cf 93       	push	r28
 182:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 184:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 186:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 188:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 18a:	3c 9a       	sbi	0x07, 4	; 7
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 18c:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 18e:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 190:	3b 9a       	sbi	0x07, 3	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	99 ef       	ldi	r25, 0xF9	; 249
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_init+0x16>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcd_init+0x1c>
 19c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 19e:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 1a0:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_toggle();
 1a2:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1a6:	8f e1       	ldi	r24, 0x1F	; 31
 1a8:	9e e4       	ldi	r25, 0x4E	; 78
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x2a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x30>
 1b0:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1b2:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x3a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x40>
 1c0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1c2:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_init+0x4a>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_init+0x50>
 1d0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1d2:	44 98       	cbi	0x08, 4	; 8
    lcd_e_toggle();
 1d4:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_init+0x5c>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <lcd_init+0x62>
 1e2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1e4:	88 e2       	ldi	r24, 0x28	; 40
 1e6:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1ea:	88 e0       	ldi	r24, 0x08	; 8
 1ec:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1f0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1f4:	86 e0       	ldi	r24, 0x06	; 6
 1f6:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1fa:	8c 2f       	mov	r24, r28
 1fc:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
}/* lcd_init */
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <main>:
};

int main(void)
{
    //Configure outputs for 8-bit R-2R DAC
    GPIO_config_output(&DDRB, pin0);
 204:	62 e0       	ldi	r22, 0x02	; 2
 206:	84 e2       	ldi	r24, 0x24	; 36
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, pin1);
 20e:	63 e0       	ldi	r22, 0x03	; 3
 210:	84 e2       	ldi	r24, 0x24	; 36
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin2);
 218:	62 e0       	ldi	r22, 0x02	; 2
 21a:	8a e2       	ldi	r24, 0x2A	; 42
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin3);
 222:	63 e0       	ldi	r22, 0x03	; 3
 224:	8a e2       	ldi	r24, 0x2A	; 42
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin4);
 22c:	64 e0       	ldi	r22, 0x04	; 4
 22e:	8a e2       	ldi	r24, 0x2A	; 42
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin5);
 236:	65 e0       	ldi	r22, 0x05	; 5
 238:	8a e2       	ldi	r24, 0x2A	; 42
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin6);
 240:	66 e0       	ldi	r22, 0x06	; 6
 242:	8a e2       	ldi	r24, 0x2A	; 42
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin7);
 24a:	67 e0       	ldi	r22, 0x07	; 7
 24c:	8a e2       	ldi	r24, 0x2A	; 42
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 254:	8c e0       	ldi	r24, 0x0C	; 12
 256:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_init>
    lcd_gotoxy(1, 0); 
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_gotoxy>
    lcd_puts("val:");
 262:	8b e0       	ldi	r24, 0x0B	; 11
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_puts>
    
    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
    ADMUX |= (1 << REFS0);
 26a:	ec e7       	ldi	r30, 0x7C	; 124
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	80 64       	ori	r24, 0x40	; 64
 272:	80 83       	st	Z, r24
    ADMUX &= ~(1 << REFS1);
 274:	80 81       	ld	r24, Z
 276:	8f 77       	andi	r24, 0x7F	; 127
 278:	80 83       	st	Z, r24
    
    // Set input channel to ADC0
    ADMUX &= ~(1 << MUX3);
 27a:	80 81       	ld	r24, Z
 27c:	87 7f       	andi	r24, 0xF7	; 247
 27e:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX2);
 280:	80 81       	ld	r24, Z
 282:	8b 7f       	andi	r24, 0xFB	; 251
 284:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX1);
 286:	80 81       	ld	r24, Z
 288:	8d 7f       	andi	r24, 0xFD	; 253
 28a:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX0);
 28c:	80 81       	ld	r24, Z
 28e:	8e 7f       	andi	r24, 0xFE	; 254
 290:	80 83       	st	Z, r24
    
    // Enable ADC module
    ADCSRA |= (1 << ADEN);
 292:	ea e7       	ldi	r30, 0x7A	; 122
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	80 68       	ori	r24, 0x80	; 128
 29a:	80 83       	st	Z, r24
    
    // Enable conversion complete interrupt
    ADCSRA |= (1 << ADIE);
 29c:	80 81       	ld	r24, Z
 29e:	88 60       	ori	r24, 0x08	; 8
 2a0:	80 83       	st	Z, r24
    
    // Set clock prescaler to 128
    ADCSRA |= (1 << ADPS2);
 2a2:	80 81       	ld	r24, Z
 2a4:	84 60       	ori	r24, 0x04	; 4
 2a6:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS1);
 2a8:	80 81       	ld	r24, Z
 2aa:	82 60       	ori	r24, 0x02	; 2
 2ac:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS0);
 2ae:	80 81       	ld	r24, Z
 2b0:	81 60       	ori	r24, 0x01	; 1
 2b2:	80 83       	st	Z, r24
    
    
    
    /* Configuration of 8-bit Timer/Counter0 */
    TIM0_overflow_16us();
 2b4:	85 b5       	in	r24, 0x25	; 37
 2b6:	89 7f       	andi	r24, 0xF9	; 249
 2b8:	85 bd       	out	0x25, r24	; 37
 2ba:	85 b5       	in	r24, 0x25	; 37
 2bc:	81 60       	ori	r24, 0x01	; 1
 2be:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 2c0:	ee e6       	ldi	r30, 0x6E	; 110
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	81 60       	ori	r24, 0x01	; 1
 2c8:	80 83       	st	Z, r24
    
    /* Configuration of 8-bit Timer/Counter1 */
    TIM1_overflow_262ms();
 2ca:	e1 e8       	ldi	r30, 0x81	; 129
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	8b 7f       	andi	r24, 0xFB	; 251
 2d2:	80 83       	st	Z, r24
 2d4:	80 81       	ld	r24, Z
 2d6:	83 60       	ori	r24, 0x03	; 3
 2d8:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 2da:	ef e6       	ldi	r30, 0x6F	; 111
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	81 60       	ori	r24, 0x01	; 1
 2e2:	80 83       	st	Z, r24
    
    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 2e4:	87 e6       	ldi	r24, 0x67	; 103
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <uart_init>
    
    // Enables interrupts by setting the global interrupt mask
    sei();
 2ec:	78 94       	sei
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <main+0xea>

000002f0 <__vector_16>:
    return 0;
}

/* Interrupt service routine ----------------------------------------*/
ISR(TIMER0_OVF_vect)
{    
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	8f 93       	push	r24
 2fc:	9f 93       	push	r25
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31
	static int16_t number_of_overflows = 0;
    static uint8_t value = 0;
    static uint8_t lookup_number = 0;
    
    //Writing values to pins, where is the R-2R connected
    PORTD = value & 0b11111100;
 302:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <value.1989>
 306:	8c 7f       	andi	r24, 0xFC	; 252
 308:	8b b9       	out	0x0b, r24	; 11
    PORTB = (value & 0b00000011) << 2;
 30a:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <value.1989>
 30e:	83 70       	andi	r24, 0x03	; 3
 310:	88 0f       	add	r24, r24
 312:	88 0f       	add	r24, r24
 314:	85 b9       	out	0x05, r24	; 5
     
    
    //sine
    value = sine_wave[lookup_number];
 316:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <lookup_number.1990>
 31a:	e8 2f       	mov	r30, r24
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	ec 5d       	subi	r30, 0xDC	; 220
 320:	fe 4f       	sbci	r31, 0xFE	; 254
 322:	90 81       	ld	r25, Z
 324:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <value.1989>
    lookup_number++;
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lookup_number.1990>
    else
    {
        number_of_overflows = 0;
    }*/
       
    number_of_overflows++;
 32e:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
 332:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__data_end+0x1>
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <__data_end+0x1>
 33c:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <__data_end>
        
        /*uart_puts(value_string);
        uart_puts("\r\n");*/
   
    }  
}
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	0f 90       	pop	r0
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	0f 90       	pop	r0
 34e:	1f 90       	pop	r1
 350:	18 95       	reti

00000352 <__vector_13>:
/* -------------------------------------------------------------------*/
ISR(TIMER1_OVF_vect)
{
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	8f 93       	push	r24
 35e:	ef 93       	push	r30
 360:	ff 93       	push	r31
    // Start ADC conversion
    ADCSRA |= (1 << ADSC);
 362:	ea e7       	ldi	r30, 0x7A	; 122
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	80 64       	ori	r24, 0x40	; 64
 36a:	80 83       	st	Z, r24
}
 36c:	ff 91       	pop	r31
 36e:	ef 91       	pop	r30
 370:	8f 91       	pop	r24
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <__vector_21>:
/**
 * ISR starts when ADC completes the conversion. Display value on LCD
 * and send it to UART.
 */
ISR(ADC_vect)
{
 37c:	1f 92       	push	r1
 37e:	0f 92       	push	r0
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	0f 92       	push	r0
 384:	11 24       	eor	r1, r1
 386:	0f 93       	push	r16
 388:	1f 93       	push	r17
 38a:	2f 93       	push	r18
 38c:	3f 93       	push	r19
 38e:	4f 93       	push	r20
 390:	5f 93       	push	r21
 392:	6f 93       	push	r22
 394:	7f 93       	push	r23
 396:	8f 93       	push	r24
 398:	9f 93       	push	r25
 39a:	af 93       	push	r26
 39c:	bf 93       	push	r27
 39e:	ef 93       	push	r30
 3a0:	ff 93       	push	r31
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	2a 97       	sbiw	r28, 0x0a	; 10
 3ac:	de bf       	out	0x3e, r29	; 62
 3ae:	cd bf       	out	0x3d, r28	; 61
    uint16_t value = ADC;    // Copy ADC result to 16-bit variable
 3b0:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 3b4:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    char lcd_string[10] = "          ";
 3b8:	8a e0       	ldi	r24, 0x0A	; 10
 3ba:	e0 e0       	ldi	r30, 0x00	; 0
 3bc:	f1 e0       	ldi	r31, 0x01	; 1
 3be:	de 01       	movw	r26, r28
 3c0:	11 96       	adiw	r26, 0x01	; 1
 3c2:	01 90       	ld	r0, Z+
 3c4:	0d 92       	st	X+, r0
 3c6:	8a 95       	dec	r24
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <__vector_21+0x46>

    //Clear positions
    lcd_gotoxy(6, 0);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	86 e0       	ldi	r24, 0x06	; 6
 3ce:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_gotoxy>
    lcd_puts(lcd_string);
 3d2:	ce 01       	movw	r24, r28
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_puts>
    lcd_gotoxy(1, 1);
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_gotoxy>
    lcd_puts(lcd_string);
 3e2:	ce 01       	movw	r24, r28
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3ea:	4a e0       	ldi	r20, 0x0A	; 10
 3ec:	be 01       	movw	r22, r28
 3ee:	6f 5f       	subi	r22, 0xFF	; 255
 3f0:	7f 4f       	sbci	r23, 0xFF	; 255
 3f2:	c8 01       	movw	r24, r16
 3f4:	0e 94 36 03 	call	0x66c	; 0x66c <__itoa_ncheck>

    //Print ADC value on LED 
    itoa(value, lcd_string, 10);    // Convert to string
    lcd_gotoxy(6, 0);
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	86 e0       	ldi	r24, 0x06	; 6
 3fc:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_gotoxy>
    lcd_puts(lcd_string);
 400:	ce 01       	movw	r24, r28
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_puts>

    //send data through UART
    uart_puts("ADC value: ");
 408:	80 e1       	ldi	r24, 0x10	; 16
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	0e 94 27 03 	call	0x64e	; 0x64e <uart_puts>
    uart_puts(lcd_string);
 410:	ce 01       	movw	r24, r28
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	0e 94 27 03 	call	0x64e	; 0x64e <uart_puts>
    uart_puts("\r\n");
 418:	8c e1       	ldi	r24, 0x1C	; 28
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	0e 94 27 03 	call	0x64e	; 0x64e <uart_puts>
    
    //Print key
    lcd_gotoxy(1, 1);
 420:	61 e0       	ldi	r22, 0x01	; 1
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_gotoxy>
    if (value > 1017)
 428:	0a 3f       	cpi	r16, 0xFA	; 250
 42a:	83 e0       	ldi	r24, 0x03	; 3
 42c:	18 07       	cpc	r17, r24
 42e:	28 f0       	brcs	.+10     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
    {
        lcd_puts("None");
 430:	8f e1       	ldi	r24, 0x1F	; 31
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_puts>
 438:	69 c0       	rjmp	.+210    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
    }
    else if (value < 5)
 43a:	05 30       	cpi	r16, 0x05	; 5
 43c:	11 05       	cpc	r17, r1
 43e:	20 f4       	brcc	.+8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
    {
        lcd_putc('1');
 440:	81 e3       	ldi	r24, 0x31	; 49
 442:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_putc>
 446:	62 c0       	rjmp	.+196    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
    }
    else if (value > 97 && value < 107)
 448:	c8 01       	movw	r24, r16
 44a:	82 56       	subi	r24, 0x62	; 98
 44c:	91 09       	sbc	r25, r1
 44e:	09 97       	sbiw	r24, 0x09	; 9
 450:	20 f4       	brcc	.+8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
    {
        lcd_putc('2');
 452:	82 e3       	ldi	r24, 0x32	; 50
 454:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_putc>
 458:	59 c0       	rjmp	.+178    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
    }
    else if (value > 180 && value < 190)
 45a:	c8 01       	movw	r24, r16
 45c:	85 5b       	subi	r24, 0xB5	; 181
 45e:	91 09       	sbc	r25, r1
 460:	09 97       	sbiw	r24, 0x09	; 9
 462:	20 f4       	brcc	.+8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
    {
        lcd_putc('3');
 464:	83 e3       	ldi	r24, 0x33	; 51
 466:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_putc>
 46a:	50 c0       	rjmp	.+160    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
    }
    else if (value > 250 && value < 260)
 46c:	c8 01       	movw	r24, r16
 46e:	8b 5f       	subi	r24, 0xFB	; 251
 470:	91 09       	sbc	r25, r1
 472:	09 97       	sbiw	r24, 0x09	; 9
 474:	20 f4       	brcc	.+8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
    {
        lcd_putc('4');
 476:	84 e3       	ldi	r24, 0x34	; 52
 478:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_putc>
 47c:	47 c0       	rjmp	.+142    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
    }
    else if (value > 309 && value < 319)
 47e:	c8 01       	movw	r24, r16
 480:	86 53       	subi	r24, 0x36	; 54
 482:	91 40       	sbci	r25, 0x01	; 1
 484:	09 97       	sbiw	r24, 0x09	; 9
 486:	20 f4       	brcc	.+8      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
    {
        lcd_putc('5');
 488:	85 e3       	ldi	r24, 0x35	; 53
 48a:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_putc>
 48e:	3e c0       	rjmp	.+124    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
    }
    else if (value > 360 && value < 370)
 490:	c8 01       	movw	r24, r16
 492:	89 56       	subi	r24, 0x69	; 105
 494:	91 40       	sbci	r25, 0x01	; 1
 496:	09 97       	sbiw	r24, 0x09	; 9
 498:	20 f4       	brcc	.+8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
    {
        lcd_putc('6');
 49a:	86 e3       	ldi	r24, 0x36	; 54
 49c:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_putc>
 4a0:	35 c0       	rjmp	.+106    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
    }
    else if (value > 404 && value < 414)
 4a2:	c8 01       	movw	r24, r16
 4a4:	85 59       	subi	r24, 0x95	; 149
 4a6:	91 40       	sbci	r25, 0x01	; 1
 4a8:	09 97       	sbiw	r24, 0x09	; 9
 4aa:	20 f4       	brcc	.+8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
    {
        lcd_putc('7');
 4ac:	87 e3       	ldi	r24, 0x37	; 55
 4ae:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_putc>
 4b2:	2c c0       	rjmp	.+88     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
    }
    else if (value > 442 && value < 452)
 4b4:	c8 01       	movw	r24, r16
 4b6:	8b 5b       	subi	r24, 0xBB	; 187
 4b8:	91 40       	sbci	r25, 0x01	; 1
 4ba:	09 97       	sbiw	r24, 0x09	; 9
 4bc:	20 f4       	brcc	.+8      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
    {
        lcd_putc('8');
 4be:	88 e3       	ldi	r24, 0x38	; 56
 4c0:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_putc>
 4c4:	23 c0       	rjmp	.+70     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
    }
    else if (value > 476 && value < 486)
 4c6:	c8 01       	movw	r24, r16
 4c8:	8d 5d       	subi	r24, 0xDD	; 221
 4ca:	91 40       	sbci	r25, 0x01	; 1
 4cc:	09 97       	sbiw	r24, 0x09	; 9
 4ce:	20 f4       	brcc	.+8      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
    {
        lcd_putc('9');
 4d0:	89 e3       	ldi	r24, 0x39	; 57
 4d2:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_putc>
 4d6:	1a c0       	rjmp	.+52     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
    }
    else if (value > 506 && value < 516)
 4d8:	c8 01       	movw	r24, r16
 4da:	8b 5f       	subi	r24, 0xFB	; 251
 4dc:	91 40       	sbci	r25, 0x01	; 1
 4de:	09 97       	sbiw	r24, 0x09	; 9
 4e0:	20 f4       	brcc	.+8      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
    {
        lcd_putc('*');
 4e2:	8a e2       	ldi	r24, 0x2A	; 42
 4e4:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_putc>
 4e8:	11 c0       	rjmp	.+34     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
    }
    else if (value > 533 && value < 543)
 4ea:	c8 01       	movw	r24, r16
 4ec:	86 51       	subi	r24, 0x16	; 22
 4ee:	92 40       	sbci	r25, 0x02	; 2
 4f0:	09 97       	sbiw	r24, 0x09	; 9
 4f2:	20 f4       	brcc	.+8      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
    {
        lcd_putc('0');
 4f4:	80 e3       	ldi	r24, 0x30	; 48
 4f6:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_putc>
 4fa:	08 c0       	rjmp	.+16     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
    }
    else if (value > 557 && value < 567)
 4fc:	0e 52       	subi	r16, 0x2E	; 46
 4fe:	12 40       	sbci	r17, 0x02	; 2
 500:	09 30       	cpi	r16, 0x09	; 9
 502:	11 05       	cpc	r17, r1
 504:	18 f4       	brcc	.+6      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
    {
        lcd_putc('#');
 506:	83 e2       	ldi	r24, 0x23	; 35
 508:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_putc>
    }
    
 50c:	2a 96       	adiw	r28, 0x0a	; 10
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	f8 94       	cli
 512:	de bf       	out	0x3e, r29	; 62
 514:	0f be       	out	0x3f, r0	; 63
 516:	cd bf       	out	0x3d, r28	; 61
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	ff 91       	pop	r31
 51e:	ef 91       	pop	r30
 520:	bf 91       	pop	r27
 522:	af 91       	pop	r26
 524:	9f 91       	pop	r25
 526:	8f 91       	pop	r24
 528:	7f 91       	pop	r23
 52a:	6f 91       	pop	r22
 52c:	5f 91       	pop	r21
 52e:	4f 91       	pop	r20
 530:	3f 91       	pop	r19
 532:	2f 91       	pop	r18
 534:	1f 91       	pop	r17
 536:	0f 91       	pop	r16
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <__vector_18>:
 542:	1f 92       	push	r1
 544:	0f 92       	push	r0
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	0f 92       	push	r0
 54a:	11 24       	eor	r1, r1
 54c:	2f 93       	push	r18
 54e:	8f 93       	push	r24
 550:	9f 93       	push	r25
 552:	ef 93       	push	r30
 554:	ff 93       	push	r31
 556:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 55a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 55e:	8c 71       	andi	r24, 0x1C	; 28
 560:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <UART_RxHead>
 564:	ef 5f       	subi	r30, 0xFF	; 255
 566:	ef 73       	andi	r30, 0x3F	; 63
 568:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <UART_RxTail>
 56c:	e9 17       	cp	r30, r25
 56e:	39 f0       	breq	.+14     	; 0x57e <__vector_18+0x3c>
 570:	e0 93 2a 02 	sts	0x022A, r30	; 0x80022a <UART_RxHead>
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	e3 5d       	subi	r30, 0xD3	; 211
 578:	fd 4f       	sbci	r31, 0xFD	; 253
 57a:	20 83       	st	Z, r18
 57c:	01 c0       	rjmp	.+2      	; 0x580 <__vector_18+0x3e>
 57e:	82 e0       	ldi	r24, 0x02	; 2
 580:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <UART_LastRxError>
 584:	89 2b       	or	r24, r25
 586:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <UART_LastRxError>
 58a:	ff 91       	pop	r31
 58c:	ef 91       	pop	r30
 58e:	9f 91       	pop	r25
 590:	8f 91       	pop	r24
 592:	2f 91       	pop	r18
 594:	0f 90       	pop	r0
 596:	0f be       	out	0x3f, r0	; 63
 598:	0f 90       	pop	r0
 59a:	1f 90       	pop	r1
 59c:	18 95       	reti

0000059e <__vector_19>:
 59e:	1f 92       	push	r1
 5a0:	0f 92       	push	r0
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	0f 92       	push	r0
 5a6:	11 24       	eor	r1, r1
 5a8:	8f 93       	push	r24
 5aa:	9f 93       	push	r25
 5ac:	ef 93       	push	r30
 5ae:	ff 93       	push	r31
 5b0:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <UART_TxHead>
 5b4:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <UART_TxTail>
 5b8:	98 17       	cp	r25, r24
 5ba:	69 f0       	breq	.+26     	; 0x5d6 <__vector_19+0x38>
 5bc:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <UART_TxTail>
 5c0:	ef 5f       	subi	r30, 0xFF	; 255
 5c2:	ef 73       	andi	r30, 0x3F	; 63
 5c4:	e0 93 2b 02 	sts	0x022B, r30	; 0x80022b <UART_TxTail>
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	e3 59       	subi	r30, 0x93	; 147
 5cc:	fd 4f       	sbci	r31, 0xFD	; 253
 5ce:	80 81       	ld	r24, Z
 5d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 5d4:	05 c0       	rjmp	.+10     	; 0x5e0 <__vector_19+0x42>
 5d6:	e1 ec       	ldi	r30, 0xC1	; 193
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	80 81       	ld	r24, Z
 5dc:	8f 7d       	andi	r24, 0xDF	; 223
 5de:	80 83       	st	Z, r24
 5e0:	ff 91       	pop	r31
 5e2:	ef 91       	pop	r30
 5e4:	9f 91       	pop	r25
 5e6:	8f 91       	pop	r24
 5e8:	0f 90       	pop	r0
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	0f 90       	pop	r0
 5ee:	1f 90       	pop	r1
 5f0:	18 95       	reti

000005f2 <uart_init>:
 5f2:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <UART_TxHead>
 5f6:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <UART_TxTail>
 5fa:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <UART_RxHead>
 5fe:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <UART_RxTail>
 602:	99 23       	and	r25, r25
 604:	1c f4       	brge	.+6      	; 0x60c <uart_init+0x1a>
 606:	22 e0       	ldi	r18, 0x02	; 2
 608:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 60c:	90 78       	andi	r25, 0x80	; 128
 60e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 612:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 616:	88 e9       	ldi	r24, 0x98	; 152
 618:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 61c:	86 e0       	ldi	r24, 0x06	; 6
 61e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 622:	08 95       	ret

00000624 <uart_putc>:
 624:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <UART_TxHead>
 628:	2f 5f       	subi	r18, 0xFF	; 255
 62a:	2f 73       	andi	r18, 0x3F	; 63
 62c:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <UART_TxTail>
 630:	29 17       	cp	r18, r25
 632:	e1 f3       	breq	.-8      	; 0x62c <uart_putc+0x8>
 634:	e2 2f       	mov	r30, r18
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	e3 59       	subi	r30, 0x93	; 147
 63a:	fd 4f       	sbci	r31, 0xFD	; 253
 63c:	80 83       	st	Z, r24
 63e:	20 93 2c 02 	sts	0x022C, r18	; 0x80022c <UART_TxHead>
 642:	e1 ec       	ldi	r30, 0xC1	; 193
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	80 62       	ori	r24, 0x20	; 32
 64a:	80 83       	st	Z, r24
 64c:	08 95       	ret

0000064e <uart_puts>:
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	ec 01       	movw	r28, r24
 654:	88 81       	ld	r24, Y
 656:	88 23       	and	r24, r24
 658:	31 f0       	breq	.+12     	; 0x666 <uart_puts+0x18>
 65a:	21 96       	adiw	r28, 0x01	; 1
 65c:	0e 94 12 03 	call	0x624	; 0x624 <uart_putc>
 660:	89 91       	ld	r24, Y+
 662:	81 11       	cpse	r24, r1
 664:	fb cf       	rjmp	.-10     	; 0x65c <uart_puts+0xe>
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	08 95       	ret

0000066c <__itoa_ncheck>:
 66c:	bb 27       	eor	r27, r27
 66e:	4a 30       	cpi	r20, 0x0A	; 10
 670:	31 f4       	brne	.+12     	; 0x67e <__itoa_ncheck+0x12>
 672:	99 23       	and	r25, r25
 674:	22 f4       	brpl	.+8      	; 0x67e <__itoa_ncheck+0x12>
 676:	bd e2       	ldi	r27, 0x2D	; 45
 678:	90 95       	com	r25
 67a:	81 95       	neg	r24
 67c:	9f 4f       	sbci	r25, 0xFF	; 255
 67e:	0c 94 42 03 	jmp	0x684	; 0x684 <__utoa_common>

00000682 <__utoa_ncheck>:
 682:	bb 27       	eor	r27, r27

00000684 <__utoa_common>:
 684:	fb 01       	movw	r30, r22
 686:	55 27       	eor	r21, r21
 688:	aa 27       	eor	r26, r26
 68a:	88 0f       	add	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	aa 1f       	adc	r26, r26
 690:	a4 17       	cp	r26, r20
 692:	10 f0       	brcs	.+4      	; 0x698 <__utoa_common+0x14>
 694:	a4 1b       	sub	r26, r20
 696:	83 95       	inc	r24
 698:	50 51       	subi	r21, 0x10	; 16
 69a:	b9 f7       	brne	.-18     	; 0x68a <__utoa_common+0x6>
 69c:	a0 5d       	subi	r26, 0xD0	; 208
 69e:	aa 33       	cpi	r26, 0x3A	; 58
 6a0:	08 f0       	brcs	.+2      	; 0x6a4 <__utoa_common+0x20>
 6a2:	a9 5d       	subi	r26, 0xD9	; 217
 6a4:	a1 93       	st	Z+, r26
 6a6:	00 97       	sbiw	r24, 0x00	; 0
 6a8:	79 f7       	brne	.-34     	; 0x688 <__utoa_common+0x4>
 6aa:	b1 11       	cpse	r27, r1
 6ac:	b1 93       	st	Z+, r27
 6ae:	11 92       	st	Z+, r1
 6b0:	cb 01       	movw	r24, r22
 6b2:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <strrev>

000006b6 <strrev>:
 6b6:	dc 01       	movw	r26, r24
 6b8:	fc 01       	movw	r30, r24
 6ba:	67 2f       	mov	r22, r23
 6bc:	71 91       	ld	r23, Z+
 6be:	77 23       	and	r23, r23
 6c0:	e1 f7       	brne	.-8      	; 0x6ba <strrev+0x4>
 6c2:	32 97       	sbiw	r30, 0x02	; 2
 6c4:	04 c0       	rjmp	.+8      	; 0x6ce <strrev+0x18>
 6c6:	7c 91       	ld	r23, X
 6c8:	6d 93       	st	X+, r22
 6ca:	70 83       	st	Z, r23
 6cc:	62 91       	ld	r22, -Z
 6ce:	ae 17       	cp	r26, r30
 6d0:	bf 07       	cpc	r27, r31
 6d2:	c8 f3       	brcs	.-14     	; 0x6c6 <strrev+0x10>
 6d4:	08 95       	ret

000006d6 <_exit>:
 6d6:	f8 94       	cli

000006d8 <__stop_program>:
 6d8:	ff cf       	rjmp	.-2      	; 0x6d8 <__stop_program>
