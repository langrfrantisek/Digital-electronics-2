
DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013e  00800100  00000536  000005ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000536  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008b  0080023e  0080023e  00000708  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000738  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000169b  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000acd  00000000  00000000  00001f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c0f  00000000  00000000  00002a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00003638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000629  00000000  00000000  00003900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000afc  00000000  00000000  00003f29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00004a25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 28 02 	jmp	0x450	; 0x450 <__vector_18>
  4c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 33       	cpi	r26, 0x3E	; 62
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ae e3       	ldi	r26, 0x3E	; 62
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 3c       	cpi	r26, 0xC9	; 201
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 06 01 	call	0x20c	; 0x20c <main>
  9e:	0c 94 99 02 	jmp	0x532	; 0x532 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
#include "gpio.h"

/* Function definitions ----------------------------------------------*/
void GPIO_config_output(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  be:	29 9a       	sbi	0x05, 1	; 5
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <toggle_e+0x4>
  c6:	00 00       	nop
  c8:	29 98       	cbi	0x05, 1	; 5
  ca:	08 95       	ret

000000cc <lcd_write>:
  cc:	cf 93       	push	r28
  ce:	c8 2f       	mov	r28, r24
  d0:	66 23       	and	r22, r22
  d2:	11 f0       	breq	.+4      	; 0xd8 <lcd_write+0xc>
  d4:	28 9a       	sbi	0x05, 0	; 5
  d6:	01 c0       	rjmp	.+2      	; 0xda <lcd_write+0xe>
  d8:	28 98       	cbi	0x05, 0	; 5
  da:	3c 9a       	sbi	0x07, 4	; 7
  dc:	39 9a       	sbi	0x07, 1	; 7
  de:	3a 9a       	sbi	0x07, 2	; 7
  e0:	3b 9a       	sbi	0x07, 3	; 7
  e2:	43 98       	cbi	0x08, 3	; 8
  e4:	42 98       	cbi	0x08, 2	; 8
  e6:	41 98       	cbi	0x08, 1	; 8
  e8:	44 98       	cbi	0x08, 4	; 8
  ea:	cc 23       	and	r28, r28
  ec:	0c f4       	brge	.+2      	; 0xf0 <lcd_write+0x24>
  ee:	43 9a       	sbi	0x08, 3	; 8
  f0:	c6 fd       	sbrc	r28, 6
  f2:	42 9a       	sbi	0x08, 2	; 8
  f4:	c5 fd       	sbrc	r28, 5
  f6:	41 9a       	sbi	0x08, 1	; 8
  f8:	c4 fd       	sbrc	r28, 4
  fa:	44 9a       	sbi	0x08, 4	; 8
  fc:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 100:	43 98       	cbi	0x08, 3	; 8
 102:	42 98       	cbi	0x08, 2	; 8
 104:	41 98       	cbi	0x08, 1	; 8
 106:	44 98       	cbi	0x08, 4	; 8
 108:	c3 fd       	sbrc	r28, 3
 10a:	43 9a       	sbi	0x08, 3	; 8
 10c:	c2 fd       	sbrc	r28, 2
 10e:	42 9a       	sbi	0x08, 2	; 8
 110:	c1 fd       	sbrc	r28, 1
 112:	41 9a       	sbi	0x08, 1	; 8
 114:	c0 fd       	sbrc	r28, 0
 116:	44 9a       	sbi	0x08, 4	; 8
 118:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 11c:	44 9a       	sbi	0x08, 4	; 8
 11e:	41 9a       	sbi	0x08, 1	; 8
 120:	42 9a       	sbi	0x08, 2	; 8
 122:	43 9a       	sbi	0x08, 3	; 8
 124:	87 eb       	ldi	r24, 0xB7	; 183
 126:	9b e0       	ldi	r25, 0x0B	; 11
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_write+0x5c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_write+0x62>
 12e:	00 00       	nop
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <lcd_command>:
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 13a:	08 95       	ret

0000013c <lcd_data>:
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 142:	08 95       	ret

00000144 <lcd_gotoxy>:
 144:	61 11       	cpse	r22, r1
 146:	04 c0       	rjmp	.+8      	; 0x150 <lcd_gotoxy+0xc>
 148:	80 58       	subi	r24, 0x80	; 128
 14a:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 14e:	08 95       	ret
 150:	80 54       	subi	r24, 0x40	; 64
 152:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 156:	08 95       	ret

00000158 <lcd_clrscr>:
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 15e:	08 95       	ret

00000160 <lcd_putc>:
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 166:	08 95       	ret

00000168 <lcd_puts>:
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ec 01       	movw	r28, r24
 16e:	21 96       	adiw	r28, 0x01	; 1
 170:	fc 01       	movw	r30, r24
 172:	80 81       	ld	r24, Z
 174:	88 23       	and	r24, r24
 176:	29 f0       	breq	.+10     	; 0x182 <lcd_puts+0x1a>
 178:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
 17c:	89 91       	ld	r24, Y+
 17e:	81 11       	cpse	r24, r1
 180:	fb cf       	rjmp	.-10     	; 0x178 <lcd_puts+0x10>
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 18c:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 18e:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 190:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 192:	3c 9a       	sbi	0x07, 4	; 7
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 194:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 196:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 198:	3b 9a       	sbi	0x07, 3	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	99 ef       	ldi	r25, 0xF9	; 249
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_init+0x16>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_init+0x1c>
 1a4:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 1a6:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 1a8:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_toggle();
 1aa:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1ae:	8f e1       	ldi	r24, 0x1F	; 31
 1b0:	9e e4       	ldi	r25, 0x4E	; 78
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x2a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_init+0x30>
 1b8:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1ba:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_init+0x3a>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_init+0x40>
 1c8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1ca:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_init+0x4a>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_init+0x50>
 1d8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1da:	44 98       	cbi	0x08, 4	; 8
    lcd_e_toggle();
 1dc:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_init+0x5c>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_init+0x62>
 1ea:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1ec:	88 e2       	ldi	r24, 0x28	; 40
 1ee:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1f2:	88 e0       	ldi	r24, 0x08	; 8
 1f4:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1f8:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 202:	8c 2f       	mov	r24, r28
 204:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
}/* lcd_init */
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <main>:
};

int main(void)
{
    //Configure outputs for 8-bit R-2R DAC
    GPIO_config_output(&DDRB, pin0);
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	84 e2       	ldi	r24, 0x24	; 36
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, pin1);
 216:	63 e0       	ldi	r22, 0x03	; 3
 218:	84 e2       	ldi	r24, 0x24	; 36
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin2);
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	8a e2       	ldi	r24, 0x2A	; 42
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin3);
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	8a e2       	ldi	r24, 0x2A	; 42
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin4);
 234:	64 e0       	ldi	r22, 0x04	; 4
 236:	8a e2       	ldi	r24, 0x2A	; 42
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin5);
 23e:	65 e0       	ldi	r22, 0x05	; 5
 240:	8a e2       	ldi	r24, 0x2A	; 42
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin6);
 248:	66 e0       	ldi	r22, 0x06	; 6
 24a:	8a e2       	ldi	r24, 0x2A	; 42
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin7);
 252:	67 e0       	ldi	r22, 0x07	; 7
 254:	8a e2       	ldi	r24, 0x2A	; 42
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 25c:	8c e0       	ldi	r24, 0x0C	; 12
 25e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_init>
    
    // Set pointer to beginning of CGRAM memory
    lcd_command(1 << LCD_CGRAM);
 262:	80 e4       	ldi	r24, 0x40	; 64
 264:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 268:	c0 e0       	ldi	r28, 0x00	; 0
 26a:	d1 e0       	ldi	r29, 0x01	; 1
 26c:	00 e2       	ldi	r16, 0x20	; 32
 26e:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t i = 0; i < 8*4; i++)
    {
        // Store all new chars to memory line by line
        lcd_data(customChar[i]);
 270:	89 91       	ld	r24, Y+
 272:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_data>
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
    
    // Set pointer to beginning of CGRAM memory
    lcd_command(1 << LCD_CGRAM);
    for (uint8_t i = 0; i < 8*4; i++)
 276:	c0 17       	cp	r28, r16
 278:	d1 07       	cpc	r29, r17
 27a:	d1 f7       	brne	.-12     	; 0x270 <main+0x64>
    {
        // Store all new chars to memory line by line
        lcd_data(customChar[i]);
    }
    // Set DDRAM address
    lcd_command(1 << LCD_DDRAM);
 27c:	80 e8       	ldi	r24, 0x80	; 128
 27e:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    
    //Put signal options at LCD display
    lcd_gotoxy(1, 0); 
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
    lcd_puts("Choose signal:");
 28a:	81 e2       	ldi	r24, 0x21	; 33
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_gotoxy(1, 1); 
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
    lcd_puts("1");
 29a:	80 e3       	ldi	r24, 0x30	; 48
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(0);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    lcd_puts("  2");
 2a8:	82 e3       	ldi	r24, 0x32	; 50
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(1);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    lcd_puts("  3");
 2b6:	86 e3       	ldi	r24, 0x36	; 54
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(2);
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    lcd_puts("  4");
 2c4:	8a e3       	ldi	r24, 0x3A	; 58
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(3);
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    
    
    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
    ADMUX |= (1 << REFS0);
 2d2:	ec e7       	ldi	r30, 0x7C	; 124
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	80 64       	ori	r24, 0x40	; 64
 2da:	80 83       	st	Z, r24
    ADMUX &= ~(1 << REFS1);
 2dc:	80 81       	ld	r24, Z
 2de:	8f 77       	andi	r24, 0x7F	; 127
 2e0:	80 83       	st	Z, r24
    
    // Set input channel to ADC0
    ADMUX &= ~(1 << MUX3);
 2e2:	80 81       	ld	r24, Z
 2e4:	87 7f       	andi	r24, 0xF7	; 247
 2e6:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX2);
 2e8:	80 81       	ld	r24, Z
 2ea:	8b 7f       	andi	r24, 0xFB	; 251
 2ec:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX1);
 2ee:	80 81       	ld	r24, Z
 2f0:	8d 7f       	andi	r24, 0xFD	; 253
 2f2:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX0);
 2f4:	80 81       	ld	r24, Z
 2f6:	8e 7f       	andi	r24, 0xFE	; 254
 2f8:	80 83       	st	Z, r24
    
    // Enable ADC module
    ADCSRA |= (1 << ADEN);
 2fa:	ea e7       	ldi	r30, 0x7A	; 122
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	80 68       	ori	r24, 0x80	; 128
 302:	80 83       	st	Z, r24
    
    // Enable conversion complete interrupt
    //ADCSRA |= (1 << ADIE);
    
    // Set clock prescaler to 128
    ADCSRA |= (1 << ADPS2);
 304:	80 81       	ld	r24, Z
 306:	84 60       	ori	r24, 0x04	; 4
 308:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS1);
 30a:	80 81       	ld	r24, Z
 30c:	82 60       	ori	r24, 0x02	; 2
 30e:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS0);
 310:	80 81       	ld	r24, Z
 312:	81 60       	ori	r24, 0x01	; 1
 314:	80 83       	st	Z, r24
    
    
    
    /* Configuration of Timer/Counter0 */
    TIM0_overflow_16us();
 316:	85 b5       	in	r24, 0x25	; 37
 318:	89 7f       	andi	r24, 0xF9	; 249
 31a:	85 bd       	out	0x25, r24	; 37
 31c:	85 b5       	in	r24, 0x25	; 37
 31e:	81 60       	ori	r24, 0x01	; 1
 320:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 322:	ee e6       	ldi	r30, 0x6E	; 110
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	81 60       	ori	r24, 0x01	; 1
 32a:	80 83       	st	Z, r24
    /* Configuration of Timer/Counter1 */
    //TIM1_overflow_33ms();
    //TIM1_overflow_interrupt_enable();
    
    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 32c:	87 e6       	ldi	r24, 0x67	; 103
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 80 02 	call	0x500	; 0x500 <uart_init>
    
    // Enables interrupts by setting the global interrupt mask
    sei();
 334:	78 94       	sei
 336:	ff cf       	rjmp	.-2      	; 0x336 <main+0x12a>

00000338 <__vector_16>:
    return 0;
}

/* Interrupt service routine ----------------------------------------*/
ISR(TIMER0_OVF_vect)
{    
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	2f 93       	push	r18
 344:	8f 93       	push	r24
 346:	9f 93       	push	r25
 348:	ef 93       	push	r30
 34a:	ff 93       	push	r31
	static int16_t number_of_overflows = 0;
    static uint8_t value = 0;
    static uint8_t lookup_number = 0;
    btn_pressed = 1;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <btn_pressed>
    
    ADCSRA |= (1 << ADSC);
 352:	ea e7       	ldi	r30, 0x7A	; 122
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	80 64       	ori	r24, 0x40	; 64
 35a:	80 83       	st	Z, r24
    ADC_value = ADC;
 35c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 360:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 364:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <ADC_value+0x1>
 368:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <ADC_value>
    
    //Writing values to pins, where is the R-2R connected
    PORTD = value & 0b11111100;
 36c:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <value.1996>
 370:	8c 7f       	andi	r24, 0xFC	; 252
 372:	8b b9       	out	0x0b, r24	; 11
    PORTB = (value & 0b00000011) << 2;
 374:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <value.1996>
 378:	83 70       	andi	r24, 0x03	; 3
 37a:	88 0f       	add	r24, r24
 37c:	88 0f       	add	r24, r24
 37e:	85 b9       	out	0x05, r24	; 5
    {
        btn_pressed = 4;
    }*/
    
    //Sine function
    if (btn_pressed == 1)
 380:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <btn_pressed>
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	61 f4       	brne	.+24     	; 0x3a0 <__vector_16+0x68>
    {
        value = sine_wave[lookup_number];
 388:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <lookup_number.1997>
 38c:	e8 2f       	mov	r30, r24
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	e2 5c       	subi	r30, 0xC2	; 194
 392:	fe 4f       	sbci	r31, 0xFE	; 254
 394:	90 81       	ld	r25, Z
 396:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <value.1996>
        lookup_number++;
 39a:	8f 5f       	subi	r24, 0xFF	; 255
 39c:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <lookup_number.1997>
    }
    
    //Square function
    if (btn_pressed == 2)
 3a0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <btn_pressed>
 3a4:	82 30       	cpi	r24, 0x02	; 2
 3a6:	c9 f4       	brne	.+50     	; 0x3da <__vector_16+0xa2>
    {
        if (number_of_overflows < 2)
 3a8:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
 3ac:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <__data_end+0x1>
 3b0:	82 30       	cpi	r24, 0x02	; 2
 3b2:	91 05       	cpc	r25, r1
 3b4:	24 f4       	brge	.+8      	; 0x3be <__vector_16+0x86>
        {
            value = 0b11111111;
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <value.1996>
 3bc:	0e c0       	rjmp	.+28     	; 0x3da <__vector_16+0xa2>
        }
        else if (number_of_overflows < 4)
 3be:	04 97       	sbiw	r24, 0x04	; 4
 3c0:	1c f4       	brge	.+6      	; 0x3c8 <__vector_16+0x90>
        {
            value = 0;
 3c2:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <value.1996>
 3c6:	09 c0       	rjmp	.+18     	; 0x3da <__vector_16+0xa2>
        }
        else
        {
            number_of_overflows = 0;
 3c8:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <__data_end+0x1>
 3cc:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <__data_end>
        }
    }
    
    //Triangle function
    if (btn_pressed == 3)
 3d0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <btn_pressed>
 3d4:	83 30       	cpi	r24, 0x03	; 3
 3d6:	01 f5       	brne	.+64     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3d8:	0c c0       	rjmp	.+24     	; 0x3f2 <__vector_16+0xba>
 3da:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <btn_pressed>
 3de:	83 30       	cpi	r24, 0x03	; 3
 3e0:	d9 f4       	brne	.+54     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
    {
        if (number_of_overflows < 256)
 3e2:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
 3e6:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <__data_end+0x1>
 3ea:	8f 3f       	cpi	r24, 0xFF	; 255
 3ec:	91 05       	cpc	r25, r1
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <__vector_16+0xba>
 3f0:	34 f4       	brge	.+12     	; 0x3fe <__vector_16+0xc6>
        {        
        value++;
 3f2:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <value.1996>
 3f6:	8f 5f       	subi	r24, 0xFF	; 255
 3f8:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <value.1996>
 3fc:	0d c0       	rjmp	.+26     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
        } 
        else if (number_of_overflows < 511)
 3fe:	8f 3f       	cpi	r24, 0xFF	; 255
 400:	91 40       	sbci	r25, 0x01	; 1
 402:	34 f4       	brge	.+12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
        {
            value--;
 404:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <value.1996>
 408:	81 50       	subi	r24, 0x01	; 1
 40a:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <value.1996>
 40e:	04 c0       	rjmp	.+8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
        }
        else 
        {
            number_of_overflows = 0;
 410:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <__data_end+0x1>
 414:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <__data_end>
            //value = 0;
        }
    }
      
    //Ramp function    
    if (btn_pressed == 4)
 418:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <btn_pressed>
 41c:	84 30       	cpi	r24, 0x04	; 4
 41e:	29 f4       	brne	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
    {
        value++;
 420:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <value.1996>
 424:	8f 5f       	subi	r24, 0xFF	; 255
 426:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <value.1996>
    }
            
    number_of_overflows++;   
 42a:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
 42e:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <__data_end+0x1>
 432:	01 96       	adiw	r24, 0x01	; 1
 434:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <__data_end+0x1>
 438:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__data_end>
    
}
 43c:	ff 91       	pop	r31
 43e:	ef 91       	pop	r30
 440:	9f 91       	pop	r25
 442:	8f 91       	pop	r24
 444:	2f 91       	pop	r18
 446:	0f 90       	pop	r0
 448:	0f be       	out	0x3f, r0	; 63
 44a:	0f 90       	pop	r0
 44c:	1f 90       	pop	r1
 44e:	18 95       	reti

00000450 <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 450:	1f 92       	push	r1
 452:	0f 92       	push	r0
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	0f 92       	push	r0
 458:	11 24       	eor	r1, r1
 45a:	2f 93       	push	r18
 45c:	8f 93       	push	r24
 45e:	9f 93       	push	r25
 460:	ef 93       	push	r30
 462:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 464:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    data = UART0_DATA;
 468:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 46c:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 46e:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <UART_RxHead>
 472:	ef 5f       	subi	r30, 0xFF	; 255
 474:	ef 73       	andi	r30, 0x3F	; 63

    if (tmphead == UART_RxTail)
 476:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <UART_RxTail>
 47a:	e9 17       	cp	r30, r25
 47c:	39 f0       	breq	.+14     	; 0x48c <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 47e:	e0 93 46 02 	sts	0x0246, r30	; 0x800246 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	e7 5b       	subi	r30, 0xB7	; 183
 486:	fd 4f       	sbci	r31, 0xFD	; 253
 488:	20 83       	st	Z, r18
 48a:	01 c0       	rjmp	.+2      	; 0x48e <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 48c:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 48e:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <UART_LastRxError>
 492:	89 2b       	or	r24, r25
 494:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <UART_LastRxError>
}
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	9f 91       	pop	r25
 49e:	8f 91       	pop	r24
 4a0:	2f 91       	pop	r18
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0
 4a8:	1f 90       	pop	r1
 4aa:	18 95       	reti

000004ac <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	11 24       	eor	r1, r1
 4b6:	8f 93       	push	r24
 4b8:	9f 93       	push	r25
 4ba:	ef 93       	push	r30
 4bc:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 4be:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <UART_TxHead>
 4c2:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <UART_TxTail>
 4c6:	98 17       	cp	r25, r24
 4c8:	69 f0       	breq	.+26     	; 0x4e4 <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 4ca:	e0 91 47 02 	lds	r30, 0x0247	; 0x800247 <UART_TxTail>
 4ce:	ef 5f       	subi	r30, 0xFF	; 255
 4d0:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
 4d2:	e0 93 47 02 	sts	0x0247, r30	; 0x800247 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	e7 57       	subi	r30, 0x77	; 119
 4da:	fd 4f       	sbci	r31, 0xFD	; 253
 4dc:	80 81       	ld	r24, Z
 4de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 4e2:	05 c0       	rjmp	.+10     	; 0x4ee <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 4e4:	e1 ec       	ldi	r30, 0xC1	; 193
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	8f 7d       	andi	r24, 0xDF	; 223
 4ec:	80 83       	st	Z, r24
    }
}
 4ee:	ff 91       	pop	r31
 4f0:	ef 91       	pop	r30
 4f2:	9f 91       	pop	r25
 4f4:	8f 91       	pop	r24
 4f6:	0f 90       	pop	r0
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <uart_init>:
 * Input:    baudrate using macro UART_BAUD_SELECT()
 * Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 500:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <UART_TxHead>
    UART_TxTail = 0;
 504:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <UART_TxTail>
    UART_RxHead = 0;
 508:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <UART_RxHead>
    UART_RxTail = 0;
 50c:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <UART_RxTail>
    #  endif
    # endif
    #endif /* ifdef UART_TEST */

    /* Set baud rate */
    if (baudrate & 0x8000)
 510:	99 23       	and	r25, r25
 512:	1c f4       	brge	.+6      	; 0x51a <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1 << UART0_BIT_U2X); // Enable 2x speed
 514:	22 e0       	ldi	r18, 0x02	; 2
 516:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
        #endif
    }
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char) ((baudrate >> 8) & 0x80);
 51a:	90 78       	andi	r25, 0x80	; 128
 51c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    #endif
    UART0_UBRRL = (unsigned char) (baudrate & 0x00FF);
 520:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE) | (1 << UART0_BIT_RXEN) | (1 << UART0_BIT_TXEN);
 524:	88 e9       	ldi	r24, 0x98	; 152
 526:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    # ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1 << UART0_BIT_URSEL) | (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
    # else
    UART0_CONTROLC = (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
 52a:	86 e0       	ldi	r24, 0x06	; 6
 52c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 530:	08 95       	ret

00000532 <_exit>:
 532:	f8 94       	cli

00000534 <__stop_program>:
 534:	ff cf       	rjmp	.-2      	; 0x534 <__stop_program>
