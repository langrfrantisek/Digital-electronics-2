
DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b4  00800100  00000cc2  00000d56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  008002b4  008002b4  00000f0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021de  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb1  00000000  00000000  000032b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010a7  00000000  00000000  00003e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  00004f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ae  00000000  00000000  00005268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e49  00000000  00000000  00005916  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000675f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__vector_18>
  4c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3b       	cpi	r26, 0xB4	; 180
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a4 eb       	ldi	r26, 0xB4	; 180
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 34       	cpi	r26, 0x41	; 65
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 06 01 	call	0x20c	; 0x20c <main>
  9e:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
#include "gpio.h"

/* Function definitions ----------------------------------------------*/
void GPIO_config_output(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  be:	29 9a       	sbi	0x05, 1	; 5
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <toggle_e+0x4>
  c6:	00 00       	nop
  c8:	29 98       	cbi	0x05, 1	; 5
  ca:	08 95       	ret

000000cc <lcd_write>:
  cc:	cf 93       	push	r28
  ce:	c8 2f       	mov	r28, r24
  d0:	66 23       	and	r22, r22
  d2:	11 f0       	breq	.+4      	; 0xd8 <lcd_write+0xc>
  d4:	28 9a       	sbi	0x05, 0	; 5
  d6:	01 c0       	rjmp	.+2      	; 0xda <lcd_write+0xe>
  d8:	28 98       	cbi	0x05, 0	; 5
  da:	3c 9a       	sbi	0x07, 4	; 7
  dc:	39 9a       	sbi	0x07, 1	; 7
  de:	3a 9a       	sbi	0x07, 2	; 7
  e0:	3b 9a       	sbi	0x07, 3	; 7
  e2:	43 98       	cbi	0x08, 3	; 8
  e4:	42 98       	cbi	0x08, 2	; 8
  e6:	41 98       	cbi	0x08, 1	; 8
  e8:	44 98       	cbi	0x08, 4	; 8
  ea:	cc 23       	and	r28, r28
  ec:	0c f4       	brge	.+2      	; 0xf0 <lcd_write+0x24>
  ee:	43 9a       	sbi	0x08, 3	; 8
  f0:	c6 fd       	sbrc	r28, 6
  f2:	42 9a       	sbi	0x08, 2	; 8
  f4:	c5 fd       	sbrc	r28, 5
  f6:	41 9a       	sbi	0x08, 1	; 8
  f8:	c4 fd       	sbrc	r28, 4
  fa:	44 9a       	sbi	0x08, 4	; 8
  fc:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 100:	43 98       	cbi	0x08, 3	; 8
 102:	42 98       	cbi	0x08, 2	; 8
 104:	41 98       	cbi	0x08, 1	; 8
 106:	44 98       	cbi	0x08, 4	; 8
 108:	c3 fd       	sbrc	r28, 3
 10a:	43 9a       	sbi	0x08, 3	; 8
 10c:	c2 fd       	sbrc	r28, 2
 10e:	42 9a       	sbi	0x08, 2	; 8
 110:	c1 fd       	sbrc	r28, 1
 112:	41 9a       	sbi	0x08, 1	; 8
 114:	c0 fd       	sbrc	r28, 0
 116:	44 9a       	sbi	0x08, 4	; 8
 118:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 11c:	44 9a       	sbi	0x08, 4	; 8
 11e:	41 9a       	sbi	0x08, 1	; 8
 120:	42 9a       	sbi	0x08, 2	; 8
 122:	43 9a       	sbi	0x08, 3	; 8
 124:	87 eb       	ldi	r24, 0xB7	; 183
 126:	9b e0       	ldi	r25, 0x0B	; 11
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_write+0x5c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_write+0x62>
 12e:	00 00       	nop
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <lcd_command>:
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 13a:	08 95       	ret

0000013c <lcd_data>:
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 142:	08 95       	ret

00000144 <lcd_gotoxy>:
 144:	61 11       	cpse	r22, r1
 146:	04 c0       	rjmp	.+8      	; 0x150 <lcd_gotoxy+0xc>
 148:	80 58       	subi	r24, 0x80	; 128
 14a:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 14e:	08 95       	ret
 150:	80 54       	subi	r24, 0x40	; 64
 152:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 156:	08 95       	ret

00000158 <lcd_clrscr>:
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 15e:	08 95       	ret

00000160 <lcd_putc>:
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 166:	08 95       	ret

00000168 <lcd_puts>:
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ec 01       	movw	r28, r24
 16e:	21 96       	adiw	r28, 0x01	; 1
 170:	fc 01       	movw	r30, r24
 172:	80 81       	ld	r24, Z
 174:	88 23       	and	r24, r24
 176:	29 f0       	breq	.+10     	; 0x182 <lcd_puts+0x1a>
 178:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
 17c:	89 91       	ld	r24, Y+
 17e:	81 11       	cpse	r24, r1
 180:	fb cf       	rjmp	.-10     	; 0x178 <lcd_puts+0x10>
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 18c:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 18e:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 190:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 192:	3c 9a       	sbi	0x07, 4	; 7
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 194:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 196:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 198:	3b 9a       	sbi	0x07, 3	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	99 ef       	ldi	r25, 0xF9	; 249
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_init+0x16>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_init+0x1c>
 1a4:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 1a6:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 1a8:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_toggle();
 1aa:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1ae:	8f e1       	ldi	r24, 0x1F	; 31
 1b0:	9e e4       	ldi	r25, 0x4E	; 78
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x2a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_init+0x30>
 1b8:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1ba:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_init+0x3a>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_init+0x40>
 1c8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1ca:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_init+0x4a>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_init+0x50>
 1d8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1da:	44 98       	cbi	0x08, 4	; 8
    lcd_e_toggle();
 1dc:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_init+0x5c>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_init+0x62>
 1ea:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1ec:	88 e2       	ldi	r24, 0x28	; 40
 1ee:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1f2:	88 e0       	ldi	r24, 0x08	; 8
 1f4:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1f8:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 202:	8c 2f       	mov	r24, r28
 204:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
}/* lcd_init */
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <main>:
};

int main(void)
{
    //Configure outputs for 8-bit R-2R DAC
    GPIO_config_output(&DDRB, pin0);
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	84 e2       	ldi	r24, 0x24	; 36
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, pin1);
 216:	63 e0       	ldi	r22, 0x03	; 3
 218:	84 e2       	ldi	r24, 0x24	; 36
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin2);
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	8a e2       	ldi	r24, 0x2A	; 42
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin3);
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	8a e2       	ldi	r24, 0x2A	; 42
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin4);
 234:	64 e0       	ldi	r22, 0x04	; 4
 236:	8a e2       	ldi	r24, 0x2A	; 42
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin5);
 23e:	65 e0       	ldi	r22, 0x05	; 5
 240:	8a e2       	ldi	r24, 0x2A	; 42
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin6);
 248:	66 e0       	ldi	r22, 0x06	; 6
 24a:	8a e2       	ldi	r24, 0x2A	; 42
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin7);
 252:	67 e0       	ldi	r22, 0x07	; 7
 254:	8a e2       	ldi	r24, 0x2A	; 42
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 25c:	8c e0       	ldi	r24, 0x0C	; 12
 25e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_init>
    
    // Set pointer to beginning of CGRAM memory
    lcd_command(1 << LCD_CGRAM);
 262:	80 e4       	ldi	r24, 0x40	; 64
 264:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 268:	c2 e0       	ldi	r28, 0x02	; 2
 26a:	d1 e0       	ldi	r29, 0x01	; 1
 26c:	02 e2       	ldi	r16, 0x22	; 34
 26e:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t i = 0; i < 8*4; i++)
    {
        // Store all new chars to memory line by line
        lcd_data(customChar[i]);
 270:	89 91       	ld	r24, Y+
 272:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_data>
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
    
    // Set pointer to beginning of CGRAM memory
    lcd_command(1 << LCD_CGRAM);
    for (uint8_t i = 0; i < 8*4; i++)
 276:	c0 17       	cp	r28, r16
 278:	d1 07       	cpc	r29, r17
 27a:	d1 f7       	brne	.-12     	; 0x270 <main+0x64>
    {
        // Store all new chars to memory line by line
        lcd_data(customChar[i]);
    }
    // Set DDRAM address
    lcd_command(1 << LCD_DDRAM);
 27c:	80 e8       	ldi	r24, 0x80	; 128
 27e:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    
    //Put signal options at LCD display
    lcd_gotoxy(1, 0); 
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
    lcd_puts("Choose signal:");
 28a:	88 e2       	ldi	r24, 0x28	; 40
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_gotoxy(1, 1); 
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
    lcd_puts("1");
 29a:	82 eb       	ldi	r24, 0xB2	; 178
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(0);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    lcd_puts("  2");
 2a8:	87 e3       	ldi	r24, 0x37	; 55
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(1);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    lcd_puts("  3");
 2b6:	8b e3       	ldi	r24, 0x3B	; 59
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(2);
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    lcd_puts("  4");
 2c4:	8f e3       	ldi	r24, 0x3F	; 63
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(3);
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    
    
    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
    ADMUX |= (1 << REFS0);
 2d2:	ec e7       	ldi	r30, 0x7C	; 124
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	80 64       	ori	r24, 0x40	; 64
 2da:	80 83       	st	Z, r24
    ADMUX &= ~(1 << REFS1);
 2dc:	80 81       	ld	r24, Z
 2de:	8f 77       	andi	r24, 0x7F	; 127
 2e0:	80 83       	st	Z, r24
    
    // Set input channel to ADC0
    ADMUX &= ~(1 << MUX3);
 2e2:	80 81       	ld	r24, Z
 2e4:	87 7f       	andi	r24, 0xF7	; 247
 2e6:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX2);
 2e8:	80 81       	ld	r24, Z
 2ea:	8b 7f       	andi	r24, 0xFB	; 251
 2ec:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX1);
 2ee:	80 81       	ld	r24, Z
 2f0:	8d 7f       	andi	r24, 0xFD	; 253
 2f2:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX0);
 2f4:	80 81       	ld	r24, Z
 2f6:	8e 7f       	andi	r24, 0xFE	; 254
 2f8:	80 83       	st	Z, r24
    
    // Enable ADC module
    ADCSRA |= (1 << ADEN);
 2fa:	ea e7       	ldi	r30, 0x7A	; 122
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	80 68       	ori	r24, 0x80	; 128
 302:	80 83       	st	Z, r24
    
    // Enable conversion complete interrupt
    ADCSRA |= (1 << ADIE);
 304:	80 81       	ld	r24, Z
 306:	88 60       	ori	r24, 0x08	; 8
 308:	80 83       	st	Z, r24
    
    // Set clock prescaler to 128
    ADCSRA |= (1 << ADPS2);
 30a:	80 81       	ld	r24, Z
 30c:	84 60       	ori	r24, 0x04	; 4
 30e:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS1);
 310:	80 81       	ld	r24, Z
 312:	82 60       	ori	r24, 0x02	; 2
 314:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS0);
 316:	80 81       	ld	r24, Z
 318:	81 60       	ori	r24, 0x01	; 1
 31a:	80 83       	st	Z, r24
    
    
    
    /* Configuration of Timer/Counter0 */
    TIM0_overflow_16us();
 31c:	85 b5       	in	r24, 0x25	; 37
 31e:	89 7f       	andi	r24, 0xF9	; 249
 320:	85 bd       	out	0x25, r24	; 37
 322:	85 b5       	in	r24, 0x25	; 37
 324:	81 60       	ori	r24, 0x01	; 1
 326:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 328:	ee e6       	ldi	r30, 0x6E	; 110
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	81 60       	ori	r24, 0x01	; 1
 330:	80 83       	st	Z, r24
    
    /* Configuration of Timer/Counter1 */
    TIM1_overflow_4ms();
 332:	e1 e8       	ldi	r30, 0x81	; 129
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	89 7f       	andi	r24, 0xF9	; 249
 33a:	80 83       	st	Z, r24
 33c:	80 81       	ld	r24, Z
 33e:	81 60       	ori	r24, 0x01	; 1
 340:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 342:	ef e6       	ldi	r30, 0x6F	; 111
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	81 60       	ori	r24, 0x01	; 1
 34a:	80 83       	st	Z, r24
    
    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 34c:	87 e6       	ldi	r24, 0x67	; 103
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 ed 05 	call	0xbda	; 0xbda <uart_init>
    
    // Enables interrupts by setting the global interrupt mask
    sei();
 354:	78 94       	sei
 356:	ff cf       	rjmp	.-2      	; 0x356 <main+0x14a>

00000358 <__vector_16>:
    return 0;
}

/* Interrupt service routine ----------------------------------------*/
ISR(TIMER0_OVF_vect)
{    
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	2f 93       	push	r18
 364:	8f 93       	push	r24
 366:	9f 93       	push	r25
 368:	ef 93       	push	r30
 36a:	ff 93       	push	r31
	static int16_t number_of_overflows = 0;   
    static uint8_t lookup_number = 0;

    //Writing values to pins, where is the R-2R connected
    PORTD = value & 0b11111100;
 36c:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <value>
 370:	8c 7f       	andi	r24, 0xFC	; 252
 372:	8b b9       	out	0x0b, r24	; 11
    PORTB = (value & 0b00000011) << 2;
 374:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <value>
 378:	83 70       	andi	r24, 0x03	; 3
 37a:	88 0f       	add	r24, r24
 37c:	88 0f       	add	r24, r24
 37e:	85 b9       	out	0x05, r24	; 5
  
    //Sine function
    if (btn_pressed == 1)
 380:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <btn_pressed>
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	71 f4       	brne	.+28     	; 0x3a4 <__vector_16+0x4c>
    {
        value = sine_wave[lookup_number];
 388:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <lookup_number.2129>
 38c:	e9 2f       	mov	r30, r25
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	ec 54       	subi	r30, 0x4C	; 76
 392:	fe 4f       	sbci	r31, 0xFE	; 254
 394:	80 81       	ld	r24, Z
 396:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <value>
        lookup_number += freq;
 39a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <freq>
 39e:	89 0f       	add	r24, r25
 3a0:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <lookup_number.2129>
    }
    
    //Square function
    if (btn_pressed == 2)
 3a4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <btn_pressed>
 3a8:	82 30       	cpi	r24, 0x02	; 2
 3aa:	b9 f4       	brne	.+46     	; 0x3da <__vector_16+0x82>
    {
        if (number_of_overflows < 128)
 3ac:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <number_of_overflows.2128>
 3b0:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <number_of_overflows.2128+0x1>
 3b4:	80 38       	cpi	r24, 0x80	; 128
 3b6:	91 05       	cpc	r25, r1
 3b8:	24 f4       	brge	.+8      	; 0x3c2 <__vector_16+0x6a>
        {
            value = 0b11111111;
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <value>
 3c0:	0c c0       	rjmp	.+24     	; 0x3da <__vector_16+0x82>
        }
        else if (number_of_overflows < 256)
 3c2:	8f 3f       	cpi	r24, 0xFF	; 255
 3c4:	91 05       	cpc	r25, r1
 3c6:	09 f0       	breq	.+2      	; 0x3ca <__vector_16+0x72>
 3c8:	1c f4       	brge	.+6      	; 0x3d0 <__vector_16+0x78>
        {
            value = 0;
 3ca:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <value>
 3ce:	48 c0       	rjmp	.+144    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
        }
        else
        {
            number_of_overflows = 0;
 3d0:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <number_of_overflows.2128+0x1>
 3d4:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <number_of_overflows.2128>
 3d8:	43 c0       	rjmp	.+134    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
        }
    }
    
    //Triangle function
    if (btn_pressed == 3)
 3da:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <btn_pressed>
 3de:	83 30       	cpi	r24, 0x03	; 3
 3e0:	39 f5       	brne	.+78     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
    {
        
        if (number_of_overflows < 256 && value >= 0)
 3e2:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <number_of_overflows.2128>
 3e6:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <number_of_overflows.2128+0x1>
 3ea:	8f 3f       	cpi	r24, 0xFF	; 255
 3ec:	91 05       	cpc	r25, r1
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <__vector_16+0x9a>
 3f0:	54 f4       	brge	.+20     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f2:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <value>
        {        
            value += freq;
 3f6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <freq>
 3fa:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <value>
 3fe:	89 0f       	add	r24, r25
 400:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <value>
 404:	15 c0       	rjmp	.+42     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
        } 
        else if (number_of_overflows < 511 && value > 0)
 406:	8f 3f       	cpi	r24, 0xFF	; 255
 408:	91 40       	sbci	r25, 0x01	; 1
 40a:	64 f4       	brge	.+24     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 40c:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <value>
 410:	88 23       	and	r24, r24
 412:	41 f0       	breq	.+16     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
        {
            value -= freq;
 414:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <freq>
 418:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <value>
 41c:	89 1b       	sub	r24, r25
 41e:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <value>
 422:	06 c0       	rjmp	.+12     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
        }
        else 
        {
            number_of_overflows = 0;
 424:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <number_of_overflows.2128+0x1>
 428:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <number_of_overflows.2128>
            value = 0;
 42c:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <value>
        }
    }
      
    //Ramp function    
    if (btn_pressed == 4)
 430:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <btn_pressed>
 434:	84 30       	cpi	r24, 0x04	; 4
 436:	39 f4       	brne	.+14     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
    {
        value += freq;
 438:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <freq>
 43c:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <value>
 440:	89 0f       	add	r24, r25
 442:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <value>
    }
       
    number_of_overflows += freq;   
 446:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <freq>
 44a:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <number_of_overflows.2128>
 44e:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <number_of_overflows.2128+0x1>
 452:	82 0f       	add	r24, r18
 454:	91 1d       	adc	r25, r1
 456:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <number_of_overflows.2128+0x1>
 45a:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <number_of_overflows.2128>
  
}
 45e:	05 c0       	rjmp	.+10     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
            number_of_overflows = 0;
        }
    }
    
    //Triangle function
    if (btn_pressed == 3)
 460:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <btn_pressed>
 464:	83 30       	cpi	r24, 0x03	; 3
 466:	21 f7       	brne	.-56     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 468:	c4 cf       	rjmp	.-120    	; 0x3f2 <__vector_16+0x9a>
        value += freq;
    }
       
    number_of_overflows += freq;   
  
}
 46a:	ff 91       	pop	r31
 46c:	ef 91       	pop	r30
 46e:	9f 91       	pop	r25
 470:	8f 91       	pop	r24
 472:	2f 91       	pop	r18
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <__vector_13>:
/* -------------------------------------------------------------------*/
ISR(TIMER1_OVF_vect)
{
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	8f 93       	push	r24
 48a:	ef 93       	push	r30
 48c:	ff 93       	push	r31
   ADCSRA |= (1 << ADSC);   
 48e:	ea e7       	ldi	r30, 0x7A	; 122
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	80 64       	ori	r24, 0x40	; 64
 496:	80 83       	st	Z, r24
}
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	8f 91       	pop	r24
 49e:	0f 90       	pop	r0
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	0f 90       	pop	r0
 4a4:	1f 90       	pop	r1
 4a6:	18 95       	reti

000004a8 <__vector_21>:
 * ISR starts when ADC completes the conversion. Display value on LCD
 * and send it to UART.
 */

ISR(ADC_vect)
{
 4a8:	1f 92       	push	r1
 4aa:	0f 92       	push	r0
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	0f 92       	push	r0
 4b0:	11 24       	eor	r1, r1
 4b2:	2f 93       	push	r18
 4b4:	3f 93       	push	r19
 4b6:	4f 93       	push	r20
 4b8:	5f 93       	push	r21
 4ba:	6f 93       	push	r22
 4bc:	7f 93       	push	r23
 4be:	8f 93       	push	r24
 4c0:	9f 93       	push	r25
 4c2:	af 93       	push	r26
 4c4:	bf 93       	push	r27
 4c6:	ef 93       	push	r30
 4c8:	ff 93       	push	r31
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	cd b7       	in	r28, 0x3d	; 61
 4d0:	de b7       	in	r29, 0x3e	; 62
 4d2:	2a 97       	sbiw	r28, 0x0a	; 10
 4d4:	de bf       	out	0x3e, r29	; 62
 4d6:	cd bf       	out	0x3d, r28	; 61
    static uint16_t f_Hz = 244;
    static uint16_t triangle_f_Hz = 121;
    ADC_value = ADC;
 4d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 4dc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 4e0:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ADC_value+0x1>
 4e4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ADC_value>

    char data[10];
    static uint16_t ADC_value_next = 0;

    if (ADC_value != ADC_value_next)
 4e8:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <ADC_value>
 4ec:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <ADC_value+0x1>
 4f0:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <__data_end>
 4f4:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <__data_end+0x1>
 4f8:	28 17       	cp	r18, r24
 4fa:	39 07       	cpc	r19, r25
 4fc:	09 f4       	brne	.+2      	; 0x500 <__vector_21+0x58>
 4fe:	67 c2       	rjmp	.+1230   	; 0x9ce <__stack+0xcf>
    {
        ADC_value_next = ADC_value;
 500:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_value>
 504:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_value+0x1>
 508:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <__data_end+0x1>
 50c:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <__data_end>
        
        
        
        if (ADC_value < 5)
 510:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_value>
 514:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_value+0x1>
 518:	05 97       	sbiw	r24, 0x05	; 5
 51a:	08 f0       	brcs	.+2      	; 0x51e <__vector_21+0x76>
 51c:	51 c0       	rjmp	.+162    	; 0x5c0 <__vector_21+0x118>
        {
            btn_pressed = 1;
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <btn_pressed>
            lcd_gotoxy(8, 0);
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	88 e0       	ldi	r24, 0x08	; 8
 528:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_putc('1');
 52c:	81 e3       	ldi	r24, 0x31	; 49
 52e:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
            lcd_putc(0);
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
            uart_puts("Sine");
 538:	83 e4       	ldi	r24, 0x43	; 67
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            if (btn_pressed == 3) f_Hz = (((1)/(16e-6))/(258))/2;
 540:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <btn_pressed>
 544:	83 30       	cpi	r24, 0x03	; 3
 546:	39 f4       	brne	.+14     	; 0x556 <__vector_21+0xae>
 548:	89 e7       	ldi	r24, 0x79	; 121
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 550:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 554:	06 c0       	rjmp	.+12     	; 0x562 <__vector_21+0xba>
            else f_Hz = ((1)/(16e-6))/(256);
 556:	84 ef       	ldi	r24, 0xF4	; 244
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 55e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            itoa(f_Hz*freq, data, 10);
 562:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <freq>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 566:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 56a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 56e:	4a e0       	ldi	r20, 0x0A	; 10
 570:	be 01       	movw	r22, r28
 572:	6f 5f       	subi	r22, 0xFF	; 255
 574:	7f 4f       	sbci	r23, 0xFF	; 255
 576:	fc 01       	movw	r30, r24
 578:	2e 9f       	mul	r18, r30
 57a:	c0 01       	movw	r24, r0
 57c:	2f 9f       	mul	r18, r31
 57e:	90 0d       	add	r25, r0
 580:	11 24       	eor	r1, r1
 582:	0e 94 2a 06 	call	0xc54	; 0xc54 <__itoa_ncheck>
            uart_puts(" f = ");
 586:	88 e4       	ldi	r24, 0x48	; 72
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            uart_puts(data);
 58e:	ce 01       	movw	r24, r28
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            uart_puts(" Hz");
 596:	8c e9       	ldi	r24, 0x9C	; 156
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            lcd_gotoxy(10, 1);
 59e:	61 e0       	ldi	r22, 0x01	; 1
 5a0:	8a e0       	ldi	r24, 0x0A	; 10
 5a2:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_puts("    ");
 5a6:	8e e4       	ldi	r24, 0x4E	; 78
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
            lcd_gotoxy(10, 1);
 5ae:	61 e0       	ldi	r22, 0x01	; 1
 5b0:	8a e0       	ldi	r24, 0x0A	; 10
 5b2:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_puts(data);
 5b6:	ce 01       	movw	r24, r28
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
 5be:	07 c2       	rjmp	.+1038   	; 0x9ce <__stack+0xcf>
        }
        else if (ADC_value > 97 && ADC_value < 107)
 5c0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_value>
 5c4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_value+0x1>
 5c8:	82 36       	cpi	r24, 0x62	; 98
 5ca:	91 05       	cpc	r25, r1
 5cc:	08 f4       	brcc	.+2      	; 0x5d0 <__vector_21+0x128>
 5ce:	59 c0       	rjmp	.+178    	; 0x682 <__vector_21+0x1da>
 5d0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_value>
 5d4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_value+0x1>
 5d8:	8b 36       	cpi	r24, 0x6B	; 107
 5da:	91 05       	cpc	r25, r1
 5dc:	08 f0       	brcs	.+2      	; 0x5e0 <__vector_21+0x138>
 5de:	51 c0       	rjmp	.+162    	; 0x682 <__vector_21+0x1da>
        {
            btn_pressed = 2;
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <btn_pressed>
            lcd_gotoxy(8, 0);
 5e6:	60 e0       	ldi	r22, 0x00	; 0
 5e8:	88 e0       	ldi	r24, 0x08	; 8
 5ea:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_putc('2');
 5ee:	82 e3       	ldi	r24, 0x32	; 50
 5f0:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
            lcd_putc(1);
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
            uart_puts("Square");
 5fa:	83 e5       	ldi	r24, 0x53	; 83
 5fc:	91 e0       	ldi	r25, 0x01	; 1
 5fe:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            if (btn_pressed == 3) f_Hz = (((1)/(16e-6))/(258))/2;
 602:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <btn_pressed>
 606:	83 30       	cpi	r24, 0x03	; 3
 608:	39 f4       	brne	.+14     	; 0x618 <__vector_21+0x170>
 60a:	89 e7       	ldi	r24, 0x79	; 121
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 612:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 616:	06 c0       	rjmp	.+12     	; 0x624 <__vector_21+0x17c>
            else f_Hz = ((1)/(16e-6))/(256);
 618:	84 ef       	ldi	r24, 0xF4	; 244
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 620:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            itoa(f_Hz*freq, data, 10);
 624:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <freq>
 628:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 62c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 630:	4a e0       	ldi	r20, 0x0A	; 10
 632:	be 01       	movw	r22, r28
 634:	6f 5f       	subi	r22, 0xFF	; 255
 636:	7f 4f       	sbci	r23, 0xFF	; 255
 638:	fc 01       	movw	r30, r24
 63a:	2e 9f       	mul	r18, r30
 63c:	c0 01       	movw	r24, r0
 63e:	2f 9f       	mul	r18, r31
 640:	90 0d       	add	r25, r0
 642:	11 24       	eor	r1, r1
 644:	0e 94 2a 06 	call	0xc54	; 0xc54 <__itoa_ncheck>
            uart_puts(" f = ");
 648:	88 e4       	ldi	r24, 0x48	; 72
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            uart_puts(data);
 650:	ce 01       	movw	r24, r28
 652:	01 96       	adiw	r24, 0x01	; 1
 654:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            uart_puts(" Hz");
 658:	8c e9       	ldi	r24, 0x9C	; 156
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            lcd_gotoxy(10, 1);
 660:	61 e0       	ldi	r22, 0x01	; 1
 662:	8a e0       	ldi	r24, 0x0A	; 10
 664:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_puts("    ");
 668:	8e e4       	ldi	r24, 0x4E	; 78
 66a:	91 e0       	ldi	r25, 0x01	; 1
 66c:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
            lcd_gotoxy(10, 1);
 670:	61 e0       	ldi	r22, 0x01	; 1
 672:	8a e0       	ldi	r24, 0x0A	; 10
 674:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_puts(data);
 678:	ce 01       	movw	r24, r28
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
 680:	a6 c1       	rjmp	.+844    	; 0x9ce <__stack+0xcf>
        }
        else if (ADC_value > 180 && ADC_value < 190)
 682:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_value>
 686:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_value+0x1>
 68a:	85 3b       	cpi	r24, 0xB5	; 181
 68c:	91 05       	cpc	r25, r1
 68e:	08 f4       	brcc	.+2      	; 0x692 <__vector_21+0x1ea>
 690:	59 c0       	rjmp	.+178    	; 0x744 <__vector_21+0x29c>
 692:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_value>
 696:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_value+0x1>
 69a:	8e 3b       	cpi	r24, 0xBE	; 190
 69c:	91 05       	cpc	r25, r1
 69e:	08 f0       	brcs	.+2      	; 0x6a2 <__vector_21+0x1fa>
 6a0:	51 c0       	rjmp	.+162    	; 0x744 <__vector_21+0x29c>
        {
            btn_pressed = 3;
 6a2:	83 e0       	ldi	r24, 0x03	; 3
 6a4:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <btn_pressed>
            lcd_gotoxy(8, 0);
 6a8:	60 e0       	ldi	r22, 0x00	; 0
 6aa:	88 e0       	ldi	r24, 0x08	; 8
 6ac:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_putc('3');
 6b0:	83 e3       	ldi	r24, 0x33	; 51
 6b2:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
            lcd_putc(2);
 6b6:	82 e0       	ldi	r24, 0x02	; 2
 6b8:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
            uart_puts("Triangle");
 6bc:	8a e5       	ldi	r24, 0x5A	; 90
 6be:	91 e0       	ldi	r25, 0x01	; 1
 6c0:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            if (btn_pressed == 3) f_Hz = (((1)/(16e-6))/(258))/2;
 6c4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <btn_pressed>
 6c8:	83 30       	cpi	r24, 0x03	; 3
 6ca:	39 f4       	brne	.+14     	; 0x6da <__vector_21+0x232>
 6cc:	89 e7       	ldi	r24, 0x79	; 121
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 6d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 6d8:	06 c0       	rjmp	.+12     	; 0x6e6 <__vector_21+0x23e>
            else f_Hz = ((1)/(16e-6))/(256);
 6da:	84 ef       	ldi	r24, 0xF4	; 244
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 6e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            itoa(f_Hz*freq, data, 10);
 6e6:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <freq>
 6ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 6ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 6f2:	4a e0       	ldi	r20, 0x0A	; 10
 6f4:	be 01       	movw	r22, r28
 6f6:	6f 5f       	subi	r22, 0xFF	; 255
 6f8:	7f 4f       	sbci	r23, 0xFF	; 255
 6fa:	fc 01       	movw	r30, r24
 6fc:	2e 9f       	mul	r18, r30
 6fe:	c0 01       	movw	r24, r0
 700:	2f 9f       	mul	r18, r31
 702:	90 0d       	add	r25, r0
 704:	11 24       	eor	r1, r1
 706:	0e 94 2a 06 	call	0xc54	; 0xc54 <__itoa_ncheck>
            uart_puts(" f = ");
 70a:	88 e4       	ldi	r24, 0x48	; 72
 70c:	91 e0       	ldi	r25, 0x01	; 1
 70e:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            uart_puts(data);
 712:	ce 01       	movw	r24, r28
 714:	01 96       	adiw	r24, 0x01	; 1
 716:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            uart_puts(" Hz");
 71a:	8c e9       	ldi	r24, 0x9C	; 156
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            lcd_gotoxy(10, 1);
 722:	61 e0       	ldi	r22, 0x01	; 1
 724:	8a e0       	ldi	r24, 0x0A	; 10
 726:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_puts("    ");
 72a:	8e e4       	ldi	r24, 0x4E	; 78
 72c:	91 e0       	ldi	r25, 0x01	; 1
 72e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
            lcd_gotoxy(10, 1);
 732:	61 e0       	ldi	r22, 0x01	; 1
 734:	8a e0       	ldi	r24, 0x0A	; 10
 736:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_puts(data);
 73a:	ce 01       	movw	r24, r28
 73c:	01 96       	adiw	r24, 0x01	; 1
 73e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
 742:	45 c1       	rjmp	.+650    	; 0x9ce <__stack+0xcf>
        }
        else if (ADC_value > 250 && ADC_value < 260)
 744:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_value>
 748:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_value+0x1>
 74c:	8b 3f       	cpi	r24, 0xFB	; 251
 74e:	91 05       	cpc	r25, r1
 750:	08 f4       	brcc	.+2      	; 0x754 <__vector_21+0x2ac>
 752:	59 c0       	rjmp	.+178    	; 0x806 <__vector_21+0x35e>
 754:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_value>
 758:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_value+0x1>
 75c:	84 30       	cpi	r24, 0x04	; 4
 75e:	91 40       	sbci	r25, 0x01	; 1
 760:	08 f0       	brcs	.+2      	; 0x764 <__vector_21+0x2bc>
 762:	51 c0       	rjmp	.+162    	; 0x806 <__vector_21+0x35e>
        {
            btn_pressed = 4;
 764:	84 e0       	ldi	r24, 0x04	; 4
 766:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <btn_pressed>
            lcd_gotoxy(8, 0);
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	88 e0       	ldi	r24, 0x08	; 8
 76e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_putc('4');
 772:	84 e3       	ldi	r24, 0x34	; 52
 774:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
            lcd_putc(3);
 778:	83 e0       	ldi	r24, 0x03	; 3
 77a:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
            uart_puts("Ramp");
 77e:	83 e6       	ldi	r24, 0x63	; 99
 780:	91 e0       	ldi	r25, 0x01	; 1
 782:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            if (btn_pressed == 3) f_Hz = (((1)/(16e-6))/(258))/2;
 786:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <btn_pressed>
 78a:	83 30       	cpi	r24, 0x03	; 3
 78c:	39 f4       	brne	.+14     	; 0x79c <__vector_21+0x2f4>
 78e:	89 e7       	ldi	r24, 0x79	; 121
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 796:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 79a:	06 c0       	rjmp	.+12     	; 0x7a8 <__vector_21+0x300>
            else f_Hz = ((1)/(16e-6))/(256);
 79c:	84 ef       	ldi	r24, 0xF4	; 244
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 7a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            itoa(f_Hz*freq, data, 10);
 7a8:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <freq>
 7ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 7b4:	4a e0       	ldi	r20, 0x0A	; 10
 7b6:	be 01       	movw	r22, r28
 7b8:	6f 5f       	subi	r22, 0xFF	; 255
 7ba:	7f 4f       	sbci	r23, 0xFF	; 255
 7bc:	fc 01       	movw	r30, r24
 7be:	2e 9f       	mul	r18, r30
 7c0:	c0 01       	movw	r24, r0
 7c2:	2f 9f       	mul	r18, r31
 7c4:	90 0d       	add	r25, r0
 7c6:	11 24       	eor	r1, r1
 7c8:	0e 94 2a 06 	call	0xc54	; 0xc54 <__itoa_ncheck>
            uart_puts(" f = ");
 7cc:	88 e4       	ldi	r24, 0x48	; 72
 7ce:	91 e0       	ldi	r25, 0x01	; 1
 7d0:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            uart_puts(data);
 7d4:	ce 01       	movw	r24, r28
 7d6:	01 96       	adiw	r24, 0x01	; 1
 7d8:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            uart_puts(" Hz");
 7dc:	8c e9       	ldi	r24, 0x9C	; 156
 7de:	91 e0       	ldi	r25, 0x01	; 1
 7e0:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            lcd_gotoxy(10, 1);
 7e4:	61 e0       	ldi	r22, 0x01	; 1
 7e6:	8a e0       	ldi	r24, 0x0A	; 10
 7e8:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_puts("    ");
 7ec:	8e e4       	ldi	r24, 0x4E	; 78
 7ee:	91 e0       	ldi	r25, 0x01	; 1
 7f0:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
            lcd_gotoxy(10, 1);
 7f4:	61 e0       	ldi	r22, 0x01	; 1
 7f6:	8a e0       	ldi	r24, 0x0A	; 10
 7f8:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_puts(data);
 7fc:	ce 01       	movw	r24, r28
 7fe:	01 96       	adiw	r24, 0x01	; 1
 800:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
 804:	e4 c0       	rjmp	.+456    	; 0x9ce <__stack+0xcf>
        }
        else if (ADC_value > 506 && ADC_value < 516 && freq > 1)    //*
 806:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_value>
 80a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_value+0x1>
 80e:	8b 3f       	cpi	r24, 0xFB	; 251
 810:	91 40       	sbci	r25, 0x01	; 1
 812:	08 f4       	brcc	.+2      	; 0x816 <__vector_21+0x36e>
 814:	5c c0       	rjmp	.+184    	; 0x8ce <__vector_21+0x426>
 816:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_value>
 81a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_value+0x1>
 81e:	84 30       	cpi	r24, 0x04	; 4
 820:	92 40       	sbci	r25, 0x02	; 2
 822:	08 f0       	brcs	.+2      	; 0x826 <__vector_21+0x37e>
 824:	54 c0       	rjmp	.+168    	; 0x8ce <__vector_21+0x426>
 826:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <freq>
 82a:	82 30       	cpi	r24, 0x02	; 2
 82c:	08 f4       	brcc	.+2      	; 0x830 <__vector_21+0x388>
 82e:	4f c0       	rjmp	.+158    	; 0x8ce <__vector_21+0x426>
        {
            btn_pressed_next = 10;
 830:	8a e0       	ldi	r24, 0x0A	; 10
 832:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <btn_pressed_next>
            uart_puts("f--");
 836:	88 e6       	ldi	r24, 0x68	; 104
 838:	91 e0       	ldi	r25, 0x01	; 1
 83a:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            uart_puts("\r\n"); 
 83e:	8c e6       	ldi	r24, 0x6C	; 108
 840:	91 e0       	ldi	r25, 0x01	; 1
 842:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            if (btn_pressed == 3) f_Hz = (((1)/(16e-6))/(258))/2;
 846:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <btn_pressed>
 84a:	83 30       	cpi	r24, 0x03	; 3
 84c:	39 f4       	brne	.+14     	; 0x85c <__vector_21+0x3b4>
 84e:	89 e7       	ldi	r24, 0x79	; 121
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 856:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 85a:	06 c0       	rjmp	.+12     	; 0x868 <__vector_21+0x3c0>
            else f_Hz = ((1)/(16e-6))/(256);       
 85c:	84 ef       	ldi	r24, 0xF4	; 244
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 864:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            itoa(f_Hz*(freq-1), data, 10);
 868:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <freq>
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	01 97       	sbiw	r24, 0x01	; 1
 870:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 874:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 878:	4a e0       	ldi	r20, 0x0A	; 10
 87a:	be 01       	movw	r22, r28
 87c:	6f 5f       	subi	r22, 0xFF	; 255
 87e:	7f 4f       	sbci	r23, 0xFF	; 255
 880:	fc 01       	movw	r30, r24
 882:	e2 9f       	mul	r30, r18
 884:	c0 01       	movw	r24, r0
 886:	e3 9f       	mul	r30, r19
 888:	90 0d       	add	r25, r0
 88a:	f2 9f       	mul	r31, r18
 88c:	90 0d       	add	r25, r0
 88e:	11 24       	eor	r1, r1
 890:	0e 94 2a 06 	call	0xc54	; 0xc54 <__itoa_ncheck>
            uart_puts("f = ");
 894:	89 e4       	ldi	r24, 0x49	; 73
 896:	91 e0       	ldi	r25, 0x01	; 1
 898:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            uart_puts(data);
 89c:	ce 01       	movw	r24, r28
 89e:	01 96       	adiw	r24, 0x01	; 1
 8a0:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            uart_puts(" Hz");
 8a4:	8c e9       	ldi	r24, 0x9C	; 156
 8a6:	91 e0       	ldi	r25, 0x01	; 1
 8a8:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            lcd_gotoxy(10, 1);
 8ac:	61 e0       	ldi	r22, 0x01	; 1
 8ae:	8a e0       	ldi	r24, 0x0A	; 10
 8b0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_puts("    ");
 8b4:	8e e4       	ldi	r24, 0x4E	; 78
 8b6:	91 e0       	ldi	r25, 0x01	; 1
 8b8:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
            lcd_gotoxy(10, 1);
 8bc:	61 e0       	ldi	r22, 0x01	; 1
 8be:	8a e0       	ldi	r24, 0x0A	; 10
 8c0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_puts(data);
 8c4:	ce 01       	movw	r24, r28
 8c6:	01 96       	adiw	r24, 0x01	; 1
 8c8:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
 8cc:	80 c0       	rjmp	.+256    	; 0x9ce <__stack+0xcf>
            
        }
        else if (ADC_value > 533 && ADC_value < 543)    //0
 8ce:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_value>
 8d2:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_value+0x1>
 8d6:	86 31       	cpi	r24, 0x16	; 22
 8d8:	92 40       	sbci	r25, 0x02	; 2
 8da:	78 f0       	brcs	.+30     	; 0x8fa <__vector_21+0x452>
 8dc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_value>
 8e0:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_value+0x1>
 8e4:	8f 31       	cpi	r24, 0x1F	; 31
 8e6:	92 40       	sbci	r25, 0x02	; 2
 8e8:	40 f4       	brcc	.+16     	; 0x8fa <__vector_21+0x452>
        {
            btn_pressed = 11;
 8ea:	8b e0       	ldi	r24, 0x0B	; 11
 8ec:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <btn_pressed>
            uart_puts("Output off");
 8f0:	8f e6       	ldi	r24, 0x6F	; 111
 8f2:	91 e0       	ldi	r25, 0x01	; 1
 8f4:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
 8f8:	6a c0       	rjmp	.+212    	; 0x9ce <__stack+0xcf>
        }
        else if (ADC_value > 557 && ADC_value < 567)    //#
 8fa:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_value>
 8fe:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_value+0x1>
 902:	8e 32       	cpi	r24, 0x2E	; 46
 904:	92 40       	sbci	r25, 0x02	; 2
 906:	08 f4       	brcc	.+2      	; 0x90a <__stack+0xb>
 908:	57 c0       	rjmp	.+174    	; 0x9b8 <__stack+0xb9>
 90a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_value>
 90e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_value+0x1>
 912:	87 33       	cpi	r24, 0x37	; 55
 914:	92 40       	sbci	r25, 0x02	; 2
 916:	08 f0       	brcs	.+2      	; 0x91a <__stack+0x1b>
 918:	4f c0       	rjmp	.+158    	; 0x9b8 <__stack+0xb9>
        {
            btn_pressed_next = 12;
 91a:	8c e0       	ldi	r24, 0x0C	; 12
 91c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <btn_pressed_next>
            uart_puts("f++");
 920:	8a e7       	ldi	r24, 0x7A	; 122
 922:	91 e0       	ldi	r25, 0x01	; 1
 924:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            uart_puts("\r\n"); 
 928:	8c e6       	ldi	r24, 0x6C	; 108
 92a:	91 e0       	ldi	r25, 0x01	; 1
 92c:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            if (btn_pressed == 3) f_Hz = (((1)/(16e-6))/(258))/2;
 930:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <btn_pressed>
 934:	83 30       	cpi	r24, 0x03	; 3
 936:	39 f4       	brne	.+14     	; 0x946 <__stack+0x47>
 938:	89 e7       	ldi	r24, 0x79	; 121
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 940:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 944:	06 c0       	rjmp	.+12     	; 0x952 <__stack+0x53>
            else f_Hz = ((1)/(16e-6))/(256);  
 946:	84 ef       	ldi	r24, 0xF4	; 244
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 94e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            itoa(f_Hz*(freq+1), data, 10);
 952:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <freq>
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	01 96       	adiw	r24, 0x01	; 1
 95a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 95e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 962:	4a e0       	ldi	r20, 0x0A	; 10
 964:	be 01       	movw	r22, r28
 966:	6f 5f       	subi	r22, 0xFF	; 255
 968:	7f 4f       	sbci	r23, 0xFF	; 255
 96a:	fc 01       	movw	r30, r24
 96c:	e2 9f       	mul	r30, r18
 96e:	c0 01       	movw	r24, r0
 970:	e3 9f       	mul	r30, r19
 972:	90 0d       	add	r25, r0
 974:	f2 9f       	mul	r31, r18
 976:	90 0d       	add	r25, r0
 978:	11 24       	eor	r1, r1
 97a:	0e 94 2a 06 	call	0xc54	; 0xc54 <__itoa_ncheck>
            uart_puts("f = ");
 97e:	89 e4       	ldi	r24, 0x49	; 73
 980:	91 e0       	ldi	r25, 0x01	; 1
 982:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            uart_puts(data);
 986:	ce 01       	movw	r24, r28
 988:	01 96       	adiw	r24, 0x01	; 1
 98a:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            uart_puts(" Hz");
 98e:	8c e9       	ldi	r24, 0x9C	; 156
 990:	91 e0       	ldi	r25, 0x01	; 1
 992:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
            lcd_gotoxy(10, 1);
 996:	61 e0       	ldi	r22, 0x01	; 1
 998:	8a e0       	ldi	r24, 0x0A	; 10
 99a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_puts("    ");
 99e:	8e e4       	ldi	r24, 0x4E	; 78
 9a0:	91 e0       	ldi	r25, 0x01	; 1
 9a2:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
            lcd_gotoxy(10, 1);
 9a6:	61 e0       	ldi	r22, 0x01	; 1
 9a8:	8a e0       	ldi	r24, 0x0A	; 10
 9aa:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
            lcd_puts(data);
 9ae:	ce 01       	movw	r24, r28
 9b0:	01 96       	adiw	r24, 0x01	; 1
 9b2:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
 9b6:	0b c0       	rjmp	.+22     	; 0x9ce <__stack+0xcf>
        }
        else if (ADC_value > 1017)
 9b8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_value>
 9bc:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_value+0x1>
 9c0:	8a 3f       	cpi	r24, 0xFA	; 250
 9c2:	93 40       	sbci	r25, 0x03	; 3
 9c4:	20 f0       	brcs	.+8      	; 0x9ce <__stack+0xcf>
        {
            uart_puts("\r\n"); 
 9c6:	8c e6       	ldi	r24, 0x6C	; 108
 9c8:	91 e0       	ldi	r25, 0x01	; 1
 9ca:	0e 94 1b 06 	call	0xc36	; 0xc36 <uart_puts>
        }
        
        
    }

    if (ADC_value > 1017)
 9ce:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_value>
 9d2:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_value+0x1>
 9d6:	8a 3f       	cpi	r24, 0xFA	; 250
 9d8:	93 40       	sbci	r25, 0x03	; 3
 9da:	28 f0       	brcs	.+10     	; 0x9e6 <__stack+0xe7>
    {
        freq_control++;
 9dc:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <freq_control>
 9e0:	8f 5f       	subi	r24, 0xFF	; 255
 9e2:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <freq_control>
    }

    if (btn_pressed != 11 && control == 0)
 9e6:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <btn_pressed>
 9ea:	8b 30       	cpi	r24, 0x0B	; 11
 9ec:	b1 f0       	breq	.+44     	; 0xa1a <__stack+0x11b>
 9ee:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <control>
 9f2:	81 11       	cpse	r24, r1
 9f4:	12 c0       	rjmp	.+36     	; 0xa1a <__stack+0x11b>
    {
        lcd_gotoxy(0, 0);
 9f6:	60 e0       	ldi	r22, 0x00	; 0
 9f8:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
        lcd_puts("Pressed:   Exit0");
 9fc:	8e e7       	ldi	r24, 0x7E	; 126
 9fe:	91 e0       	ldi	r25, 0x01	; 1
 a00:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        lcd_gotoxy(0, 1);
 a04:	61 e0       	ldi	r22, 0x01	; 1
 a06:	80 e0       	ldi	r24, 0x00	; 0
 a08:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
        lcd_puts("*f-- #f++     Hz");
 a0c:	8f e8       	ldi	r24, 0x8F	; 143
 a0e:	91 e0       	ldi	r25, 0x01	; 1
 a10:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        control = 1;
 a14:	81 e0       	ldi	r24, 0x01	; 1
 a16:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <control>
    }
    //*
    if (btn_pressed_next == 10)
 a1a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <btn_pressed_next>
 a1e:	8a 30       	cpi	r24, 0x0A	; 10
 a20:	a9 f4       	brne	.+42     	; 0xa4c <__stack+0x14d>
    {
        btn_pressed_next = btn_pressed;
 a22:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <btn_pressed>
 a26:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <btn_pressed_next>
        if (freq_next == freq && freq > 1)
 a2a:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <freq_next>
 a2e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <freq>
 a32:	98 13       	cpse	r25, r24
 a34:	57 c0       	rjmp	.+174    	; 0xae4 <__stack+0x1e5>
 a36:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <freq>
 a3a:	82 30       	cpi	r24, 0x02	; 2
 a3c:	08 f4       	brcc	.+2      	; 0xa40 <__stack+0x141>
 a3e:	52 c0       	rjmp	.+164    	; 0xae4 <__stack+0x1e5>
        {
            freq_next = freq - 1;
 a40:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <freq>
 a44:	81 50       	subi	r24, 0x01	; 1
 a46:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <freq_next>
 a4a:	4c c0       	rjmp	.+152    	; 0xae4 <__stack+0x1e5>
        }
    }
    // 0 pressed
    else if (btn_pressed == 11)
 a4c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <btn_pressed>
 a50:	8b 30       	cpi	r24, 0x0B	; 11
 a52:	a9 f5       	brne	.+106    	; 0xabe <__stack+0x1bf>
    {
        lcd_gotoxy(0, 0);
 a54:	60 e0       	ldi	r22, 0x00	; 0
 a56:	80 e0       	ldi	r24, 0x00	; 0
 a58:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
        lcd_puts(" Choose signal: ");
 a5c:	80 ea       	ldi	r24, 0xA0	; 160
 a5e:	91 e0       	ldi	r25, 0x01	; 1
 a60:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        lcd_gotoxy(0, 1);
 a64:	61 e0       	ldi	r22, 0x01	; 1
 a66:	80 e0       	ldi	r24, 0x00	; 0
 a68:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
        lcd_puts(" 1");
 a6c:	81 eb       	ldi	r24, 0xB1	; 177
 a6e:	91 e0       	ldi	r25, 0x01	; 1
 a70:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        lcd_putc(0);
 a74:	80 e0       	ldi	r24, 0x00	; 0
 a76:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_puts("  2");
 a7a:	87 e3       	ldi	r24, 0x37	; 55
 a7c:	91 e0       	ldi	r25, 0x01	; 1
 a7e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        lcd_putc(1);
 a82:	81 e0       	ldi	r24, 0x01	; 1
 a84:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_puts("  3");
 a88:	8b e3       	ldi	r24, 0x3B	; 59
 a8a:	91 e0       	ldi	r25, 0x01	; 1
 a8c:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        lcd_putc(2);
 a90:	82 e0       	ldi	r24, 0x02	; 2
 a92:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_puts("  4");
 a96:	8f e3       	ldi	r24, 0x3F	; 63
 a98:	91 e0       	ldi	r25, 0x01	; 1
 a9a:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
        lcd_putc(3);
 a9e:	83 e0       	ldi	r24, 0x03	; 3
 aa0:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_putc(' ');
 aa4:	80 e2       	ldi	r24, 0x20	; 32
 aa6:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    
        value = 0;
 aaa:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <value>
        control = 0;
 aae:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <control>
        freq_next = 1;
 ab2:	81 e0       	ldi	r24, 0x01	; 1
 ab4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <freq_next>
        freq = 1;
 ab8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <freq>
 abc:	13 c0       	rjmp	.+38     	; 0xae4 <__stack+0x1e5>
        
    } 
    
    //#
    else if (btn_pressed_next == 12)
 abe:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <btn_pressed_next>
 ac2:	8c 30       	cpi	r24, 0x0C	; 12
 ac4:	79 f4       	brne	.+30     	; 0xae4 <__stack+0x1e5>
    {
        btn_pressed_next = btn_pressed;
 ac6:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <btn_pressed>
 aca:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <btn_pressed_next>
        if (freq_next == freq)
 ace:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <freq_next>
 ad2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <freq>
 ad6:	98 13       	cpse	r25, r24
 ad8:	05 c0       	rjmp	.+10     	; 0xae4 <__stack+0x1e5>
        {
            freq_next = freq + 1;
 ada:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <freq>
 ade:	8f 5f       	subi	r24, 0xFF	; 255
 ae0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <freq_next>
        }
    }
    
    if (freq_control >= 10)
 ae4:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <freq_control>
 ae8:	8a 30       	cpi	r24, 0x0A	; 10
 aea:	30 f0       	brcs	.+12     	; 0xaf8 <__stack+0x1f9>
    {
        freq = freq_next;
 aec:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <freq_next>
 af0:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <freq>
        freq_control = 0;
 af4:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <freq_control>
    }
 af8:	2a 96       	adiw	r28, 0x0a	; 10
 afa:	0f b6       	in	r0, 0x3f	; 63
 afc:	f8 94       	cli
 afe:	de bf       	out	0x3e, r29	; 62
 b00:	0f be       	out	0x3f, r0	; 63
 b02:	cd bf       	out	0x3d, r28	; 61
 b04:	df 91       	pop	r29
 b06:	cf 91       	pop	r28
 b08:	ff 91       	pop	r31
 b0a:	ef 91       	pop	r30
 b0c:	bf 91       	pop	r27
 b0e:	af 91       	pop	r26
 b10:	9f 91       	pop	r25
 b12:	8f 91       	pop	r24
 b14:	7f 91       	pop	r23
 b16:	6f 91       	pop	r22
 b18:	5f 91       	pop	r21
 b1a:	4f 91       	pop	r20
 b1c:	3f 91       	pop	r19
 b1e:	2f 91       	pop	r18
 b20:	0f 90       	pop	r0
 b22:	0f be       	out	0x3f, r0	; 63
 b24:	0f 90       	pop	r0
 b26:	1f 90       	pop	r1
 b28:	18 95       	reti

00000b2a <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 b2a:	1f 92       	push	r1
 b2c:	0f 92       	push	r0
 b2e:	0f b6       	in	r0, 0x3f	; 63
 b30:	0f 92       	push	r0
 b32:	11 24       	eor	r1, r1
 b34:	2f 93       	push	r18
 b36:	8f 93       	push	r24
 b38:	9f 93       	push	r25
 b3a:	ef 93       	push	r30
 b3c:	ff 93       	push	r31
 b3e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 b42:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 b46:	8c 71       	andi	r24, 0x1C	; 28
 b48:	e0 91 be 02 	lds	r30, 0x02BE	; 0x8002be <UART_RxHead>
 b4c:	ef 5f       	subi	r30, 0xFF	; 255
 b4e:	ef 73       	andi	r30, 0x3F	; 63
 b50:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <UART_RxTail>
 b54:	e9 17       	cp	r30, r25
 b56:	39 f0       	breq	.+14     	; 0xb66 <__vector_18+0x3c>
 b58:	e0 93 be 02 	sts	0x02BE, r30	; 0x8002be <UART_RxHead>
 b5c:	f0 e0       	ldi	r31, 0x00	; 0
 b5e:	ef 53       	subi	r30, 0x3F	; 63
 b60:	fd 4f       	sbci	r31, 0xFD	; 253
 b62:	20 83       	st	Z, r18
 b64:	01 c0       	rjmp	.+2      	; 0xb68 <__vector_18+0x3e>
 b66:	82 e0       	ldi	r24, 0x02	; 2
 b68:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <UART_LastRxError>
 b6c:	89 2b       	or	r24, r25
 b6e:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <UART_LastRxError>
 b72:	ff 91       	pop	r31
 b74:	ef 91       	pop	r30
 b76:	9f 91       	pop	r25
 b78:	8f 91       	pop	r24
 b7a:	2f 91       	pop	r18
 b7c:	0f 90       	pop	r0
 b7e:	0f be       	out	0x3f, r0	; 63
 b80:	0f 90       	pop	r0
 b82:	1f 90       	pop	r1
 b84:	18 95       	reti

00000b86 <__vector_19>:
 b86:	1f 92       	push	r1
 b88:	0f 92       	push	r0
 b8a:	0f b6       	in	r0, 0x3f	; 63
 b8c:	0f 92       	push	r0
 b8e:	11 24       	eor	r1, r1
 b90:	8f 93       	push	r24
 b92:	9f 93       	push	r25
 b94:	ef 93       	push	r30
 b96:	ff 93       	push	r31
 b98:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <UART_TxHead>
 b9c:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <UART_TxTail>
 ba0:	98 17       	cp	r25, r24
 ba2:	69 f0       	breq	.+26     	; 0xbbe <__vector_19+0x38>
 ba4:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <UART_TxTail>
 ba8:	ef 5f       	subi	r30, 0xFF	; 255
 baa:	ef 73       	andi	r30, 0x3F	; 63
 bac:	e0 93 bf 02 	sts	0x02BF, r30	; 0x8002bf <UART_TxTail>
 bb0:	f0 e0       	ldi	r31, 0x00	; 0
 bb2:	ef 5f       	subi	r30, 0xFF	; 255
 bb4:	fc 4f       	sbci	r31, 0xFC	; 252
 bb6:	80 81       	ld	r24, Z
 bb8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <__vector_19+0x42>
 bbe:	e1 ec       	ldi	r30, 0xC1	; 193
 bc0:	f0 e0       	ldi	r31, 0x00	; 0
 bc2:	80 81       	ld	r24, Z
 bc4:	8f 7d       	andi	r24, 0xDF	; 223
 bc6:	80 83       	st	Z, r24
 bc8:	ff 91       	pop	r31
 bca:	ef 91       	pop	r30
 bcc:	9f 91       	pop	r25
 bce:	8f 91       	pop	r24
 bd0:	0f 90       	pop	r0
 bd2:	0f be       	out	0x3f, r0	; 63
 bd4:	0f 90       	pop	r0
 bd6:	1f 90       	pop	r1
 bd8:	18 95       	reti

00000bda <uart_init>:
 bda:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <UART_TxHead>
 bde:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <UART_TxTail>
 be2:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <UART_RxHead>
 be6:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <UART_RxTail>
 bea:	99 23       	and	r25, r25
 bec:	1c f4       	brge	.+6      	; 0xbf4 <uart_init+0x1a>
 bee:	22 e0       	ldi	r18, 0x02	; 2
 bf0:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 bf4:	90 78       	andi	r25, 0x80	; 128
 bf6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 bfa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 bfe:	88 e9       	ldi	r24, 0x98	; 152
 c00:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 c04:	86 e0       	ldi	r24, 0x06	; 6
 c06:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 c0a:	08 95       	ret

00000c0c <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 c0c:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <UART_TxHead>
 c10:	2f 5f       	subi	r18, 0xFF	; 255
 c12:	2f 73       	andi	r18, 0x3F	; 63

    while (tmphead == UART_TxTail)
 c14:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <UART_TxTail>
 c18:	29 17       	cp	r18, r25
 c1a:	e1 f3       	breq	.-8      	; 0xc14 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 c1c:	e2 2f       	mov	r30, r18
 c1e:	f0 e0       	ldi	r31, 0x00	; 0
 c20:	ef 5f       	subi	r30, 0xFF	; 255
 c22:	fc 4f       	sbci	r31, 0xFC	; 252
 c24:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 c26:	20 93 c0 02 	sts	0x02C0, r18	; 0x8002c0 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 c2a:	e1 ec       	ldi	r30, 0xC1	; 193
 c2c:	f0 e0       	ldi	r31, 0x00	; 0
 c2e:	80 81       	ld	r24, Z
 c30:	80 62       	ori	r24, 0x20	; 32
 c32:	80 83       	st	Z, r24
 c34:	08 95       	ret

00000c36 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 c36:	cf 93       	push	r28
 c38:	df 93       	push	r29
 c3a:	ec 01       	movw	r28, r24
    while (*s)
 c3c:	88 81       	ld	r24, Y
 c3e:	88 23       	and	r24, r24
 c40:	31 f0       	breq	.+12     	; 0xc4e <uart_puts+0x18>
 c42:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 c44:	0e 94 06 06 	call	0xc0c	; 0xc0c <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 c48:	89 91       	ld	r24, Y+
 c4a:	81 11       	cpse	r24, r1
 c4c:	fb cf       	rjmp	.-10     	; 0xc44 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 c4e:	df 91       	pop	r29
 c50:	cf 91       	pop	r28
 c52:	08 95       	ret

00000c54 <__itoa_ncheck>:
 c54:	bb 27       	eor	r27, r27
 c56:	4a 30       	cpi	r20, 0x0A	; 10
 c58:	31 f4       	brne	.+12     	; 0xc66 <__itoa_ncheck+0x12>
 c5a:	99 23       	and	r25, r25
 c5c:	22 f4       	brpl	.+8      	; 0xc66 <__itoa_ncheck+0x12>
 c5e:	bd e2       	ldi	r27, 0x2D	; 45
 c60:	90 95       	com	r25
 c62:	81 95       	neg	r24
 c64:	9f 4f       	sbci	r25, 0xFF	; 255
 c66:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <__utoa_common>

00000c6a <__utoa_ncheck>:
 c6a:	bb 27       	eor	r27, r27

00000c6c <__utoa_common>:
 c6c:	fb 01       	movw	r30, r22
 c6e:	55 27       	eor	r21, r21
 c70:	aa 27       	eor	r26, r26
 c72:	88 0f       	add	r24, r24
 c74:	99 1f       	adc	r25, r25
 c76:	aa 1f       	adc	r26, r26
 c78:	a4 17       	cp	r26, r20
 c7a:	10 f0       	brcs	.+4      	; 0xc80 <__utoa_common+0x14>
 c7c:	a4 1b       	sub	r26, r20
 c7e:	83 95       	inc	r24
 c80:	50 51       	subi	r21, 0x10	; 16
 c82:	b9 f7       	brne	.-18     	; 0xc72 <__utoa_common+0x6>
 c84:	a0 5d       	subi	r26, 0xD0	; 208
 c86:	aa 33       	cpi	r26, 0x3A	; 58
 c88:	08 f0       	brcs	.+2      	; 0xc8c <__utoa_common+0x20>
 c8a:	a9 5d       	subi	r26, 0xD9	; 217
 c8c:	a1 93       	st	Z+, r26
 c8e:	00 97       	sbiw	r24, 0x00	; 0
 c90:	79 f7       	brne	.-34     	; 0xc70 <__utoa_common+0x4>
 c92:	b1 11       	cpse	r27, r1
 c94:	b1 93       	st	Z+, r27
 c96:	11 92       	st	Z+, r1
 c98:	cb 01       	movw	r24, r22
 c9a:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <strrev>

00000c9e <strrev>:
 c9e:	dc 01       	movw	r26, r24
 ca0:	fc 01       	movw	r30, r24
 ca2:	67 2f       	mov	r22, r23
 ca4:	71 91       	ld	r23, Z+
 ca6:	77 23       	and	r23, r23
 ca8:	e1 f7       	brne	.-8      	; 0xca2 <strrev+0x4>
 caa:	32 97       	sbiw	r30, 0x02	; 2
 cac:	04 c0       	rjmp	.+8      	; 0xcb6 <strrev+0x18>
 cae:	7c 91       	ld	r23, X
 cb0:	6d 93       	st	X+, r22
 cb2:	70 83       	st	Z, r23
 cb4:	62 91       	ld	r22, -Z
 cb6:	ae 17       	cp	r26, r30
 cb8:	bf 07       	cpc	r27, r31
 cba:	c8 f3       	brcs	.-14     	; 0xcae <strrev+0x10>
 cbc:	08 95       	ret

00000cbe <_exit>:
 cbe:	f8 94       	cli

00000cc0 <__stop_program>:
 cc0:	ff cf       	rjmp	.-2      	; 0xcc0 <__stop_program>
