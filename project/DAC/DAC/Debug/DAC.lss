
DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000168  00800100  00000808  0000089c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000808  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  00800268  00800268  00000a04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019a9  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b97  00000000  00000000  00002575  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d87  00000000  00000000  0000310c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00003e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ae  00000000  00000000  000041f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cc9  00000000  00000000  000048a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000556f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 38 03 	jmp	0x670	; 0x670 <__vector_18>
  4c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 36       	cpi	r26, 0x68	; 104
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 e6       	ldi	r26, 0x68	; 104
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3f       	cpi	r26, 0xF1	; 241
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 06 01 	call	0x20c	; 0x20c <main>
  9e:	0c 94 02 04 	jmp	0x804	; 0x804 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  be:	29 9a       	sbi	0x05, 1	; 5
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <toggle_e+0x4>
  c6:	00 00       	nop
  c8:	29 98       	cbi	0x05, 1	; 5
  ca:	08 95       	ret

000000cc <lcd_write>:
  cc:	cf 93       	push	r28
  ce:	c8 2f       	mov	r28, r24
  d0:	66 23       	and	r22, r22
  d2:	11 f0       	breq	.+4      	; 0xd8 <lcd_write+0xc>
  d4:	28 9a       	sbi	0x05, 0	; 5
  d6:	01 c0       	rjmp	.+2      	; 0xda <lcd_write+0xe>
  d8:	28 98       	cbi	0x05, 0	; 5
  da:	3c 9a       	sbi	0x07, 4	; 7
  dc:	39 9a       	sbi	0x07, 1	; 7
  de:	3a 9a       	sbi	0x07, 2	; 7
  e0:	3b 9a       	sbi	0x07, 3	; 7
  e2:	43 98       	cbi	0x08, 3	; 8
  e4:	42 98       	cbi	0x08, 2	; 8
  e6:	41 98       	cbi	0x08, 1	; 8
  e8:	44 98       	cbi	0x08, 4	; 8
  ea:	cc 23       	and	r28, r28
  ec:	0c f4       	brge	.+2      	; 0xf0 <lcd_write+0x24>
  ee:	43 9a       	sbi	0x08, 3	; 8
  f0:	c6 fd       	sbrc	r28, 6
  f2:	42 9a       	sbi	0x08, 2	; 8
  f4:	c5 fd       	sbrc	r28, 5
  f6:	41 9a       	sbi	0x08, 1	; 8
  f8:	c4 fd       	sbrc	r28, 4
  fa:	44 9a       	sbi	0x08, 4	; 8
  fc:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 100:	43 98       	cbi	0x08, 3	; 8
 102:	42 98       	cbi	0x08, 2	; 8
 104:	41 98       	cbi	0x08, 1	; 8
 106:	44 98       	cbi	0x08, 4	; 8
 108:	c3 fd       	sbrc	r28, 3
 10a:	43 9a       	sbi	0x08, 3	; 8
 10c:	c2 fd       	sbrc	r28, 2
 10e:	42 9a       	sbi	0x08, 2	; 8
 110:	c1 fd       	sbrc	r28, 1
 112:	41 9a       	sbi	0x08, 1	; 8
 114:	c0 fd       	sbrc	r28, 0
 116:	44 9a       	sbi	0x08, 4	; 8
 118:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 11c:	44 9a       	sbi	0x08, 4	; 8
 11e:	41 9a       	sbi	0x08, 1	; 8
 120:	42 9a       	sbi	0x08, 2	; 8
 122:	43 9a       	sbi	0x08, 3	; 8
 124:	87 eb       	ldi	r24, 0xB7	; 183
 126:	9b e0       	ldi	r25, 0x0B	; 11
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_write+0x5c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_write+0x62>
 12e:	00 00       	nop
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <lcd_command>:
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 13a:	08 95       	ret

0000013c <lcd_data>:
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 142:	08 95       	ret

00000144 <lcd_gotoxy>:
 144:	61 11       	cpse	r22, r1
 146:	04 c0       	rjmp	.+8      	; 0x150 <lcd_gotoxy+0xc>
 148:	80 58       	subi	r24, 0x80	; 128
 14a:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 14e:	08 95       	ret
 150:	80 54       	subi	r24, 0x40	; 64
 152:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 156:	08 95       	ret

00000158 <lcd_clrscr>:
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 15e:	08 95       	ret

00000160 <lcd_putc>:
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 166:	08 95       	ret

00000168 <lcd_puts>:
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ec 01       	movw	r28, r24
 16e:	21 96       	adiw	r28, 0x01	; 1
 170:	fc 01       	movw	r30, r24
 172:	80 81       	ld	r24, Z
 174:	88 23       	and	r24, r24
 176:	29 f0       	breq	.+10     	; 0x182 <lcd_puts+0x1a>
 178:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
 17c:	89 91       	ld	r24, Y+
 17e:	81 11       	cpse	r24, r1
 180:	fb cf       	rjmp	.-10     	; 0x178 <lcd_puts+0x10>
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 18c:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 18e:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 190:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 192:	3c 9a       	sbi	0x07, 4	; 7
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 194:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 196:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 198:	3b 9a       	sbi	0x07, 3	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	99 ef       	ldi	r25, 0xF9	; 249
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_init+0x16>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_init+0x1c>
 1a4:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 1a6:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 1a8:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_toggle();
 1aa:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1ae:	8f e1       	ldi	r24, 0x1F	; 31
 1b0:	9e e4       	ldi	r25, 0x4E	; 78
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x2a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_init+0x30>
 1b8:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1ba:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_init+0x3a>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_init+0x40>
 1c8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1ca:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_init+0x4a>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_init+0x50>
 1d8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1da:	44 98       	cbi	0x08, 4	; 8
    lcd_e_toggle();
 1dc:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_init+0x5c>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_init+0x62>
 1ea:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1ec:	88 e2       	ldi	r24, 0x28	; 40
 1ee:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1f2:	88 e0       	ldi	r24, 0x08	; 8
 1f4:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1f8:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 202:	8c 2f       	mov	r24, r28
 204:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
}/* lcd_init */
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <main>:
};

int main(void)
{
    //Configure outputs for 8-bit R-2R DAC
    GPIO_config_output(&DDRB, pin0);
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	84 e2       	ldi	r24, 0x24	; 36
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, pin1);
 216:	63 e0       	ldi	r22, 0x03	; 3
 218:	84 e2       	ldi	r24, 0x24	; 36
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin2);
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	8a e2       	ldi	r24, 0x2A	; 42
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin3);
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	8a e2       	ldi	r24, 0x2A	; 42
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin4);
 234:	64 e0       	ldi	r22, 0x04	; 4
 236:	8a e2       	ldi	r24, 0x2A	; 42
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin5);
 23e:	65 e0       	ldi	r22, 0x05	; 5
 240:	8a e2       	ldi	r24, 0x2A	; 42
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin6);
 248:	66 e0       	ldi	r22, 0x06	; 6
 24a:	8a e2       	ldi	r24, 0x2A	; 42
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin7);
 252:	67 e0       	ldi	r22, 0x07	; 7
 254:	8a e2       	ldi	r24, 0x2A	; 42
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 25c:	8c e0       	ldi	r24, 0x0C	; 12
 25e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_init>
    
    // Set pointer to beginning of CGRAM memory
    lcd_command(1 << LCD_CGRAM);
 262:	80 e4       	ldi	r24, 0x40	; 64
 264:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
 268:	c0 e0       	ldi	r28, 0x00	; 0
 26a:	d1 e0       	ldi	r29, 0x01	; 1
 26c:	00 e2       	ldi	r16, 0x20	; 32
 26e:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t i = 0; i < 8*4; i++)
    {
        // Store all new chars to memory line by line
        lcd_data(customChar[i]);
 270:	89 91       	ld	r24, Y+
 272:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_data>
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
    
    // Set pointer to beginning of CGRAM memory
    lcd_command(1 << LCD_CGRAM);
    for (uint8_t i = 0; i < 8*4; i++)
 276:	c0 17       	cp	r28, r16
 278:	d1 07       	cpc	r29, r17
 27a:	d1 f7       	brne	.-12     	; 0x270 <main+0x64>
    {
        // Store all new chars to memory line by line
        lcd_data(customChar[i]);
    }
    // Set DDRAM address
    lcd_command(1 << LCD_DDRAM);
 27c:	80 e8       	ldi	r24, 0x80	; 128
 27e:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_command>
    
    //Put signal options at LCD display
    lcd_gotoxy(1, 0); 
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
    lcd_puts("Choose signal:");
 28a:	8c e2       	ldi	r24, 0x2C	; 44
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_gotoxy(1, 1); 
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
    lcd_puts("1");
 29a:	8b e3       	ldi	r24, 0x3B	; 59
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(0);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    lcd_puts("  2");
 2a8:	8d e3       	ldi	r24, 0x3D	; 61
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(1);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    lcd_puts("  3");
 2b6:	81 e4       	ldi	r24, 0x41	; 65
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(2);
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    lcd_puts("  4");
 2c4:	85 e4       	ldi	r24, 0x45	; 69
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    lcd_putc(3);
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
    
    
    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
    ADMUX |= (1 << REFS0);
 2d2:	ec e7       	ldi	r30, 0x7C	; 124
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	80 64       	ori	r24, 0x40	; 64
 2da:	80 83       	st	Z, r24
    ADMUX &= ~(1 << REFS1);
 2dc:	80 81       	ld	r24, Z
 2de:	8f 77       	andi	r24, 0x7F	; 127
 2e0:	80 83       	st	Z, r24
    
    // Set input channel to ADC0
    ADMUX &= ~(1 << MUX3);
 2e2:	80 81       	ld	r24, Z
 2e4:	87 7f       	andi	r24, 0xF7	; 247
 2e6:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX2);
 2e8:	80 81       	ld	r24, Z
 2ea:	8b 7f       	andi	r24, 0xFB	; 251
 2ec:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX1);
 2ee:	80 81       	ld	r24, Z
 2f0:	8d 7f       	andi	r24, 0xFD	; 253
 2f2:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX0);
 2f4:	80 81       	ld	r24, Z
 2f6:	8e 7f       	andi	r24, 0xFE	; 254
 2f8:	80 83       	st	Z, r24
    
    // Enable ADC module
    ADCSRA |= (1 << ADEN);
 2fa:	ea e7       	ldi	r30, 0x7A	; 122
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	80 68       	ori	r24, 0x80	; 128
 302:	80 83       	st	Z, r24
    
    // Enable conversion complete interrupt
    ADCSRA |= (1 << ADIE);
 304:	80 81       	ld	r24, Z
 306:	88 60       	ori	r24, 0x08	; 8
 308:	80 83       	st	Z, r24
    
    // Set clock prescaler to 128
    ADCSRA |= (1 << ADPS2);
 30a:	80 81       	ld	r24, Z
 30c:	84 60       	ori	r24, 0x04	; 4
 30e:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS1);
 310:	80 81       	ld	r24, Z
 312:	82 60       	ori	r24, 0x02	; 2
 314:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS0);
 316:	80 81       	ld	r24, Z
 318:	81 60       	ori	r24, 0x01	; 1
 31a:	80 83       	st	Z, r24
    
    
    
    /* Configuration of 8-bit Timer/Counter0 */
    TIM0_overflow_16us();
 31c:	85 b5       	in	r24, 0x25	; 37
 31e:	89 7f       	andi	r24, 0xF9	; 249
 320:	85 bd       	out	0x25, r24	; 37
 322:	85 b5       	in	r24, 0x25	; 37
 324:	81 60       	ori	r24, 0x01	; 1
 326:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 328:	ee e6       	ldi	r30, 0x6E	; 110
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	81 60       	ori	r24, 0x01	; 1
 330:	80 83       	st	Z, r24
    
    /* Configuration of 8-bit Timer/Counter1 */
    TIM1_overflow_33ms();
 332:	e1 e8       	ldi	r30, 0x81	; 129
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	8a 7f       	andi	r24, 0xFA	; 250
 33a:	80 83       	st	Z, r24
 33c:	80 81       	ld	r24, Z
 33e:	82 60       	ori	r24, 0x02	; 2
 340:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 342:	ef e6       	ldi	r30, 0x6F	; 111
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	81 60       	ori	r24, 0x01	; 1
 34a:	80 83       	st	Z, r24
    
    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 34c:	87 e6       	ldi	r24, 0x67	; 103
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 90 03 	call	0x720	; 0x720 <uart_init>
    
    // Enables interrupts by setting the global interrupt mask
    sei();
 354:	78 94       	sei
 356:	ff cf       	rjmp	.-2      	; 0x356 <main+0x14a>

00000358 <__vector_16>:
    return 0;
}

/* Interrupt service routine ----------------------------------------*/
ISR(TIMER0_OVF_vect)
{    
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	2f 93       	push	r18
 364:	8f 93       	push	r24
 366:	9f 93       	push	r25
 368:	ef 93       	push	r30
 36a:	ff 93       	push	r31
	static int16_t number_of_overflows = 0;
    static uint8_t value = 0;
    static uint8_t lookup_number = 0;
    
    //Writing values to pins, where is the R-2R connected
    PORTD = value & 0b11111100;
 36c:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <value.1995>
 370:	8c 7f       	andi	r24, 0xFC	; 252
 372:	8b b9       	out	0x0b, r24	; 11
    PORTB = (value & 0b00000011) << 2;
 374:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <value.1995>
 378:	83 70       	andi	r24, 0x03	; 3
 37a:	88 0f       	add	r24, r24
 37c:	88 0f       	add	r24, r24
 37e:	85 b9       	out	0x05, r24	; 5
     
    
    //Sine function
    if (btn_pressed == 1)
 380:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <btn_pressed>
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	69 f4       	brne	.+26     	; 0x3a2 <__vector_16+0x4a>
    {
        value = sine_wave[lookup_number];
 388:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <lookup_number.1996>
 38c:	e9 2f       	mov	r30, r25
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	e8 59       	subi	r30, 0x98	; 152
 392:	fe 4f       	sbci	r31, 0xFE	; 254
 394:	20 81       	ld	r18, Z
 396:	20 93 6b 02 	sts	0x026B, r18	; 0x80026b <value.1995>
        lookup_number++;
 39a:	9f 5f       	subi	r25, 0xFF	; 255
 39c:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <lookup_number.1996>
 3a0:	35 c0       	rjmp	.+106    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
    }
    
    //Square function
    if (btn_pressed == 2)
 3a2:	82 30       	cpi	r24, 0x02	; 2
 3a4:	a9 f4       	brne	.+42     	; 0x3d0 <__vector_16+0x78>
    {
        if (number_of_overflows < 2)
 3a6:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__data_end>
 3aa:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <__data_end+0x1>
 3ae:	82 30       	cpi	r24, 0x02	; 2
 3b0:	91 05       	cpc	r25, r1
 3b2:	24 f4       	brge	.+8      	; 0x3bc <__vector_16+0x64>
        {
            value = 0b11111111;
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <value.1995>
 3ba:	2f c0       	rjmp	.+94     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
        }
        else if (number_of_overflows < 4)
 3bc:	04 97       	sbiw	r24, 0x04	; 4
 3be:	1c f4       	brge	.+6      	; 0x3c6 <__vector_16+0x6e>
        {
            value = 0;
 3c0:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <value.1995>
 3c4:	2a c0       	rjmp	.+84     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
        }
        else
        {
            number_of_overflows = 0;
 3c6:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__data_end+0x1>
 3ca:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
 3ce:	25 c0       	rjmp	.+74     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
        }
    }
    
    //Triangle function
    if (btn_pressed == 3)
 3d0:	83 30       	cpi	r24, 0x03	; 3
 3d2:	e1 f4       	brne	.+56     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
    {
        if (number_of_overflows < 256)
 3d4:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__data_end>
 3d8:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <__data_end+0x1>
 3dc:	8f 3f       	cpi	r24, 0xFF	; 255
 3de:	91 05       	cpc	r25, r1
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <__vector_16+0x8c>
 3e2:	34 f4       	brge	.+12     	; 0x3f0 <__vector_16+0x98>
        {        
        value++;
 3e4:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <value.1995>
 3e8:	8f 5f       	subi	r24, 0xFF	; 255
 3ea:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <value.1995>
 3ee:	15 c0       	rjmp	.+42     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
        } 
        else if (number_of_overflows < 511)
 3f0:	8f 3f       	cpi	r24, 0xFF	; 255
 3f2:	91 40       	sbci	r25, 0x01	; 1
 3f4:	34 f4       	brge	.+12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
        {
            value--;
 3f6:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <value.1995>
 3fa:	81 50       	subi	r24, 0x01	; 1
 3fc:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <value.1995>
 400:	0c c0       	rjmp	.+24     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
        }
        else 
        {
            number_of_overflows = 0;
 402:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__data_end+0x1>
 406:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
 40a:	07 c0       	rjmp	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
            //value = 0;
        }
    }
      
    //Ramp function    
    if (btn_pressed == 4)
 40c:	84 30       	cpi	r24, 0x04	; 4
 40e:	29 f4       	brne	.+10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
    {
        value++;
 410:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <value.1995>
 414:	8f 5f       	subi	r24, 0xFF	; 255
 416:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <value.1995>
    }
            
    number_of_overflows++;
 41a:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__data_end>
 41e:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <__data_end+0x1>
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <__data_end+0x1>
 428:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <__data_end>
        
        /*uart_puts(value_string);
        uart_puts("\r\n");*/
   
    }  
}
 42c:	ff 91       	pop	r31
 42e:	ef 91       	pop	r30
 430:	9f 91       	pop	r25
 432:	8f 91       	pop	r24
 434:	2f 91       	pop	r18
 436:	0f 90       	pop	r0
 438:	0f be       	out	0x3f, r0	; 63
 43a:	0f 90       	pop	r0
 43c:	1f 90       	pop	r1
 43e:	18 95       	reti

00000440 <__vector_13>:
/* -------------------------------------------------------------------*/
ISR(TIMER1_OVF_vect)
{
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
 44a:	8f 93       	push	r24
 44c:	ef 93       	push	r30
 44e:	ff 93       	push	r31
    // Start ADC conversion
    ADCSRA |= (1 << ADSC);
 450:	ea e7       	ldi	r30, 0x7A	; 122
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	80 64       	ori	r24, 0x40	; 64
 458:	80 83       	st	Z, r24
}
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	8f 91       	pop	r24
 460:	0f 90       	pop	r0
 462:	0f be       	out	0x3f, r0	; 63
 464:	0f 90       	pop	r0
 466:	1f 90       	pop	r1
 468:	18 95       	reti

0000046a <__vector_21>:
/**
 * ISR starts when ADC completes the conversion. Display value on LCD
 * and send it to UART.
 */
ISR(ADC_vect)
{
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	0f 93       	push	r16
 476:	1f 93       	push	r17
 478:	2f 93       	push	r18
 47a:	3f 93       	push	r19
 47c:	4f 93       	push	r20
 47e:	5f 93       	push	r21
 480:	6f 93       	push	r22
 482:	7f 93       	push	r23
 484:	8f 93       	push	r24
 486:	9f 93       	push	r25
 488:	af 93       	push	r26
 48a:	bf 93       	push	r27
 48c:	ef 93       	push	r30
 48e:	ff 93       	push	r31
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62
 498:	2a 97       	sbiw	r28, 0x0a	; 10
 49a:	de bf       	out	0x3e, r29	; 62
 49c:	cd bf       	out	0x3d, r28	; 61
    uint16_t value = ADC;    // Copy ADC result to 16-bit variable
 49e:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 4a2:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    char lcd_string[10] = "          ";
 4a6:	8a e0       	ldi	r24, 0x0A	; 10
 4a8:	e1 e2       	ldi	r30, 0x21	; 33
 4aa:	f1 e0       	ldi	r31, 0x01	; 1
 4ac:	de 01       	movw	r26, r28
 4ae:	11 96       	adiw	r26, 0x01	; 1
 4b0:	01 90       	ld	r0, Z+
 4b2:	0d 92       	st	X+, r0
 4b4:	8a 95       	dec	r24
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <__vector_21+0x46>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4b8:	4a e0       	ldi	r20, 0x0A	; 10
 4ba:	be 01       	movw	r22, r28
 4bc:	6f 5f       	subi	r22, 0xFF	; 255
 4be:	7f 4f       	sbci	r23, 0xFF	; 255
 4c0:	c8 01       	movw	r24, r16
 4c2:	0e 94 cd 03 	call	0x79a	; 0x79a <__itoa_ncheck>
    //lcd_gotoxy(1, 1);
    //lcd_puts(lcd_string);

    //send data through UART
    itoa(value, lcd_string, 10);    // Convert to string
    uart_puts("ADC value: ");
 4c6:	89 e4       	ldi	r24, 0x49	; 73
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	0e 94 be 03 	call	0x77c	; 0x77c <uart_puts>
    uart_puts(lcd_string);
 4ce:	ce 01       	movw	r24, r28
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	0e 94 be 03 	call	0x77c	; 0x77c <uart_puts>
    uart_puts("\r\n");
 4d6:	85 e5       	ldi	r24, 0x55	; 85
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	0e 94 be 03 	call	0x77c	; 0x77c <uart_puts>
    
    //key
    if (value < 1017)
 4de:	09 3f       	cpi	r16, 0xF9	; 249
 4e0:	83 e0       	ldi	r24, 0x03	; 3
 4e2:	18 07       	cpc	r17, r24
 4e4:	40 f4       	brcc	.+16     	; 0x4f6 <__vector_21+0x8c>
    {
        lcd_gotoxy(0, 0);
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
        lcd_puts("Pressed:       ");
 4ee:	88 e5       	ldi	r24, 0x58	; 88
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
    }
    
    lcd_gotoxy(9, 0);
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	89 e0       	ldi	r24, 0x09	; 9
 4fa:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
    
    if (value > 1017)
 4fe:	0a 3f       	cpi	r16, 0xFA	; 250
 500:	83 e0       	ldi	r24, 0x03	; 3
 502:	18 07       	cpc	r17, r24
 504:	08 f0       	brcs	.+2      	; 0x508 <__vector_21+0x9e>
 506:	99 c0       	rjmp	.+306    	; 0x63a <__vector_21+0x1d0>
    {
        //nothing pressed
    }
    else if (value < 5)
 508:	05 30       	cpi	r16, 0x05	; 5
 50a:	11 05       	cpc	r17, r1
 50c:	50 f4       	brcc	.+20     	; 0x522 <__vector_21+0xb8>
    {
        lcd_putc('1');
 50e:	81 e3       	ldi	r24, 0x31	; 49
 510:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_putc(0);
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        btn_pressed = 1;
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <btn_pressed>
 520:	8c c0       	rjmp	.+280    	; 0x63a <__vector_21+0x1d0>
    }
    else if (value > 97 && value < 107)
 522:	c8 01       	movw	r24, r16
 524:	82 56       	subi	r24, 0x62	; 98
 526:	91 09       	sbc	r25, r1
 528:	09 97       	sbiw	r24, 0x09	; 9
 52a:	50 f4       	brcc	.+20     	; 0x540 <__vector_21+0xd6>
    {
        lcd_putc('2');
 52c:	82 e3       	ldi	r24, 0x32	; 50
 52e:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_putc(1);
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        btn_pressed = 2;
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <btn_pressed>
 53e:	7d c0       	rjmp	.+250    	; 0x63a <__vector_21+0x1d0>
    }
    else if (value > 180 && value < 190)
 540:	c8 01       	movw	r24, r16
 542:	85 5b       	subi	r24, 0xB5	; 181
 544:	91 09       	sbc	r25, r1
 546:	09 97       	sbiw	r24, 0x09	; 9
 548:	50 f4       	brcc	.+20     	; 0x55e <__vector_21+0xf4>
    {
        lcd_putc('3');
 54a:	83 e3       	ldi	r24, 0x33	; 51
 54c:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_putc(2);
 550:	82 e0       	ldi	r24, 0x02	; 2
 552:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        btn_pressed = 3;
 556:	83 e0       	ldi	r24, 0x03	; 3
 558:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <btn_pressed>
 55c:	6e c0       	rjmp	.+220    	; 0x63a <__vector_21+0x1d0>
    }
    else if (value > 250 && value < 260)
 55e:	c8 01       	movw	r24, r16
 560:	8b 5f       	subi	r24, 0xFB	; 251
 562:	91 09       	sbc	r25, r1
 564:	09 97       	sbiw	r24, 0x09	; 9
 566:	50 f4       	brcc	.+20     	; 0x57c <__vector_21+0x112>
    {
        lcd_putc('4');
 568:	84 e3       	ldi	r24, 0x34	; 52
 56a:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        lcd_putc(3);
 56e:	83 e0       	ldi	r24, 0x03	; 3
 570:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        btn_pressed = 4;
 574:	84 e0       	ldi	r24, 0x04	; 4
 576:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <btn_pressed>
 57a:	5f c0       	rjmp	.+190    	; 0x63a <__vector_21+0x1d0>
    }
    else if (value > 309 && value < 319)
 57c:	c8 01       	movw	r24, r16
 57e:	86 53       	subi	r24, 0x36	; 54
 580:	91 40       	sbci	r25, 0x01	; 1
 582:	09 97       	sbiw	r24, 0x09	; 9
 584:	38 f4       	brcc	.+14     	; 0x594 <__vector_21+0x12a>
    {
        lcd_putc('5');
 586:	85 e3       	ldi	r24, 0x35	; 53
 588:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        btn_pressed = 5;
 58c:	85 e0       	ldi	r24, 0x05	; 5
 58e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <btn_pressed>
 592:	53 c0       	rjmp	.+166    	; 0x63a <__vector_21+0x1d0>
    }
    else if (value > 360 && value < 370)
 594:	c8 01       	movw	r24, r16
 596:	89 56       	subi	r24, 0x69	; 105
 598:	91 40       	sbci	r25, 0x01	; 1
 59a:	09 97       	sbiw	r24, 0x09	; 9
 59c:	38 f4       	brcc	.+14     	; 0x5ac <__vector_21+0x142>
    {
        lcd_putc('6');
 59e:	86 e3       	ldi	r24, 0x36	; 54
 5a0:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        btn_pressed = 6;
 5a4:	86 e0       	ldi	r24, 0x06	; 6
 5a6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <btn_pressed>
 5aa:	47 c0       	rjmp	.+142    	; 0x63a <__vector_21+0x1d0>
    }
    else if (value > 404 && value < 414)
 5ac:	c8 01       	movw	r24, r16
 5ae:	85 59       	subi	r24, 0x95	; 149
 5b0:	91 40       	sbci	r25, 0x01	; 1
 5b2:	09 97       	sbiw	r24, 0x09	; 9
 5b4:	38 f4       	brcc	.+14     	; 0x5c4 <__vector_21+0x15a>
    {
        lcd_putc('7');
 5b6:	87 e3       	ldi	r24, 0x37	; 55
 5b8:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        btn_pressed = 7;
 5bc:	87 e0       	ldi	r24, 0x07	; 7
 5be:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <btn_pressed>
 5c2:	3b c0       	rjmp	.+118    	; 0x63a <__vector_21+0x1d0>
    }
    else if (value > 442 && value < 452)
 5c4:	c8 01       	movw	r24, r16
 5c6:	8b 5b       	subi	r24, 0xBB	; 187
 5c8:	91 40       	sbci	r25, 0x01	; 1
 5ca:	09 97       	sbiw	r24, 0x09	; 9
 5cc:	38 f4       	brcc	.+14     	; 0x5dc <__vector_21+0x172>
    {
        lcd_putc('8');
 5ce:	88 e3       	ldi	r24, 0x38	; 56
 5d0:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        btn_pressed = 8;
 5d4:	88 e0       	ldi	r24, 0x08	; 8
 5d6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <btn_pressed>
 5da:	2f c0       	rjmp	.+94     	; 0x63a <__vector_21+0x1d0>
    }
    else if (value > 476 && value < 486)
 5dc:	c8 01       	movw	r24, r16
 5de:	8d 5d       	subi	r24, 0xDD	; 221
 5e0:	91 40       	sbci	r25, 0x01	; 1
 5e2:	09 97       	sbiw	r24, 0x09	; 9
 5e4:	38 f4       	brcc	.+14     	; 0x5f4 <__vector_21+0x18a>
    {
        lcd_putc('9');
 5e6:	89 e3       	ldi	r24, 0x39	; 57
 5e8:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        btn_pressed = 9;
 5ec:	89 e0       	ldi	r24, 0x09	; 9
 5ee:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <btn_pressed>
 5f2:	23 c0       	rjmp	.+70     	; 0x63a <__vector_21+0x1d0>
    }
    else if (value > 506 && value < 516)
 5f4:	c8 01       	movw	r24, r16
 5f6:	8b 5f       	subi	r24, 0xFB	; 251
 5f8:	91 40       	sbci	r25, 0x01	; 1
 5fa:	09 97       	sbiw	r24, 0x09	; 9
 5fc:	38 f4       	brcc	.+14     	; 0x60c <__vector_21+0x1a2>
    {
        lcd_putc('*');
 5fe:	8a e2       	ldi	r24, 0x2A	; 42
 600:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        btn_pressed = 10;
 604:	8a e0       	ldi	r24, 0x0A	; 10
 606:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <btn_pressed>
 60a:	17 c0       	rjmp	.+46     	; 0x63a <__vector_21+0x1d0>
    }
    else if (value > 533 && value < 543)
 60c:	c8 01       	movw	r24, r16
 60e:	86 51       	subi	r24, 0x16	; 22
 610:	92 40       	sbci	r25, 0x02	; 2
 612:	09 97       	sbiw	r24, 0x09	; 9
 614:	38 f4       	brcc	.+14     	; 0x624 <__vector_21+0x1ba>
    {
        lcd_putc('0');
 616:	80 e3       	ldi	r24, 0x30	; 48
 618:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        btn_pressed = 11;
 61c:	8b e0       	ldi	r24, 0x0B	; 11
 61e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <btn_pressed>
 622:	0b c0       	rjmp	.+22     	; 0x63a <__vector_21+0x1d0>
    }
    else if (value > 557 && value < 567)
 624:	0e 52       	subi	r16, 0x2E	; 46
 626:	12 40       	sbci	r17, 0x02	; 2
 628:	09 30       	cpi	r16, 0x09	; 9
 62a:	11 05       	cpc	r17, r1
 62c:	30 f4       	brcc	.+12     	; 0x63a <__vector_21+0x1d0>
    {
        lcd_putc('#');
 62e:	83 e2       	ldi	r24, 0x23	; 35
 630:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
        btn_pressed = 12;
 634:	8c e0       	ldi	r24, 0x0C	; 12
 636:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <btn_pressed>
    }
    
 63a:	2a 96       	adiw	r28, 0x0a	; 10
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	f8 94       	cli
 640:	de bf       	out	0x3e, r29	; 62
 642:	0f be       	out	0x3f, r0	; 63
 644:	cd bf       	out	0x3d, r28	; 61
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	ff 91       	pop	r31
 64c:	ef 91       	pop	r30
 64e:	bf 91       	pop	r27
 650:	af 91       	pop	r26
 652:	9f 91       	pop	r25
 654:	8f 91       	pop	r24
 656:	7f 91       	pop	r23
 658:	6f 91       	pop	r22
 65a:	5f 91       	pop	r21
 65c:	4f 91       	pop	r20
 65e:	3f 91       	pop	r19
 660:	2f 91       	pop	r18
 662:	1f 91       	pop	r17
 664:	0f 91       	pop	r16
 666:	0f 90       	pop	r0
 668:	0f be       	out	0x3f, r0	; 63
 66a:	0f 90       	pop	r0
 66c:	1f 90       	pop	r1
 66e:	18 95       	reti

00000670 <__vector_18>:
 670:	1f 92       	push	r1
 672:	0f 92       	push	r0
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	0f 92       	push	r0
 678:	11 24       	eor	r1, r1
 67a:	2f 93       	push	r18
 67c:	8f 93       	push	r24
 67e:	9f 93       	push	r25
 680:	ef 93       	push	r30
 682:	ff 93       	push	r31
 684:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 688:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 68c:	8c 71       	andi	r24, 0x1C	; 28
 68e:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <UART_RxHead>
 692:	ef 5f       	subi	r30, 0xFF	; 255
 694:	ef 73       	andi	r30, 0x3F	; 63
 696:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <UART_RxTail>
 69a:	e9 17       	cp	r30, r25
 69c:	39 f0       	breq	.+14     	; 0x6ac <__vector_18+0x3c>
 69e:	e0 93 6e 02 	sts	0x026E, r30	; 0x80026e <UART_RxHead>
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	ef 58       	subi	r30, 0x8F	; 143
 6a6:	fd 4f       	sbci	r31, 0xFD	; 253
 6a8:	20 83       	st	Z, r18
 6aa:	01 c0       	rjmp	.+2      	; 0x6ae <__vector_18+0x3e>
 6ac:	82 e0       	ldi	r24, 0x02	; 2
 6ae:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <UART_LastRxError>
 6b2:	89 2b       	or	r24, r25
 6b4:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <UART_LastRxError>
 6b8:	ff 91       	pop	r31
 6ba:	ef 91       	pop	r30
 6bc:	9f 91       	pop	r25
 6be:	8f 91       	pop	r24
 6c0:	2f 91       	pop	r18
 6c2:	0f 90       	pop	r0
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	0f 90       	pop	r0
 6c8:	1f 90       	pop	r1
 6ca:	18 95       	reti

000006cc <__vector_19>:
 6cc:	1f 92       	push	r1
 6ce:	0f 92       	push	r0
 6d0:	0f b6       	in	r0, 0x3f	; 63
 6d2:	0f 92       	push	r0
 6d4:	11 24       	eor	r1, r1
 6d6:	8f 93       	push	r24
 6d8:	9f 93       	push	r25
 6da:	ef 93       	push	r30
 6dc:	ff 93       	push	r31
 6de:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <UART_TxHead>
 6e2:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <UART_TxTail>
 6e6:	98 17       	cp	r25, r24
 6e8:	69 f0       	breq	.+26     	; 0x704 <__vector_19+0x38>
 6ea:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <UART_TxTail>
 6ee:	ef 5f       	subi	r30, 0xFF	; 255
 6f0:	ef 73       	andi	r30, 0x3F	; 63
 6f2:	e0 93 6f 02 	sts	0x026F, r30	; 0x80026f <UART_TxTail>
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	ef 54       	subi	r30, 0x4F	; 79
 6fa:	fd 4f       	sbci	r31, 0xFD	; 253
 6fc:	80 81       	ld	r24, Z
 6fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 702:	05 c0       	rjmp	.+10     	; 0x70e <__vector_19+0x42>
 704:	e1 ec       	ldi	r30, 0xC1	; 193
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	80 81       	ld	r24, Z
 70a:	8f 7d       	andi	r24, 0xDF	; 223
 70c:	80 83       	st	Z, r24
 70e:	ff 91       	pop	r31
 710:	ef 91       	pop	r30
 712:	9f 91       	pop	r25
 714:	8f 91       	pop	r24
 716:	0f 90       	pop	r0
 718:	0f be       	out	0x3f, r0	; 63
 71a:	0f 90       	pop	r0
 71c:	1f 90       	pop	r1
 71e:	18 95       	reti

00000720 <uart_init>:
 720:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <UART_TxHead>
 724:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <UART_TxTail>
 728:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <UART_RxHead>
 72c:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <UART_RxTail>
 730:	99 23       	and	r25, r25
 732:	1c f4       	brge	.+6      	; 0x73a <uart_init+0x1a>
 734:	22 e0       	ldi	r18, 0x02	; 2
 736:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 73a:	90 78       	andi	r25, 0x80	; 128
 73c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 740:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 744:	88 e9       	ldi	r24, 0x98	; 152
 746:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 74a:	86 e0       	ldi	r24, 0x06	; 6
 74c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 750:	08 95       	ret

00000752 <uart_putc>:
 752:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <UART_TxHead>
 756:	2f 5f       	subi	r18, 0xFF	; 255
 758:	2f 73       	andi	r18, 0x3F	; 63
 75a:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <UART_TxTail>
 75e:	29 17       	cp	r18, r25
 760:	e1 f3       	breq	.-8      	; 0x75a <uart_putc+0x8>
 762:	e2 2f       	mov	r30, r18
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	ef 54       	subi	r30, 0x4F	; 79
 768:	fd 4f       	sbci	r31, 0xFD	; 253
 76a:	80 83       	st	Z, r24
 76c:	20 93 70 02 	sts	0x0270, r18	; 0x800270 <UART_TxHead>
 770:	e1 ec       	ldi	r30, 0xC1	; 193
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	80 81       	ld	r24, Z
 776:	80 62       	ori	r24, 0x20	; 32
 778:	80 83       	st	Z, r24
 77a:	08 95       	ret

0000077c <uart_puts>:
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	ec 01       	movw	r28, r24
 782:	88 81       	ld	r24, Y
 784:	88 23       	and	r24, r24
 786:	31 f0       	breq	.+12     	; 0x794 <uart_puts+0x18>
 788:	21 96       	adiw	r28, 0x01	; 1
 78a:	0e 94 a9 03 	call	0x752	; 0x752 <uart_putc>
 78e:	89 91       	ld	r24, Y+
 790:	81 11       	cpse	r24, r1
 792:	fb cf       	rjmp	.-10     	; 0x78a <uart_puts+0xe>
 794:	df 91       	pop	r29
 796:	cf 91       	pop	r28
 798:	08 95       	ret

0000079a <__itoa_ncheck>:
 79a:	bb 27       	eor	r27, r27
 79c:	4a 30       	cpi	r20, 0x0A	; 10
 79e:	31 f4       	brne	.+12     	; 0x7ac <__itoa_ncheck+0x12>
 7a0:	99 23       	and	r25, r25
 7a2:	22 f4       	brpl	.+8      	; 0x7ac <__itoa_ncheck+0x12>
 7a4:	bd e2       	ldi	r27, 0x2D	; 45
 7a6:	90 95       	com	r25
 7a8:	81 95       	neg	r24
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__utoa_common>

000007b0 <__utoa_ncheck>:
 7b0:	bb 27       	eor	r27, r27

000007b2 <__utoa_common>:
 7b2:	fb 01       	movw	r30, r22
 7b4:	55 27       	eor	r21, r21
 7b6:	aa 27       	eor	r26, r26
 7b8:	88 0f       	add	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	aa 1f       	adc	r26, r26
 7be:	a4 17       	cp	r26, r20
 7c0:	10 f0       	brcs	.+4      	; 0x7c6 <__utoa_common+0x14>
 7c2:	a4 1b       	sub	r26, r20
 7c4:	83 95       	inc	r24
 7c6:	50 51       	subi	r21, 0x10	; 16
 7c8:	b9 f7       	brne	.-18     	; 0x7b8 <__utoa_common+0x6>
 7ca:	a0 5d       	subi	r26, 0xD0	; 208
 7cc:	aa 33       	cpi	r26, 0x3A	; 58
 7ce:	08 f0       	brcs	.+2      	; 0x7d2 <__utoa_common+0x20>
 7d0:	a9 5d       	subi	r26, 0xD9	; 217
 7d2:	a1 93       	st	Z+, r26
 7d4:	00 97       	sbiw	r24, 0x00	; 0
 7d6:	79 f7       	brne	.-34     	; 0x7b6 <__utoa_common+0x4>
 7d8:	b1 11       	cpse	r27, r1
 7da:	b1 93       	st	Z+, r27
 7dc:	11 92       	st	Z+, r1
 7de:	cb 01       	movw	r24, r22
 7e0:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <strrev>

000007e4 <strrev>:
 7e4:	dc 01       	movw	r26, r24
 7e6:	fc 01       	movw	r30, r24
 7e8:	67 2f       	mov	r22, r23
 7ea:	71 91       	ld	r23, Z+
 7ec:	77 23       	and	r23, r23
 7ee:	e1 f7       	brne	.-8      	; 0x7e8 <strrev+0x4>
 7f0:	32 97       	sbiw	r30, 0x02	; 2
 7f2:	04 c0       	rjmp	.+8      	; 0x7fc <strrev+0x18>
 7f4:	7c 91       	ld	r23, X
 7f6:	6d 93       	st	X+, r22
 7f8:	70 83       	st	Z, r23
 7fa:	62 91       	ld	r22, -Z
 7fc:	ae 17       	cp	r26, r30
 7fe:	bf 07       	cpc	r27, r31
 800:	c8 f3       	brcs	.-14     	; 0x7f4 <strrev+0x10>
 802:	08 95       	ret

00000804 <_exit>:
 804:	f8 94       	cli

00000806 <__stop_program>:
 806:	ff cf       	rjmp	.-2      	; 0x806 <__stop_program>
