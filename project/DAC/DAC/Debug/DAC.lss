
DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000376  0000040a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000376  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000087  00800106  00800106  00000410  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014a9  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9f  00000000  00000000  00001a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000984  00000000  00000000  00002510  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  00002e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000646  00000000  00000000  00003150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a74  00000000  00000000  00003796  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000420a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_18>
  4c:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 38       	cpi	r26, 0x8D	; 141
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <main>
  9e:	0c 94 b9 01 	jmp	0x372	; 0x372 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  be:	29 9a       	sbi	0x05, 1	; 5
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <toggle_e+0x4>
  c6:	00 00       	nop
  c8:	29 98       	cbi	0x05, 1	; 5
  ca:	08 95       	ret

000000cc <lcd_write>:
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	d8 2f       	mov	r29, r24
  d2:	66 23       	and	r22, r22
  d4:	11 f0       	breq	.+4      	; 0xda <lcd_write+0xe>
  d6:	28 9a       	sbi	0x05, 0	; 5
  d8:	01 c0       	rjmp	.+2      	; 0xdc <lcd_write+0x10>
  da:	28 98       	cbi	0x05, 0	; 5
  dc:	87 b1       	in	r24, 0x07	; 7
  de:	8f 60       	ori	r24, 0x0F	; 15
  e0:	87 b9       	out	0x07, r24	; 7
  e2:	c8 b1       	in	r28, 0x08	; 8
  e4:	c0 7f       	andi	r28, 0xF0	; 240
  e6:	8d 2f       	mov	r24, r29
  e8:	82 95       	swap	r24
  ea:	8f 70       	andi	r24, 0x0F	; 15
  ec:	8c 2b       	or	r24, r28
  ee:	88 b9       	out	0x08, r24	; 8
  f0:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
  f4:	df 70       	andi	r29, 0x0F	; 15
  f6:	dc 2b       	or	r29, r28
  f8:	d8 b9       	out	0x08, r29	; 8
  fa:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
  fe:	cf 60       	ori	r28, 0x0F	; 15
 100:	c8 b9       	out	0x08, r28	; 8
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <lcd_command>:
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 10e:	08 95       	ret

00000110 <lcd_gotoxy>:
 110:	61 11       	cpse	r22, r1
 112:	04 c0       	rjmp	.+8      	; 0x11c <lcd_gotoxy+0xc>
 114:	80 58       	subi	r24, 0x80	; 128
 116:	0e 94 84 00 	call	0x108	; 0x108 <lcd_command>
 11a:	08 95       	ret
 11c:	80 54       	subi	r24, 0x40	; 64
 11e:	0e 94 84 00 	call	0x108	; 0x108 <lcd_command>
 122:	08 95       	ret

00000124 <lcd_clrscr>:
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 84 00 	call	0x108	; 0x108 <lcd_command>
 12a:	08 95       	ret

0000012c <lcd_putc>:
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_write>
 132:	08 95       	ret

00000134 <lcd_puts>:
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ec 01       	movw	r28, r24
 13a:	21 96       	adiw	r28, 0x01	; 1
 13c:	fc 01       	movw	r30, r24
 13e:	80 81       	ld	r24, Z
 140:	88 23       	and	r24, r24
 142:	29 f0       	breq	.+10     	; 0x14e <lcd_puts+0x1a>
 144:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_putc>
 148:	89 91       	ld	r24, Y+
 14a:	81 11       	cpse	r24, r1
 14c:	fb cf       	rjmp	.-10     	; 0x144 <lcd_puts+0x10>
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 154:	cf 93       	push	r28
 156:	c8 2f       	mov	r28, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT ) &&
      (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 158:	87 b1       	in	r24, 0x07	; 7
 15a:	8f 60       	ori	r24, 0x0F	; 15
 15c:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 15e:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 160:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 162:	21 9a       	sbi	0x04, 1	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	99 ef       	ldi	r25, 0xF9	; 249
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_init+0x14>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_init+0x1a>
 16e:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 170:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 172:	40 9a       	sbi	0x08, 0	; 8
    lcd_e_toggle();
 174:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 178:	8f e1       	ldi	r24, 0x1F	; 31
 17a:	9e e4       	ldi	r25, 0x4E	; 78
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcd_init+0x28>
 180:	00 c0       	rjmp	.+0      	; 0x182 <lcd_init+0x2e>
 182:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 184:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_init+0x38>
 190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_init+0x3e>
 192:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 194:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_init+0x48>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcd_init+0x4e>
 1a2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1a4:	40 98       	cbi	0x08, 0	; 8
    lcd_e_toggle();
 1a6:	0e 94 5f 00 	call	0xbe	; 0xbe <toggle_e>
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_init+0x5a>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_init+0x60>
 1b4:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1b6:	88 e2       	ldi	r24, 0x28	; 40
 1b8:	0e 94 84 00 	call	0x108	; 0x108 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1bc:	88 e0       	ldi	r24, 0x08	; 8
 1be:	0e 94 84 00 	call	0x108	; 0x108 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1c2:	0e 94 92 00 	call	0x124	; 0x124 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	0e 94 84 00 	call	0x108	; 0x108 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1cc:	8c 2f       	mov	r24, r28
 1ce:	0e 94 84 00 	call	0x108	; 0x108 <lcd_command>
}/* lcd_init */
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <main>:
#endif

int main(void)
{
    //Configure outputs for 8-bit R-2R DAC
    GPIO_config_output(&DDRB, pin0);
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	84 e2       	ldi	r24, 0x24	; 36
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, pin1);
 1e0:	63 e0       	ldi	r22, 0x03	; 3
 1e2:	84 e2       	ldi	r24, 0x24	; 36
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin2);
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	8a e2       	ldi	r24, 0x2A	; 42
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin3);
 1f4:	63 e0       	ldi	r22, 0x03	; 3
 1f6:	8a e2       	ldi	r24, 0x2A	; 42
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin4);
 1fe:	64 e0       	ldi	r22, 0x04	; 4
 200:	8a e2       	ldi	r24, 0x2A	; 42
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin5);
 208:	65 e0       	ldi	r22, 0x05	; 5
 20a:	8a e2       	ldi	r24, 0x2A	; 42
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin6);
 212:	66 e0       	ldi	r22, 0x06	; 6
 214:	8a e2       	ldi	r24, 0x2A	; 42
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin7);
 21c:	67 e0       	ldi	r22, 0x07	; 7
 21e:	8a e2       	ldi	r24, 0x2A	; 42
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 226:	8c e0       	ldi	r24, 0x0C	; 12
 228:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_init>
    lcd_gotoxy(1, 0); 
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 88 00 	call	0x110	; 0x110 <lcd_gotoxy>
    lcd_puts("val:");
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_puts>
    
    /* Configuration of 8-bit Timer/Counter0 */
    TIM0_overflow_16us();
 23c:	85 b5       	in	r24, 0x25	; 37
 23e:	89 7f       	andi	r24, 0xF9	; 249
 240:	85 bd       	out	0x25, r24	; 37
 242:	85 b5       	in	r24, 0x25	; 37
 244:	81 60       	ori	r24, 0x01	; 1
 246:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 248:	ee e6       	ldi	r30, 0x6E	; 110
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	81 60       	ori	r24, 0x01	; 1
 250:	80 83       	st	Z, r24
    
    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 252:	87 e6       	ldi	r24, 0x67	; 103
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 a0 01 	call	0x340	; 0x340 <uart_init>
    
    // Enables interrupts by setting the global interrupt mask
    sei();
 25a:	78 94       	sei
 25c:	ff cf       	rjmp	.-2      	; 0x25c <main+0x86>

0000025e <__vector_16>:
    return 0;
}

/* Interrupt service routine ----------------------------------------*/
ISR(TIMER0_OVF_vect)
{    
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
	static int16_t number_of_overflows = 0;
    static uint8_t value = 0;
    char value_string[2] = "  ";      // String for converting numbers by itoa()
    
    //Writing values to pins, where is the R-2R connected
    PORTD = value & 0b11111100;
 26c:	1b b8       	out	0x0b, r1	; 11
    PORTB = (value & 0b00000011) << 2;
 26e:	15 b8       	out	0x05, r1	; 5
    else
    {
        number_of_overflows = 0;
    }*/
       
    number_of_overflows++;
 270:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 274:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 27e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
        uart_puts(value_string);
        uart_puts("\r\n");
    }*/
    
    
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <__vector_18>:
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	2f 93       	push	r18
 29c:	8f 93       	push	r24
 29e:	9f 93       	push	r25
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
 2a4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 2a8:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2ac:	8c 71       	andi	r24, 0x1C	; 28
 2ae:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <UART_RxHead>
 2b2:	ef 5f       	subi	r30, 0xFF	; 255
 2b4:	ef 73       	andi	r30, 0x3F	; 63
 2b6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <UART_RxTail>
 2ba:	e9 17       	cp	r30, r25
 2bc:	39 f0       	breq	.+14     	; 0x2cc <__vector_18+0x3c>
 2be:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <UART_RxHead>
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	e3 5f       	subi	r30, 0xF3	; 243
 2c6:	fe 4f       	sbci	r31, 0xFE	; 254
 2c8:	20 83       	st	Z, r18
 2ca:	01 c0       	rjmp	.+2      	; 0x2ce <__vector_18+0x3e>
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <UART_LastRxError>
 2d2:	89 2b       	or	r24, r25
 2d4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <UART_LastRxError>
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	2f 91       	pop	r18
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <__vector_19>:
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
 2fe:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <UART_TxHead>
 302:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <UART_TxTail>
 306:	98 17       	cp	r25, r24
 308:	69 f0       	breq	.+26     	; 0x324 <__vector_19+0x38>
 30a:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <UART_TxTail>
 30e:	ef 5f       	subi	r30, 0xFF	; 255
 310:	ef 73       	andi	r30, 0x3F	; 63
 312:	e0 93 0b 01 	sts	0x010B, r30	; 0x80010b <UART_TxTail>
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	e3 5b       	subi	r30, 0xB3	; 179
 31a:	fe 4f       	sbci	r31, 0xFE	; 254
 31c:	80 81       	ld	r24, Z
 31e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 322:	05 c0       	rjmp	.+10     	; 0x32e <__vector_19+0x42>
 324:	e1 ec       	ldi	r30, 0xC1	; 193
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	8f 7d       	andi	r24, 0xDF	; 223
 32c:	80 83       	st	Z, r24
 32e:	ff 91       	pop	r31
 330:	ef 91       	pop	r30
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <uart_init>:
 340:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <UART_TxHead>
 344:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <UART_TxTail>
 348:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <UART_RxHead>
 34c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <UART_RxTail>
 350:	99 23       	and	r25, r25
 352:	1c f4       	brge	.+6      	; 0x35a <uart_init+0x1a>
 354:	22 e0       	ldi	r18, 0x02	; 2
 356:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 35a:	90 78       	andi	r25, 0x80	; 128
 35c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 360:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 364:	88 e9       	ldi	r24, 0x98	; 152
 366:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 36a:	86 e0       	ldi	r24, 0x06	; 6
 36c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 370:	08 95       	ret

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>
