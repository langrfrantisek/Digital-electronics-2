
DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000234  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000088  00800100  00800100  000002a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cde  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000805  00000000  00000000  000010be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c3  00000000  00000000  000018c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00001e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000506  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000041b  00000000  00000000  00002542  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000295d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_18>
  4c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 38       	cpi	r26, 0x88	; 136
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  88:	0c 94 18 01 	jmp	0x230	; 0x230 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <GPIO_config_output>:
#include "gpio.h"

/* Function definitions ----------------------------------------------*/
void GPIO_config_output(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  90:	fc 01       	movw	r30, r24
  92:	40 81       	ld	r20, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <GPIO_config_output+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <GPIO_config_output+0xa>
  a2:	24 2b       	or	r18, r20
  a4:	20 83       	st	Z, r18
  a6:	08 95       	ret

000000a8 <main>:
#include "gpio.h"           // GPIO library for AVR-GCC
#include "timer.h"          // Timer library for AVR-GCC

int main(void)
{
    GPIO_config_output(&DDRD, pin0);
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	8a e2       	ldi	r24, 0x2A	; 42
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin1);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	8a e2       	ldi	r24, 0x2A	; 42
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin2);
  bc:	62 e0       	ldi	r22, 0x02	; 2
  be:	8a e2       	ldi	r24, 0x2A	; 42
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin3);
  c6:	63 e0       	ldi	r22, 0x03	; 3
  c8:	8a e2       	ldi	r24, 0x2A	; 42
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin4);
  d0:	64 e0       	ldi	r22, 0x04	; 4
  d2:	8a e2       	ldi	r24, 0x2A	; 42
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin5);
  da:	65 e0       	ldi	r22, 0x05	; 5
  dc:	8a e2       	ldi	r24, 0x2A	; 42
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin6);
  e4:	66 e0       	ldi	r22, 0x06	; 6
  e6:	8a e2       	ldi	r24, 0x2A	; 42
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_config_output(&DDRD, pin7);
  ee:	67 e0       	ldi	r22, 0x07	; 7
  f0:	8a e2       	ldi	r24, 0x2A	; 42
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    
    /* Configuration of 8-bit Timer/Counter0 */
    TIM0_overflow_1ms();
  f8:	85 b5       	in	r24, 0x25	; 37
  fa:	8b 7f       	andi	r24, 0xFB	; 251
  fc:	85 bd       	out	0x25, r24	; 37
  fe:	85 b5       	in	r24, 0x25	; 37
 100:	83 60       	ori	r24, 0x03	; 3
 102:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 104:	ee e6       	ldi	r30, 0x6E	; 110
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	80 83       	st	Z, r24
    
    // Enables interrupts by setting the global interrupt mask
    sei();
 10e:	78 94       	sei
 110:	ff cf       	rjmp	.-2      	; 0x110 <main+0x68>

00000112 <__vector_16>:
    return 0;
}

/* Interrupt service routine ----------------------------------------*/
ISR(TIMER0_OVF_vect)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
	static int16_t number_of_overflows = 0;
    static uint8_t value = 0;
    
    PORTD = value;
 122:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <value.1632>
 126:	8b b9       	out	0x0b, r24	; 11
        
    if (number_of_overflows < 256)
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 130:	8f 3f       	cpi	r24, 0xFF	; 255
 132:	91 05       	cpc	r25, r1
 134:	09 f0       	breq	.+2      	; 0x138 <__vector_16+0x26>
 136:	34 f4       	brge	.+12     	; 0x144 <__vector_16+0x32>
    {        
        value++;
 138:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <value.1632>
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <value.1632>
 142:	0d c0       	rjmp	.+26     	; 0x15e <__vector_16+0x4c>
    } 
    else if (number_of_overflows < 511)
 144:	8f 3f       	cpi	r24, 0xFF	; 255
 146:	91 40       	sbci	r25, 0x01	; 1
 148:	34 f4       	brge	.+12     	; 0x156 <__vector_16+0x44>
    {
        value--;
 14a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <value.1632>
 14e:	81 50       	subi	r24, 0x01	; 1
 150:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <value.1632>
 154:	04 c0       	rjmp	.+8      	; 0x15e <__vector_16+0x4c>
    }
    else
    {
        number_of_overflows = 0;
 156:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 15a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
    }    
    number_of_overflows++;
 15e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 162:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 16c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	2f 91       	pop	r18
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	2f 93       	push	r18
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 194:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    data = UART0_DATA;
 198:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 19c:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 19e:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <UART_RxHead>
 1a2:	ef 5f       	subi	r30, 0xFF	; 255
 1a4:	ef 73       	andi	r30, 0x3F	; 63

    if (tmphead == UART_RxTail)
 1a6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <UART_RxTail>
 1aa:	e9 17       	cp	r30, r25
 1ac:	39 f0       	breq	.+14     	; 0x1bc <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 1ae:	e0 93 05 01 	sts	0x0105, r30	; 0x800105 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	e8 5f       	subi	r30, 0xF8	; 248
 1b6:	fe 4f       	sbci	r31, 0xFE	; 254
 1b8:	20 83       	st	Z, r18
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 1bc:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 1be:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <UART_LastRxError>
 1c2:	89 2b       	or	r24, r25
 1c4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <UART_LastRxError>
}
 1c8:	ff 91       	pop	r31
 1ca:	ef 91       	pop	r30
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	2f 91       	pop	r18
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 1ee:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <UART_TxHead>
 1f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <UART_TxTail>
 1f6:	98 17       	cp	r25, r24
 1f8:	69 f0       	breq	.+26     	; 0x214 <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 1fa:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <UART_TxTail>
 1fe:	ef 5f       	subi	r30, 0xFF	; 255
 200:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
 202:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	e8 5b       	subi	r30, 0xB8	; 184
 20a:	fe 4f       	sbci	r31, 0xFE	; 254
 20c:	80 81       	ld	r24, Z
 20e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 212:	05 c0       	rjmp	.+10     	; 0x21e <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 214:	e1 ec       	ldi	r30, 0xC1	; 193
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	8f 7d       	andi	r24, 0xDF	; 223
 21c:	80 83       	st	Z, r24
    }
}
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
