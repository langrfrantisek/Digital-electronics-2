
knight_rider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000178  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000074a  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000682  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ac  00000000  00000000  00000fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001280  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039f  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00001643  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000016d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
 */
int main(void)
{
    /* Pin definitions */
    // Set pin as output in Data Direction Register...
    DDRB = DDRB | (1<<LED_1);
  90:	21 9a       	sbi	0x04, 1	; 4
	DDRB = DDRB | (1<<LED_2);
  92:	22 9a       	sbi	0x04, 2	; 4
	DDRB = DDRB | (1<<LED_3);
  94:	23 9a       	sbi	0x04, 3	; 4
	DDRB = DDRB | (1<<LED_4);
  96:	24 9a       	sbi	0x04, 4	; 4
	DDRB = DDRB | (1<<LED_5);
  98:	25 9a       	sbi	0x04, 5	; 4
	
	// turn LED on in Data Register
	PORTB = PORTB | (1<<LED_1);
  9a:	29 9a       	sbi	0x05, 1	; 5
    // turn LED off in Data Register
	PORTB = PORTB & ~(1<<LED_2);
  9c:	2a 98       	cbi	0x05, 2	; 5
	PORTB = PORTB & ~(1<<LED_3);
  9e:	2b 98       	cbi	0x05, 3	; 5
	PORTB = PORTB & ~(1<<LED_4);
  a0:	2c 98       	cbi	0x05, 4	; 5
	PORTB = PORTB & ~(1<<LED_5);
  a2:	2d 98       	cbi	0x05, 5	; 5
			_delay_ms(BLINK_DELAY);
			PORTB <<=1;
		}
		
		// Blinking left
		for (i = 4; i > 0; i--)
  a4:	94 e0       	ldi	r25, 0x04	; 4
	
    // Infinite loop
    while (1)
    {
		// Blinking right
		for (i = 0; i < 4; i++)
  a6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	34 e3       	ldi	r19, 0x34	; 52
  ae:	8c e0       	ldi	r24, 0x0C	; 12
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	30 40       	sbci	r19, 0x00	; 0
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x20>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x2a>
  ba:	00 00       	nop
		{
			_delay_ms(BLINK_DELAY);
			PORTB <<=1;
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	88 0f       	add	r24, r24
  c0:	85 b9       	out	0x05, r24	; 5
	
    // Infinite loop
    while (1)
    {
		// Blinking right
		for (i = 0; i < 4; i++)
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  cc:	84 30       	cpi	r24, 0x04	; 4
  ce:	68 f3       	brcs	.-38     	; 0xaa <main+0x1a>
  d0:	14 c0       	rjmp	.+40     	; 0xfa <main+0x6a>
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	34 e3       	ldi	r19, 0x34	; 52
  d6:	8c e0       	ldi	r24, 0x0C	; 12
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	30 40       	sbci	r19, 0x00	; 0
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x48>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x52>
  e2:	00 00       	nop
		
		// Blinking left
		for (i = 4; i > 0; i--)
		{
			_delay_ms(BLINK_DELAY);
			PORTB >>=1;
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	86 95       	lsr	r24
  e8:	85 b9       	out	0x05, r24	; 5
			_delay_ms(BLINK_DELAY);
			PORTB <<=1;
		}
		
		// Blinking left
		for (i = 4; i > 0; i--)
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ee:	81 50       	subi	r24, 0x01	; 1
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  f4:	81 11       	cpse	r24, r1
  f6:	ed cf       	rjmp	.-38     	; 0xd2 <main+0x42>
  f8:	d6 cf       	rjmp	.-84     	; 0xa6 <main+0x16>
  fa:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
  fe:	e9 cf       	rjmp	.-46     	; 0xd2 <main+0x42>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
